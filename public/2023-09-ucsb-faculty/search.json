[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "UCSB Faculty Seminar Series: Grow Your Data & Team Science Skills",
    "section": "",
    "text": "Seminar Series Overview\nWeek One: September 11 - 15, 2023\nHosted by the National Center for Ecological Anlysis and Synthesis (NCEAS) and in partnership with UCSB’s Office of Research, this seminar series is a training program where participants engage in synthesis research in a small cohort. It will equip participants with data science and team science tools, and provide them with a platform to conduct collaborative synthesis research. The overall aim is to grow cross-departmental relationships and interdisciplinary research outputs."
  },
  {
    "objectID": "index.html#nceas-expertise",
    "href": "index.html#nceas-expertise",
    "title": "UCSB Faculty Seminar Series: Grow Your Data & Team Science Skills",
    "section": "NCEAS Expertise",
    "text": "NCEAS Expertise\nNCEAS, a research affiliate of UCSB, is a leading expert on interdisciplinary data science and works collaboratively to answer the world’s largest and most complex questions. The NCEAS approach leverages existing data and employs a team science philosophy to squeeze out all potential insights and solutions efficiently - this is called synthesis science. NCEAS has over 25 years of success with this model among working groups and environmental professionals."
  },
  {
    "objectID": "index.html#week-one-crafting-your-synthesis-research-question",
    "href": "index.html#week-one-crafting-your-synthesis-research-question",
    "title": "UCSB Faculty Seminar Series: Grow Your Data & Team Science Skills",
    "section": "Week One: Crafting Your Synthesis Research Question",
    "text": "Week One: Crafting Your Synthesis Research Question\nSeptember 11 - 15, 2023\n\nLearning Objectives\n\nParticipants will develop research ideas and utilize environmental data science (EDS) skills to test the feasibility of the project and assess the quality of data associated with it\nParticipants will create a Data Management Plan as a tool for adaptive research, and apply new EDS skills and tools to progress research and synthesis research products\n\n\n\nSchedule"
  },
  {
    "objectID": "index.html#full-schedule",
    "href": "index.html#full-schedule",
    "title": "UCSB Faculty Seminar Series: Grow Your Data & Team Science Skills",
    "section": "Full Schedule",
    "text": "Full Schedule\n\n\n\n\n\n\n\n\n\nSession\nDates\nLocation\nTime\n\n\n\n\nSession One\nSeptember 11-15, 2023\nNCEAS\n9:00AM-5:00PM\n\n\nSession Two\nRemote session every second Tuesday throughout October-February\nOctober 10, 2023\nNovember 14, 2023\nDecember 12, 2023\nJanuary 9, 2024\nFebruary 13, 2024\nRemote via Zoom\n3:00PM-5:00PM\n\n\nSession Three\nMarch 25-28, 2024\nNCEAS\n9:00AM-5:00PM"
  },
  {
    "objectID": "index.html#code-of-conduct",
    "href": "index.html#code-of-conduct",
    "title": "UCSB Faculty Seminar Series: Grow Your Data & Team Science Skills",
    "section": "Code of Conduct",
    "text": "Code of Conduct\nBy participating in this activity you agree to abide by the NCEAS Code of Conduct."
  },
  {
    "objectID": "index.html#about-this-book",
    "href": "index.html#about-this-book",
    "title": "UCSB Faculty Seminar Series: Grow Your Data & Team Science Skills",
    "section": "About this book",
    "text": "About this book\nThese written materials are the result of a continuous and collaborative effort at NCEAS with the support of DataONE, to help researchers make their work more transparent and reproducible. This work began in the early 2000’s, and reflects the expertise and diligence of many, many individuals. The primary authors for this version are listed in the citation below, with additional contributors recognized for their role in developing previous iterations of these or similar materials.\nThis work is licensed under a Creative Commons Attribution 4.0 International License.\nCitation: Samantha Csik, Renata Curty, Halina Do-Linh, Seth Erickson, Jon Jablonski, Camila Vargas Poulsen (2023). UCSB Faculty Seminar Series: Grow Your Data & Team Science Skills. NCEAS Learning Hub. URL learning.nceas.ucsb.edu/2023-09-ucsb-faculty.\nAdditional contributors: Ben Bolker, Julien Brun, Amber E. Budden, Jeanette Clark, Carmen Galaz García, Stephanie Hampton, Natasha Haycock-Chavez, Matthew B. Jones, Samanta Katz, Julie Lowndes, Erin McLean, Bryce Mecum, Deanna Pennington, Karthik Ram, Jim Regetz, Tracy Teal, Daphne Virlar-Knight, Leah Wasser.\nThis is a Quarto book. To learn more about Quarto books visit https://quarto.org/docs/books."
  },
  {
    "objectID": "session_01.html#learning-objectives",
    "href": "session_01.html#learning-objectives",
    "title": "1  Synthesis Research Generation & Iteration",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nDevelop synthesis research ideas to pursue as a group with the potential of producing synthesis research products (e.g. high impact publication)\nDiscuss synthesis research ideas as a group and iterate to a focused research question\nCreate and share Leadership User Manual to guide team collaboration"
  },
  {
    "objectID": "session_01.html#synthesis-research-questions-rounds",
    "href": "session_01.html#synthesis-research-questions-rounds",
    "title": "1  Synthesis Research Generation & Iteration",
    "section": "1.1 Synthesis Research Questions Rounds",
    "text": "1.1 Synthesis Research Questions Rounds\n\n\n\n\n\n\nRound 1: Question Everything\n\n\n\n\n\nGo to each synthesis research question and add all the questions you have about this topic. No question is too basic here! The goal is to ask all kinds of questions from varying perspectives to gain different understandings about the topic.\nExample:\n\n\n\n\n\n\n\n\n\nRound 2: Narrow it Down\n\n\n\n\n\nGo to each synthesis research question and review the questions that have been added to it from the first round. Consider how you would make this question actionable with a reasonable scope. What are potential outcomes or research products?\nExample:\n\n\n\n\n\n\n\n\n\nRound 3: Choose Your Adventure\n\n\n\n\n\nTime to choose a topic and synthesis research question you want to work on! You are not picking a broad question or topic to work on, instead you are selecting one of the refined questions within the broad question. Additionally consider what skills, expertise, and people would be needed to successfully complete this project.\nExample:"
  },
  {
    "objectID": "session_01.html#leadership-user-manual",
    "href": "session_01.html#leadership-user-manual",
    "title": "1  Synthesis Research Generation & Iteration",
    "section": "1.2 Leadership User Manual",
    "text": "1.2 Leadership User Manual\n\n\n\n\n\n\nAcknowledgements\n\n\n\nThe Leadership User Manual is an idea that has long been adapted by multiple organizations, businesses, and academic institutions. See articles in Forbes, The New York Times, and LinkedIn.\n\n\nA Leadership User Manual is a guide to share with your team and collaborators so they best know how to work with you. You can think of it as a reflection exercise on your strengths and weaknesses, working style, quirks, and any additional information that encompasses your working personality.\n\n\n\n\n\n\nView an example created by Danielle Furuichi, an alum from University of Colorado Boulder, who developed a Leadership User Manual for their capstone group.\n\n\n\n\n1.2.1 Exercise:\nUse the provided template to create your own Leadership User Manual. Then share with your collaborators, and learn about your collaborators through their Leadership User Manuals."
  },
  {
    "objectID": "session_02.html#learning-objectives",
    "href": "session_02.html#learning-objectives",
    "title": "2  Team Science for Synthesis",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nProvide tools to navigate the social aspects of collaboration\nDiscuss collaboration best practices\nExplore key aspects of the science of team science\n\n\n\n\n\n\n\nAcknowledegment\n\n\n\nMost of this lesson comes from information written by NCEAS Senior Fellow Carrie Kappel on NCEAS Guidance for Collaborative Synthesis Science Working Groups. Carrie is an expert team science facilitator."
  },
  {
    "objectID": "session_02.html#successful-synthesis-science-working-groups",
    "href": "session_02.html#successful-synthesis-science-working-groups",
    "title": "2  Team Science for Synthesis",
    "section": "2.1 Successful synthesis science working groups",
    "text": "2.1 Successful synthesis science working groups\nBased on NCEAS experience doing synthesis science and guiding hundreds of working groups, here are some aspects successful groups have in common. It is important to know that there is no on-size-fits-all recipe that works for every group, but there are some key ingredients that NCEAS have seen confer success over and over.\n\nExciting synthesis science questions linked to impact: Novel synthesis of existing data with high likelihood of contributing solutions to pressing problems.\nDiverse participants: Gender, ethnicity, geographic-origin, sector, discipline, age, job function and career stage\nEffective leadership to spark a creative vision, facilitate an inclusive process, and provide effective project management to maintain momentum and deliver on objectives.\nData access and management: Working group members identify and access rich datasets, integrate data management into work plan, and apply best practices for open, reproducible science\nWell-developed work plan takes advantage of the group’s diverse talents, interests, and incentives, with clear milestones, deliverables, and assigned responsibilities\nJustified methods and logical links: Data collection and analytical methods, metrics, and models based on a solid understanding of the existing literature\nGood communication and collaboration: Establish mutually agreed upon norms and systems\nSocial bonding and team cohesion: Spend time together as a groups on different settings, not only working towards the project’s goal."
  },
  {
    "objectID": "session_02.html#creating-a-culture-of-collaboration",
    "href": "session_02.html#creating-a-culture-of-collaboration",
    "title": "2  Team Science for Synthesis",
    "section": "2.2 Creating a Culture of Collaboration",
    "text": "2.2 Creating a Culture of Collaboration\nThe over all goal of this Seminar Series is to equip you with data science and team science tools, providing a platform to conduct collaborative synthesis research. Collaboration is defined as: “the action of working with someone to produce or create something”, in this case synthesis research. In order for collaboration to be successful and enjoyable experience we need to foster a good collaboration culture.\nKey elements to a good collaboration culture:\n\nNorms and expectations: Defining how collaborators want to engage with each other, how conflicts should be handled and how credit will be shared and attributed.\nData sharing and authorship responsibilities: Given the diverse fields and sectors represented in synthesis working groups, members may have divergent perspectives around credit and data sharing. These should be discussed early and often. The International Committee of Medical Journal Editors guidelines for authorship and contribution are a good starting place.\nEqual opportunities for participation: Members need an opportunity to share and be recognized for their expertise early in the process, so build in time for informative introductions (e.g., lightning presentations or round-robin introductions accompanied by circulated written bios). Consider creating the opportunity for learning proper spelling and pronunciation of group members’ names and requiring participants to also indicate their pronouns.\nSharing facilitation responsibilities: Each activity should have an objective. The duty of keeping the group on track toward those objectives can be rotated.\n\n\n2.2.1 Norms and Expectations: Developing a code of conduct\nWhether you are joining a lab group or establishing a new collaboration, articulating a set of shared agreements about how people in the group will treat each other will help create the conditions for successful collaboration. If agreements or a code of conduct do not yet exist, invite a conversation among all members to create them. Co-creation of a code of conduct will foster collaboration and engagement as a process in and of itself, and is important to ensure all voices heard such that your code of conduct represents the perspectives of your community. If a code of conduct already exists, and your community will be a long-acting collaboration, you might consider revising the code of conduct. Having your group ‘sign off’ on the code of conduct, whether revised or not, supports adoption of the principles.\nWhen creating a code of conduct, consider both the behaviors you want to encourage and those that will not be tolerated. For example, the Openscapes code of conduct includes Be respectful, honest, inclusive, accommodating, appreciative, and open to learning from everyone else. Do not attack, demean, disrupt, harass, or threaten others or encourage such behavior.\nBelow are other example codes of conduct:\n\nNCEAS Code of Conduct\nCarpentries Code of Conduct\nArctic Data Center Code of Conduct\nMozilla Community Participation Guidelines\nEcological Society of America Code of Conduct\nOpenscapes code of conduct\n\n\n\n2.2.2 Data sharing and authorship responsibilities: Authorship and Credit Policies\n\nNavigating issues of intellectual property and credit can be a challenge, particularly for early career researchers. Open communication is critical to avoiding misunderstandings and conflicts. Talk to your coauthors and collaborators about authorship, credit, and data sharing early and often. This is particularly important when working with new collaborators and across lab groups or disciplines which may have divergent views on authorship and data sharing. If you feel uncomfortable talking about issues surrounding credit or intellectual property, seek the advice or assistance of a mentor to support you in having these important conversations.\nThe “Publication” section of the Ecological Society of America’s Code of Ethics is a useful starting point for discussions about co-authorship, as are the International Committee of Medical Journal Editors guidelines for authorship and contribution. You should also check guidelines published by the journal(s) to which you anticipate submitting your work.\nFor collaborative research projects, develop an authorship agreement for your group early in the project and refer to it for each product. This example authorship agreement from the Arctic Data Center provides a useful template. It builds from information contained within Weltzin et al (2006) and provides a rubric for inclusion of individuals as authors. Your collaborative team may not choose to adopt the agreement in the current form, however it will prompt thought and discussion in advance of developing a consensus. Some key questions to consider as you are working with your team to develop the agreement:\n\nWhat roles do we anticipate contributors will play? e.g., the NISO Contributor Roles Taxonomy (CRediT) identifies 14 distinct roles:\n\nConceptualization\nData curation\nFormal Analysis\nFunding acquisition\nInvestigation\nMethodology\nProject administration\nResources\nSoftware\nSupervision\nValidation\nVisualization\nWriting – original draft\nWriting – review & editing\n\nWhat are our criteria for authorship? (See the ICMJE guidelines for potential criteria)\nWill we extend the opportunity for authorship to all group members on every paper or product?\nDo we want to have an opt in or opt out policy? (In an opt out policy, all group members are considered authors from the outset and must request removal from the paper if they don’t want think they meet the criteria for authorship)\nWho has the authority to make decisions about authorship? Lead author? PI? Group?\nHow will we decide authorship order?\nIn what other ways will we acknowledge contributions and extend credit to collaborators?\nHow will we resolve conflicts if they arise?\n\n\n\n2.2.3 Data sharing and authorship responsibilities: Data Sharing and Reuse Policies\nAs with authorship agreements, it is valuable to establish a shared agreement around handling of data when embarking on collaborative projects. Data collected as part of a funded research activity will typically have been managed as part of the Data Management Plan (DMP) associated with that project. However, collaborative research brings together data from across research projects with different data management plans and can include publicly accessible data from repositories where no management plan is available. For these reasons, a discussion and agreement around the handling of data brought into and resulting from the collaboration is warranted and management of this new data may benefit from going through a data management planning process. Below we discuss example data agreements.\nThe example data policy template provided by the Arctic Data Center addresses three categories of data.\n\nIndividual data not in the public domain\nIndividual data with public access\nDerived data resulting from the project\n\nFor the first category, the agreement considers conditions under which those data may be used and permissions associated with use. It also addresses access and sharing. In the case of individual, publicly accessible data, the agreement stipulates that the team will abide by the attribution and usage policies that the data were published under, noting how those requirements we met. In the case of derived data, the agreement reads similar to a DMP with consideration of making the data public; management, documentation and archiving; pre-publication sharing; and public sharing and attribution. As research data objects receive a persistent identifier (PID), often a DOI, there are citable objects and consideration should be given to authorship of data, as with articles.\nThe following example lab policy from the Wolkovich Lab combines data management practices with authorship guidelines and data sharing agreements. It provides a lot of detail about how this lab approaches data use, attribution and authorship. For example:"
  },
  {
    "objectID": "session_02.html#team-communication",
    "href": "session_02.html#team-communication",
    "title": "2  Team Science for Synthesis",
    "section": "2.3 Team Communication",
    "text": "2.3 Team Communication\nDefining the ground rules of how your team is going to operates is a great starting We are now going to talk about communicating with each other in a positive and productive way to enhance the group’s work, including all voices and making sure conflicts and disagreements are addressed.\n\n2.3.1 Moving from debate to dialogue\nSynthesis working groups often convene diverse collections of participants not otherwise collaborating to catalyze novel insights and solutions. One primary method of catalyzing novel ideas is to allow the flow of dialogue during a group meeting. In contrast to debate or discussion, dialogue allows groups to recognize the limits on their own and others’ individual perspectives and to strive for more coherent thought. This process can take working groups in directions not imagined or planned.\nIn discussion, different views are presented and defended, and this may provide a useful analysis of the whole situation. In dialogue, all views are treated as equally valid and different views are presented as a means toward discovering a new view. In a skillful discussion, decisions are made. In a dialogue, complex issues are explored. Both are critical to the working group process, and the more artfully a group can move between these two forms of discourse (and out of less productive debate and polite discussion) according to what is needed, the more effective the group will be.\n\n\n2.3.2 Embracing divergent thinking\nThe most important outcome of your first meeting is getting convergence or group alignment on a set of shared goals and objectives and a plan for how to achieve them. If your working group process is effective, this plan will be an inclusive solution – one that works for everyone in the group. Achieving this shared vision can be more difficult than one might expect. While you may expect that participants have already agreed to the vision in joining the group, agreement does not always equate to alignment.\nWhen a diverse group comes together to work on a complex problem, their views are likely to diverge widely across many dimensions from problem definition to priorities to methods/approaches to the definition of success. But you can tap that divergent thinking to generate entirely new ideas and options that emerge through the group’s productive struggle for mutual understanding.\nThe first stage of group decision-making is divergent thinking (Kaner et al. 2014 ). Confronted with a new, complex topic, the group will gradually move from the safe territory of familiar opinions into sharing their diverse perspectives and exploring new ideas. This can feel like the group process is devolving away from what was assumed to be shared agreement, but it is actually a critical part of the collaborative process.\n\n\n\nDrawing by Carrie Kappel, adapted from Sam Kaner’s Facilitator’s Guide to Participatory Decision making\n\n\nWhile a group is in the divergent thinking stage, it’s critical to:\n\nFoster dialogue to surface different perspectives.\nExamine hidden assumptions.\nCreate room for disagreement and questioning.\nAmplify diverse perspectives in order to expand the range of possibilities.\nSuspend judgment and encourage full participation.\n\nUseful facilitation techniques at this stage include:\n\n\n\n\n\n\n\nTechnique\nDescription\n\n\n\n\nBrainstorm\nCollect lots of ideas, verbally and/or with sticky notes\n\n\nBreakout groups\nMix up participation and allow parallel generation of ideas\n\n\nPrompts and homework\nTo encourage deeper, out of the box thinking\n\n\nRound robins\nTo get starting positions out on the table\n\n\nInformal & spontaneous interaction\nWater cooler, take a (coffee) break, or other casual conversation opportunities\n\n\nEngage diverse perspectives\nEncouraging and drawing out people, mirroring and validating what they say, and really honor their contributions\n\n\nCome at your problem from multiple angles\nBuild on different ideas\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\nIf participants do not feel like the working group climate allows for critical inquiry, they may agree to the aims on the surface, but latent questions and disagreements will linger underneath. If those latent concerns persist, the work will suffer in the long run. While it may feel like there is agreement in that case, the group lacks alignment, and the effort is unlikely to successfully meet its goals.\n\n\n\n\n2.3.3 Between divergent thinking and convergence: the groan zone\n\n\n\nDrawing by Carrie Kappel, adapted from Sam Kaner’s Facilitator’s Guide to Participatory Decisionmaking\n\n\nIt’s natural for groups to go through a period of confusion and frustration as they struggle to integrate their diverse perspectives into a shared framework of understanding (Kaner et al. 2014 ). The goal is to get the group across this no man’s land between divergent thinking and convergence known as the “groan zone.” In the groan zone, one importat thing is to keep the group from getting frustrated and shutting down. Some useful techniques for the groan zone include:\n\nSeparating facts and opinions\nCreating categories to reveal structure and allow sorting and prioritization\nCarefully examining language, e.g. by looking word by word at a key statement or question that is being debated and asking what questions each word raises\nCreating a parking lot to capture side issues and reserving time to revisit these – taking the tangents seriously is a critical part of letting participants know you value their contributions\nExamining how proposed ideas might affect each individual in the group\nHonoring objections to the process and asking for suggestions\n\nIf the conversation is getting off track or the dynamics becomes difficult, useful techniques that allow “the leader” or facilitator to remain committed to being supportive and respectful of all group members (including “difficult” ones) are:\n\nReminding individuals of the larger purpose of the group and reconnecting them to their own personal reasons for caring about and working on the issue, e.g. by inviting them to take a moment to reflect\nTaking a break\nSwitching the participation format (e.g., going to breakout groups, brainstorming, a go-around, or individual writing)\nStepping out of the content and addressing the process\nEducating members about group dynamics\nEncouraging more people to participate\nReframing the discussion, e.g. by surfacing underlying issues, and/or focusing on concrete actions that the group can take to resolve the conflict\nFocusing on common ground and areas of potential alignment\n\n\n\n\n\n\n\nImportant\n\n\n\nDon’t get discouraged by the groan zone. Remember that misunderstanding and miscommunication are normal parts of the process. And even more importantly, “the act of working through these misunderstandings is what builds the foundation for sustainable agreements and meaningful collaboration” (Kaner et al. 2014 ).\n\n\n\n\n2.3.4 Getting to convergence\nOnce the group has a strong foundation of shared understanding, things start to click into place and everything will feel easier and faster as you enter the zone of convergent thinking. At this point, the group is ready to devise inclusive solutions, weigh alternatives and make decisions. The goal on this step is to help the group devise specific proposals, evaluate and decide among them, and refine and synthesize into an overall approach, and lay out a concrete plan.\nTechniques that are useful in this phase include:\n\nPulling up examples for inspiration\nInvite participants to make clear verbal or written proposals\nCreative reframing to support more innovative, inclusive solutions\nChart writing and summarizing so that participants can see their ideas in writing and refine them\nClarify areas of agreement and disagreement\nDecide how you are going to make decisions and have a fallback plan\nEvaluating alternatives along the axes of feasibility and impact to identify the options that are both high impact and highly feasible. Another useful comparison may be payoffs and risks. Be sure to define what you mean by each axis before you start evaluating ideas.\n\n\n\nPlanning the work flow, using a timetable, Gantt chart, or other tool\nDefining steps and milestones\nCapturing who does what, by when – For each deliverable, identify the person(s):\n\nResponsible (the lead on a deliverable)\nAccountable (those who will contribute)\nConsulted (those who may be asked for advice), and\nInformed (those who just want to be kept in the loop)\n\n\nWhile the big first step in synthesis is getting to convergence on the overall work plan, you should expect that the group may have to go through mini versions of the process of divergence and convergence again in future meetings as they dive into the work and uncover new challenges. But the shared understanding and social rapport that come from successfully struggling together early on will allow the group to more easily and rapidly develop and implement new solutions in subsequent meetings.\n\n\n\n\n\n\nHow are you going to decide?\n\n\n\nIt is important to document the team’s selected decision making process. This helps remind group members that once a decision is made, the group moves forward with and works to support and communicate the decision.\n\n\n\nHighly Effective Teams, TNC 2015\n\n\n\n\n\n\n\n\n\n\nTechnique for gauging consensus: Fist to Five"
  },
  {
    "objectID": "session_02.html#the-power-of-open",
    "href": "session_02.html#the-power-of-open",
    "title": "2  Team Science for Synthesis",
    "section": "2.4 The Power of Open",
    "text": "2.4 The Power of Open\nAdopting an open source mindset, tools, and communication channels can increase the efficiency of your team’s analyses, their impact, and reach. Furthermore establishing good collaboration practices can transform the culture of how we do science. This means enabling an open culture driven by collaboration, empathy, and kindness. Strengthening collaboration, leading teams to be more efficient and positive.\n\nCheck out the paper Our path to better science in less time using open data science tools in Nature Ecology & Evolution, led by Openscapes founder and NCEAS Senior Fellow, Julia Lowndes, for an example of how empowering these open workflows can be for research teams.\n\n\n\n\n\n\n\nOpenscapes\n\n\n\n\n“Openscapes is an approach and a movement that helps researchers and those supporting research find each other and feel empowered to conduct data-intensive science. Through a creative approach drawing inspiration and skills from many places, we provide structures for technical skill-building, collaborative teamwork, and inclusive community development.” (openscapes.org)"
  },
  {
    "objectID": "session_02.html#activity",
    "href": "session_02.html#activity",
    "title": "2  Team Science for Synthesis",
    "section": "2.5 Activity",
    "text": "2.5 Activity\n\n\n\n\n\n\nTeam Collaboration Guidelines\n\n\n\n\nDeveloping a code of conduct\n\n\nSet of shared agreements about how people in the group will treat each other will help create the conditions for successful collaboration.\nWhat behaviors do you want to encourage?\nWhat behaviors that will not be tolerated?\nHow is the team going to make decisions?\n\nSee examples in section 2.2.1\n\nEstablishing Authorship and Credit Policies\n\n\nCheck the International Committee of Medical Journal Editors guidelines for authorship and contribution\nRevise the NISO Contributor Roles Taxonomy (CRediT)\nAs a group answer the following questions relevant questions to your project: What are our criteria for authorship? (See the ICMJE guidelines for potential criteria)\n\nWill we extend the opportunity for authorship to all group members on every paper or product?\nDo we want to have an opt in or opt out policy? (In an opt out policy, all group members are considered authors from the outset and must request removal from the paper if they don’t think they meet the criteria for authorship)\nWho has the authority to make decisions about authorship? Lead author? PI? Group?\nHow will we decide authorship order?\nIn what other ways will we acknowledge contributions and extend credit to collaborators?\nHow will we resolve conflicts if they arise?\n\n\n\nData Sharing and Reuse Policies\n\n\nGo over the Arctic Data Center Data Sharing and Reuse Policies Example template\nUse this template to start drafting a Data Sharing and Reuse Policies for your group."
  },
  {
    "objectID": "session_03.html#learning-objectives",
    "href": "session_03.html#learning-objectives",
    "title": "3  Intro to R Programming",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nGet oriented with the RStudio interface\nRun code and basic arithmetic in the Console\nPractice writing code in an R Script\nBe introduced to built-in R functions\nUse the Help pages to look up function documentation\n\n\nThis lesson is a combination of excellent lessons by others. Huge thanks to Julie Lowndes for writing most of this content and letting us build on her material, which in turn was built on Jenny Bryan’s materials. We highly recommend reading through the original lessons and using them as reference (see in the resources section below)."
  },
  {
    "objectID": "session_03.html#welcome-to-r-programming",
    "href": "session_03.html#welcome-to-r-programming",
    "title": "3  Intro to R Programming",
    "section": "3.1 Welcome to R Programming",
    "text": "3.1 Welcome to R Programming\n\n\n\nArtwork by Allison Horst\n\n\nThere is a vibrant community out there that is collectively developing increasingly easy to use and powerful open source programming tools. The changing landscape of programming is making learning how to code easier than it ever has been. Incorporating programming into analysis workflows not only makes science more efficient, but also more computationally reproducible. In this course, we will use the programming language R, and the accompanying integrated development environment (IDE) RStudio. R is a great language to learn for data-oriented programming because it is widely adopted, user-friendly, and (most importantly) open source!\nSo what is the difference between R and RStudio? Here is an analogy to start us off. If you were a chef, R is a knife. You have food to prepare, and the knife is one of the tools that you’ll use to accomplish your task.\nAnd if R were a knife, RStudio is the kitchen. RStudio provides a place to do your work! Other tools, communication, community, it makes your life as a chef easier. RStudio makes your life as a researcher easier by bringing together other tools you need to do your work efficiently - like a file browser, data viewer, help pages, terminal, community, support, the list goes on. So it’s not just the infrastructure (the user interface or IDE), although it is a great way to learn and interact with your variables, files, and interact directly with git. It’s also data science philosophy, R packages, community, and more. Although you can prepare food without a kitchen and we could learn R without RStudio, that’s not what we’re going to do. We are going to take advantage of the great RStudio support, and learn R and RStudio together.\nSomething else to start us off is to mention that you are learning a new language here. It’s an ongoing process, it takes time, you’ll make mistakes, it can be frustrating, but it will be overwhelmingly awesome in the long run. We all speak at least one language; it’s a similar process, really. And no matter how fluent you are, you’ll always be learning, you’ll be trying things in new contexts, learning words that mean the same as others, etc, just like everybody else. And just like any form of communication, there will be miscommunication that can be frustrating, but hands down we are all better off because of it.\nWhile language is a familiar concept, programming languages are in a different context from spoken languages and you will understand this context with time. For example: you have a concept that there is a first meal of the day, and there is a name for that: in English it’s “breakfast.” So if you’re learning Spanish, you could expect there is a word for this concept of a first meal. (And you’d be right: “desayuno”). We will get you to expect that programming languages also have words (called functions in R) for concepts as well. You’ll soon expect that there is a way to order values numerically. Or alphabetically. Or search for patterns in text. Or calculate the median. Or reorganize columns to rows. Or subset exactly what you want. We will get you to increase your expectations and learn to ask and find what you’re looking for."
  },
  {
    "objectID": "session_03.html#rstudio-ide",
    "href": "session_03.html#rstudio-ide",
    "title": "3  Intro to R Programming",
    "section": "3.2 RStudio IDE",
    "text": "3.2 RStudio IDE\nLet’s take a tour of the RStudio interface.\n\nNotice the default panes:\n\nConsole (entire left)\nEnvironment/History (tabbed in upper right)\nFiles/Plots/Packages/Help (tabbed in lower right)\n\n\n\n\n\n\n\nQuick Tip\n\n\n\nYou can change the default location of the panes, among many other things, see Customizing RStudio."
  },
  {
    "objectID": "session_03.html#coding-in-the-console",
    "href": "session_03.html#coding-in-the-console",
    "title": "3  Intro to R Programming",
    "section": "3.3 Coding in the Console",
    "text": "3.3 Coding in the Console\n\n\n\n\n\n\nBut first, an important first question: where are we?\n\n\n\nIf you’ve just opened RStudio for the first time, you’ll be in your Home directory. This is noted by the ~/ at the top of the console. You can see too that the Files pane in the lower right shows what is in the Home directory where you are. You can navigate around within that Files pane and explore, but note that you won’t change where you are: even as you click through you’ll still be Home: ~/.\n\n\n\n\n\n\n\nWe can run code in a couple of places in RStudio, including the Console, let’s start there.\nAt it’s most basic, we can use R as a calculator, let’s try a couple of examples in the console.\n\n# run in the console\n# really basic examples\n3*4\n3+4\n3-4\n3/4\n\nWhile there are many cases where it makes sense to type code directly in to the the console, it is not a great place to write most of your code since you can’t save what you ran. A better way is to create an R Script, and write your code there. Then when you run your code from the script, you can save it when you are done. We’re going to continue writing code in the Console for now, but we’ll code in an R Script later in this lesson\n\n\n\n\n\n\nQuick Tip\n\n\n\nWhen you’re in the console you’ll see a greater than sign (&gt;) at the start of a line. This is called the “prompt” and when we see it, it means R is ready to accept commands. If you see a plus sign (+) in the Console, it means R is waiting on additional information before running. You can always press escape (esc) to return to the prompt. Try practicing this by running 3* (or any incomplete expression) in the console.\n\n\n\n3.3.1 Objects in R\nLet’s say the value of 12 that we got from running 3*4 is a really important value we need to keep. To keep information in R, we need to create an object. The way information is stored in R is through objects.\nWe can assign a value of a mathematical operation (and more!) to an object in R using the assignment operator, &lt;- (greater than sign and minus sign). All objects in R are created using the assignment operator, following this form: object_name &lt;- value.\n\n\n\n\n\n\nExercise: Create an object\n\n\n\nAssign 3*4 to an object called important_value and then inspect the object you just created.\n\n\n\n# think of this code as someone saying \"important_value gets 12\".\nimportant_value &lt;- 3*4\n\nNotice how after creating the object, R doesn’t print anything. However, we know our code worked because we see the object, and the value we wanted to store is now visible in our Global Environment. We can force R to print the value of the object by calling the object name (aka typing it out) or by using parentheses.\n\n\n\n\n\n\nQuick Tip\n\n\n\nWhen you begin typing an object name RStudio will automatically show suggested completions for you that you can select by hitting tab, then press return.\n\n\n\n# printing the object by calling the object name\nimportant_value\n\n[1] 12\n\n# printing the object by wrapping the assignment syntax in parentheses\n(important_value &lt;- 3*4)\n\n[1] 12\n\n\n\n\n\n\n\n\nQuick Tip\n\n\n\nWhen you’re in the Console use the up and down arrow keys to call your command history, with the most recent commands being shown first.\n\n\n\n\n3.3.2 Naming Conventions\nBefore we run more calculations, let’s talk about naming objects. For the object, important_value we used an underscore to separate the object name. This naming convention is called snake case. There are other naming conventions including, but not limited to:\n\nwe_used_snake_case\nsomeUseCamelCase\nSomeUseUpperCamelCaseAlsoCalledPascalCase\n\nChoosing a naming convention is a personal preference, but once you choose one - be consistent! A consistent naming convention will increase the readability of your code for others and your future self.\n\n\n\n\n\n\nQuick Tip\n\n\n\nObject names cannot start with a digit and cannot contain certain characters such as a comma or a space."
  },
  {
    "objectID": "session_03.html#running-code-in-an-r-script",
    "href": "session_03.html#running-code-in-an-r-script",
    "title": "3  Intro to R Programming",
    "section": "3.4 Running code in an R Script",
    "text": "3.4 Running code in an R Script\nSo far we’ve been running code in the Console, let’s try running code in an R Script. An R Script is a simple text file. RStudio uses an R Script by copying R commands from text in the file and pastes them into the Console as if you were manually entering commands yourself.\n\n\n\n\n\n\nCreating an R Script\n\n\n\n\nFrom the “File” menu, select “New File”\nClick “R Script” from the list of options\n\nRStudio should open your R Script automatically after creating it. Notice a new pane appears above the Console. This is called the Source pane and is where we write and edit R code and documents. This pane is only present if there are files open in the editor.\n\nSave the R Script as intro-to-programming.R\n\n\n\n\n3.4.1 How to run code in an R Script\nRunning code in an R Script is different than running code in the Console (aka you can’t just press return / enter). To interpret and run the code you’ve written, R needs you to send the code from the script (or editor) to the Console. Some common ways to run code in an R Script include:\n\nPlace your cursor on the line of code you want to run and use the shortcut command + return or click the Run button in the top right of the Source pane.\nHighlight the code you want to run, then use the shortcut command + return or click the Run button.\n\n\n\n3.4.2 R calculations with objects\nSo we know that objects are how R stores information, and we know we create objects using the assignment operator &lt;-. Let’s build upon that and learn how to use an object in calculations.\nImagine we have the weight of a dog in kilograms. Create the object weight_kg and assign it a value of 55.\n\n# weight of a dog in kilograms\nweight_kg &lt;- 55 \n\nNow that R has weight_kg saved in the Global Environment, we can run calculations with it.\n\n\n\n\n\n\nExercise: Using weight_kg run a simple calculation\n\n\n\nLet’s convert the weight into pounds. Weight in pounds is 2.2 times the weight in kg.\n\n\n\n# converting weight from kilograms to pounds\n2.2 * weight_kg\n\n[1] 121\n\n\nYou can also store more than one value in a single object. Storing a series of weights in a single object is a convenient way to perform the same operation on multiple values at the same time. One way to create such an object is with the function c(), which stands for combine or concatenate.\nFirst let’s create a vector of weights in kilograms using c() (we’ll talk more about vectors in the next section, Data structures in R).\n\n# create a vector of weights in kilograms\nweight_kg &lt;- c(55, 25, 12)\n# call the object to inspect\nweight_kg\n\n[1] 55 25 12\n\n\nNow convert the vector weight_kg to pounds.\n\n# covert `weight_kg` to pounds \nweight_kg * 2.2\n\n[1] 121.0  55.0  26.4\n\n\nWouldn’t it be helpful if we could save these new weight values we just converted? This might be important information we may need for a future calculation. How would you save these new weights in pounds?\n\n# create a new object \nweight_lb &lt;- weight_kg * 2.2\n# call `weight_lb` to check if the information you expect is there\nweight_lb\n\n[1] 121.0  55.0  26.4\n\n\n\n\n\n\n\n\nQuick Tip\n\n\n\nYou will make many objects and the assignment operator &lt;- can be tedious to type over and over. Instead, use RStudio’s keyboard shortcut: option + - (the minus sign).\nNotice that RStudio automatically surrounds &lt;- with spaces, which demonstrates a useful code formatting practice. Code is miserable to read on a good day. Give your eyes a break and use spaces.\nRStudio offers many handy keyboard shortcuts. Also, option+Shift+K brings up a keyboard shortcut reference card.\nFor more RStudio tips, check out Master of Environmental Data Science (MEDS) workshop: IDE Tips & Tricks."
  },
  {
    "objectID": "session_03.html#data-types-in-r",
    "href": "session_03.html#data-types-in-r",
    "title": "3  Intro to R Programming",
    "section": "3.5 Data types in R",
    "text": "3.5 Data types in R\n\nCommon data types in R\n\n\n\n\n\n\nData Type\nDefinition\n\n\n\n\nboolean (also called logical)\nData take on the value of either TRUE, FALSE, or NA. NA is used to represent missing values.\n\n\ncharacter\nData are string values. You can think of character strings as something like a word (or multiple words). A special type of character string is a factor, which is a string but with additional attributes (like levels or an order).\n\n\ninteger\nData are whole numbers (those numbers without a decimal point). To explicitly create an integer data type, use the suffix L (e.g. 2L).\n\n\nnumeric (also called double)\nData are numbers that contain a decimal.\n\n\n\n\nLess common data types (we won’t be going into these data types this course)\n\n\n\n\n\n\nData Type\nDefinition\n\n\n\n\ncomplex\nData are complex numbers with real and imaginary parts.\n\n\nraw\nData are raw bytes.\n\n\n\nWe’ve been using primarily integer or numeric data types so far. Let’s create an object that has a string value or a character data type.\n\nscience_rocks &lt;- \"yes it does!\"\n\n“yes it does!” is a string, and R knows it’s a word and not a number because it has quotes \" \". You can work with strings in your data in R easily thanks to the stringr and tidytext packages.\nThis lead us to an important concept in programming: As we now know, there are different “classes” or types of objects in R. The operations you can do with an object will depend on what type of object it is because each object has their own specialized format, designed for a specific purpose. This makes sense! Just like you wouldn’t do certain things with your car (like use it to eat soup), you won’t do certain operations with character objects (strings).\nAlso, everything in R is an object. An object is a variable, function, data structure, or method that you have written to your environment.\nTry running the following line in your script:\n\n\"Hello world!\" * 3\n\nWhat happened? What do you see in the Console? Why?\n\n\n\n\n\n\nQuick Tip\n\n\n\nYou can see what data type or class an object is using the class() function, or you can use a logical test such as: is.numeric(), is.character(), is.logical(), and so on.\n\nclass(science_rocks) # returns character\nis.numeric(science_rocks) # returns FALSE\nis.character(science_rocks) # returns TRUE"
  },
  {
    "objectID": "session_03.html#data_structures",
    "href": "session_03.html#data_structures",
    "title": "3  Intro to R Programming",
    "section": "3.6 Data structures in R",
    "text": "3.6 Data structures in R\nOkay, now let’s talk about vectors.\nA vector is the most common and most basic data structure in R. Vectors can be thought of as a way R stores a collection of values or elements. Think back to our weight_lb vector. That was a vector of three elements each with a data type or class of numeric.\nWhat we’re describing is a specific type of vector called atomic vectors. To put it simply, atomic vectors only contain elements of the same data type. Atomic vectors are very common.\nVectors are foundational for other data structures in R, including data frames, and while we won’t go into detail about other data structures there are great resources online that do. We recommend the chapter Vectors from the online book Advanced R by Hadley Wickham.\n\n# atomic vector examples #\n# character vector\nchr_atomic_vector &lt;- c(\"hello\", \"good bye\", \"see you later\")\n# numeric vector\nnumeric_atomic_vector &lt;- c(5, 1.3, 10)\n# logical vector\nboolean_atomic_vector &lt;- c(TRUE, FALSE, TRUE)"
  },
  {
    "objectID": "session_03.html#r-functions",
    "href": "session_03.html#r-functions",
    "title": "3  Intro to R Programming",
    "section": "3.7 R Functions",
    "text": "3.7 R Functions\nSo far we’ve learned some of the basic syntax and concepts of R programming, and how to navigate RStudio, but we haven’t done any complicated or interesting programming processes yet. This is where functions come in!\nA function is a way to group a set of commands together to undertake a task in a reusable way. When a function is executed, it produces a return value. We often say that we are “calling” a function when it is executed. Functions can be user defined and saved to an object using the assignment operator, so you can write whatever functions you need, but R also has a mind-blowing collection of built-in functions ready to use. To start, we will be using some built in R functions.\nAll functions are called using the same syntax: function name with parentheses around what the function needs in order to do what it was built to do. These “needs” are pieces of information called arguments, and are required to return an expected value.\n\n\n\n\n\n\nSyntax of a function will look something like:\n\n\n\nresult_value &lt;- function_name(argument1 = value1, argument2 = value2, ...)\n\n\nBefore we use a function, let’s talk about Help pages."
  },
  {
    "objectID": "session_03.html#getting-help-using-help-pages",
    "href": "session_03.html#getting-help-using-help-pages",
    "title": "3  Intro to R Programming",
    "section": "3.8 Getting help using help pages",
    "text": "3.8 Getting help using help pages\nWhat if you know the name of the function that you want to use, but don’t know exactly how to use it? Thankfully RStudio provides an easy way to access the help documentation for functions.\nThe next function we’re about to use is the mean() function.\nTo access the help page for mean(), enter the following into your console:\n\n?mean\n\nThe Help pane will show up in the lower right hand corner of your RStudio.\nThe Help page is broken down into sections:\n\nDescription: An extended description of what the function does.\nUsage: The arguments of the function(s) and their default values.\nArguments: An explanation of the data each argument is expecting.\nDetails: Any important details to be aware of.\nValue: The data the function returns.\nSee Also: Any related functions you might find useful.\nExamples: Some examples for how to use the function.\n\nAnd there’s also help for when you only sort of remember the function name: double-question mark:\n\n??install \n\n\n\n\n\n\n\nNot all functions have (or require) arguments\n\n\n\nCheck out the documentation or Help page for date().\n\n?date()"
  },
  {
    "objectID": "session_03.html#examples-using-built-in-r-functions-mean-and-read.csv",
    "href": "session_03.html#examples-using-built-in-r-functions-mean-and-read.csv",
    "title": "3  Intro to R Programming",
    "section": "3.9 Examples using built-in R functions mean() and read.csv()",
    "text": "3.9 Examples using built-in R functions mean() and read.csv()\n\n3.9.1 Use the mean() function to run a more complex calculation\nLet’s override our weight object with some new values, and this time we’ll assign it three dog weights in pounds:\n\nweight_lb &lt;- c(55, 25, 12)\n\n\n\n\n\n\n\nExercise: Use the mean() function to calculate the mean weight.\n\n\n\nFrom the its Help page, we learned this function will take the mean of a set of numbers. Very convenient!\nWe also learned that mean() only has one argument we need to supply a value to (x). The rest of the arguments have default values.\n\n\n\n\nCode\nmean(x = weight_lb)\n\n\n[1] 30.66667\n\n\n\n\n\n\n\n\nExercise: Save the mean to an object called mean_weight_lb\n\n\n\nHint: What operator do we use to save values to an object?\n\n\n\n\nCode\n# saving the mean using the assignment operator `&lt;-`\nmean_weight_lb &lt;- mean(x = weight_lb)\n\n\n\n\n\n\n\n\nExercise: Update weight_lb\n\n\n\nLet’s say each of the dogs gained 5 pounds and we need to update our vector, so let’s change our object’s value by assigning it new values.\n\n\n\n\nCode\nweight_lb &lt;- c(60, 30, 17)\n\n\nCall mean_weight_lb in the console or take a look at your Global Environment. Is that the value you expected? Why or why not?\nIt wasn’t the value we expected because mean_weight_lb did not change. This demonstrates an important programming concept: Assigning a value to one object does not change the values of other objects.\nNow, that we understand why the object’s value hasn’t changed - how do we update the value of mean_weight_lb? How is an R Script useful for this?\nThis lead us to another important programming concept, specifically for R Scripts: An R Script runs top to bottom.\nThis order of operations is important because if you are running code line by line, the values in object may be unexpected. When you are done writing your code in an R Script, it’s good practice to clear your Global Environment and use the Run button and select “Run all” to test that your R Script successfully runs top to bottom.\n\n\n3.9.2 Use the read.csv() function to read a file into R\nSo far we have learned how to assign values to objects in R, and what a function is, but we haven’t quite put it all together yet with real data yet. To do this, we will introduce the function read.csv(), which will be in the first lines of many of your future scripts. It does exactly what it says, it reads in a csv file to R.\nSince this is our first time using this function, first access the help page for read.csv(). This has a lot of information in it, as this function has a lot of arguments, and the first one is especially important - we have to tell it what file to look for. Let’s get a file!\n\n\n\n\n\n\nDownload a file from the Arctic Data Center\n\n\n\n\nNavigate to this dataset by Craig Tweedie that is published on the Arctic Data Center. Craig Tweedie. 2009. North Pole Environmental Observatory Bottle Chemistry. Arctic Data Center. doi:10.18739/A25T3FZ8X.\nDownload the first csv file called BGchem2008data.csv by clicking the “download” button next to the file.\nMove this file from your Downloads folder into the data directory we created in our R Project training_{USERNAME}.\n\n\n\nNow we have to tell read.csv() how to find the file. We do this using the file argument which you can see in the usage section in the help page. In R, you can either use absolute paths (which will start with your home directory ~/) or paths relative to your current working directory. RStudio has some great auto-complete capabilities when using relative paths, so we will go that route.\nAssuming you have moved your file to a folder within training_{USERNAME} called data, and your working directory is your project directory (training_{USERNAME}) your read.csv() call will look like this:\n\n# reading in data using relative paths\nbg_chem_dat &lt;- read.csv(file = \"data/BGchem2008data.csv\")\n\nYou should now have an object of the class data.frame in your environment called bg_chem_dat. Check your environment pane to ensure this is true. Or you can check the class using the function class() in the console.\n\n\n\n\n\n\nOptional Arguments\n\n\n\nNotice that in the Help page there are many arguments that we didn’t use in the call above. Some of the arguments in function calls are optional, and some are required.\nOptional arguments will be shown in the usage section with a name = value pair, with the default value shown. If you do not specify a name = value pair for that argument in your function call, the function will assume the default value (example: header = TRUE for read.csv()).\nRequired arguments will only show the name of the argument, without a value. Note that the only required argument for read.csv() is file.\n\n\nYou can always specify arguments in name = value form. But if you do not, R attempts to resolve by position. So above, it is assumed that we want file = \"data/BGchem2008data.csv\", since file is the first argument.\nIf we explicitly called the file argument our code would like this:\n\nbg_chem_dat &lt;- read.csv(file = \"data/BGchem2008data.csv\")\n\nIf we wanted to add another argument, say stringsAsFactors, we need to specify it explicitly using the name = value pair, since the second argument is header.\nMany R users (including myself) will override the default stringsAsFactors argument using the following call:\n\n# relative file path\nbg_chem_dat &lt;- read.csv(\"data/BGchem2008data.csv\", \n                    stringsAsFactors = FALSE)\n# absolute file path\nbg_chem_dat &lt;- read.csv(\"Documents/arctic_training_files/data/BGchem2008data.csv\",\n                    stringsAsFactors = FALSE)\n\n\n\n\n\n\n\nQuick Tip\n\n\n\nFor functions that are used often, you’ll see many programmers will write code that does not explicitly call the first or second argument of a function."
  },
  {
    "objectID": "session_03.html#working-with-data-frames-in-r-using-the-subset-operator",
    "href": "session_03.html#working-with-data-frames-in-r-using-the-subset-operator",
    "title": "3  Intro to R Programming",
    "section": "3.10 Working with data frames in R using the Subset Operator $",
    "text": "3.10 Working with data frames in R using the Subset Operator $\nA data.frame is a two dimensional data structure in R that mimics spreadsheet behavior. It is a collection of rows and columns of data, where each column has a name and represents a variable, and each row represents an observation containing a measurement of that variable. When we ran read.csv(), the object bg_chem_dat that we created is a data.frame. There are many ways R and RStudio help you explore data frames. Here are a few, give them each a try:\n\nClick on the word bg_chem_dat in the environment pane\nClick on the arrow next to bg_chem_dat in the environment pane\nExecute head(bg_chem_dat) in the Console\nExecute View(bg_chem_dat) in the Console\n\nUsually we will want to run functions on individual columns in a data.frame. To call a specific column, we use the list subset operator $.\nSay you want to look at the first few rows of the Date column only:\n\nhead(bg_chem_dat$Date)\n\nYou can also use the subset operator $ calculations. For example, let’s calculated the mean temperature of all the CTD samples.\n\nmean(bg_chem_dat$CTD_Temperature)\n\nYou can also save this calculation to an object using the subset operator $.\n\nmean_temp &lt;- mean(bg_chem_dat$CTD_Temperature)"
  },
  {
    "objectID": "session_03.html#error-messages-are-your-friends",
    "href": "session_03.html#error-messages-are-your-friends",
    "title": "3  Intro to R Programming",
    "section": "3.11 Error messages are your friends",
    "text": "3.11 Error messages are your friends\nThere is an implicit contract with the computer/scripting language: Computer will do tedious computation for you. In return, you will be completely precise in your instructions. Typos matter. Case matters. Pay attention to how you type.\nRemember that this is a language, not dissimilar to English! There are times you aren’t understood – it’s going to happen. There are different ways this can happen. Sometimes you’ll get an error. This is like someone saying ‘What?’ or ‘Pardon’? Error messages can also be more useful, like when they say ‘I didn’t understand this specific part of what you said, I was expecting something else’. That is a great type of error message. Error messages are your friend. Google them (copy-and-paste!) to figure out what they mean. Note that knowing how to Google is a skill and takes practice - use our Masters of Environmental Data Science (MEDS) program workshop Teach Me How to Google as a guide.\n\n\n\n\n\n\n\n\n\n\n\n\nAnd also know that there are errors that can creep in more subtly, without an error message right away, when you are giving information that is understood, but not in the way you meant. Like if I’m telling a story about tables and you’re picturing where you eat breakfast and I’m talking about data. This can leave me thinking I’ve gotten something across that the listener (or R) interpreted very differently. And as I continue telling my story you get more and more confused… So write clean code and check your work as you go to minimize these circumstances!"
  },
  {
    "objectID": "session_03.html#r-packages",
    "href": "session_03.html#r-packages",
    "title": "3  Intro to R Programming",
    "section": "3.12 R Packages",
    "text": "3.12 R Packages\n\n\n\nArtwork by Allison Horst\n\n\nR packages are the building blocks of computational reproducibility in R. Each package contains a set of related functions that enable you to more easily do a task or set of tasks in R. There are thousands of community-maintained packages out there for just about every imaginable use of R - including many that you have probably never thought of!\nTo install a package, we use the syntax install.packages(\"packge_name\"). A package only needs to be installed once, so this code can be run directly in the console if needed. Generally, you don’t want to save your install package calls in a script, because when you run the script it will re-install the package, which you only need to do once, or if you need to update the package."
  },
  {
    "objectID": "session_03.html#r-resources",
    "href": "session_03.html#r-resources",
    "title": "3  Intro to R Programming",
    "section": "3.13 R Resources",
    "text": "3.13 R Resources\n\nAwesome R Resources to Check out\n\n\n\n\n\n\nLearning R Resources\n\nIntroduction to R lesson in Data Carpentry’s R for data analysis course\nJenny Bryan’s Stat 545 course materials\nJulie Lowndes’ Data Science Training for the Ocean Health Index\nLearn R in the console with swirl\nProgramming in R\nR, RStudio, RMarkdown\n\n\n\nCommunity Resources\n\nNCEAS’ EcoDataScience\nR-Ladies\nrOpenSci\nMinorities in R (MiR)\nTwitter - there is a lot here but some hashtags to start with are:\n\n#rstats\n#TidyTuesday\n#dataviz\n\n\n\n\nCheatsheets\n\nBase R Cheatsheet\nLaTeX Equation Formatting\nMATLAB/R Translation Cheatsheet"
  },
  {
    "objectID": "session_03.html#bonus-content",
    "href": "session_03.html#bonus-content",
    "title": "3  Intro to R Programming",
    "section": "3.14 Bonus Content",
    "text": "3.14 Bonus Content\n\n3.14.1 Clearing the environment\nTake a look at the objects in your Environment (Workspace) in the upper right pane. The Workspace is where user-defined objects accumulate. There are a few useful commands for getting information about your Environment, which make it easier for you to reference your objects when your Environment gets filled with many, many objects.\n\nYou can get a listing of these objects with a couple of different R functions:\n\nobjects()\n\n[1] \"boolean_atomic_vector\" \"chr_atomic_vector\"     \"has_annotations\"      \n[4] \"important_value\"       \"mean_weight_lb\"        \"numeric_atomic_vector\"\n[7] \"science_rocks\"         \"weight_kg\"             \"weight_lb\"            \n\nls()\n\n[1] \"boolean_atomic_vector\" \"chr_atomic_vector\"     \"has_annotations\"      \n[4] \"important_value\"       \"mean_weight_lb\"        \"numeric_atomic_vector\"\n[7] \"science_rocks\"         \"weight_kg\"             \"weight_lb\"            \n\n\nIf you want to remove the object named weight_kg, you can do this:\n\nrm(weight_kg)\n\nTo remove everything (or click the Broom icon in the Environment pane):\n\nrm(list = ls())\n\n\n\n\n\n\n\nQuick Tip\n\n\n\nIt’s good practice to clear your environment. Over time your Global Environmental will fill up with many objects, and this can result in unexpected errors or objects being overridden with unexpected values. Also it’s difficult to read / reference your environment when it’s cluttered!\n\n\n\n\n3.14.2 Logical operators and expressions\nWe can ask questions about an object using logical operators and expressions. Let’s ask some “questions” about the weight_lb object we made.\n\n== means ‘is equal to’\n!= means ‘is not equal to’\n&lt; means ‘is less than’\n&gt; means ‘is greater than’\n&lt;= means ‘is less than or equal to’\n&gt;= means ‘is greater than or equal to’\n\n\n# examples using logical operators and expressions\nweight_lb == 2\nweight_lb &gt;= 30\nweight_lb != 5"
  },
  {
    "objectID": "session_04.html#learning-objectives",
    "href": "session_04.html#learning-objectives",
    "title": "4  Data Management Essentials and the FAIR & CARE Principles",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nUnderstand the importance of data management for successfully preserving data\nReview the Data Life Cycle and how it can guide the data management in a project \nLearn about metadata guidelines and best practices for reproducibility\nBecome familiar with environmental data repositories for accessing and publishing data\nIntroduce FAIR and CARE principles and the value it provides to data\nEvaluate the FAIRness and CAREness of your work and the work of others"
  },
  {
    "objectID": "session_04.html#the-big-idea",
    "href": "session_04.html#the-big-idea",
    "title": "4  Data Management Essentials and the FAIR & CARE Principles",
    "section": "4.1 The Big Idea",
    "text": "4.1 The Big Idea\nThis lesson aims to get you thinking about how are you going to manage your data. And how to do it with the FAIR and CARE principles in mind. Even though you are in the early stages of defining you synthesis project, we believe that when it comes to data management, the earlier you start thinking about it the better. We also hope you can apply data management best practices and a FAIR and CARE lens to other research projects."
  },
  {
    "objectID": "session_04.html#introduction-to-data-management",
    "href": "session_04.html#introduction-to-data-management",
    "title": "4  Data Management Essentials and the FAIR & CARE Principles",
    "section": "4.2 Introduction to Data Management",
    "text": "4.2 Introduction to Data Management\nData management is the process of handling, organizing, documenting, and preserving data used in a research project. This is particularly important in synthesis science given the nature of synthesis, which involves combining data and information from multiple sources to answer broader questions, generate knowledge and provide insights into a particular problem or phenomenon.\n\n4.2.1 Benefits of managing your data\nSuccessfully managing your data throughout a research project helps ensures its preservation for future use. It also facilitates collaboration within your team, and it helps advance your scientific outcomes.\nFrom a researcher perspective\n\nKeep yourself organized – be able to find your files (data inputs, analytic scripts, outputs at various stages of the analytic process, etc.)\nTrack your science processes for reproducibility – be able to match up your outputs with exact inputs and transformations that produced them\nBetter control versions of data – easily identify versions that can be periodically purged\nQuality control your data more efficiently\nTo avoid data loss (e.g. making backups)\nFormat your data for re-use (by yourself or others)\nBe prepared to document your data for your own recollection, accountability, and re-use (by yourself or others)\nGain credibility and recognition for your science efforts through data sharing!\n\nAdvancement of science\n\nData is a valuable asset – it is expensive and time consuming to collect\nMaximize the effective use and value of data and information assets\nContinually improve the quality including: data accuracy, integrity, integration, timeliness of data capture and presentation, relevance, and usefulness\nEnsure appropriate use of data and information\nFacilitate data sharing\nEnsure sustainability and accessibility in long term for re-use in science"
  },
  {
    "objectID": "session_04.html#the-data-life-cycle",
    "href": "session_04.html#the-data-life-cycle",
    "title": "4  Data Management Essentials and the FAIR & CARE Principles",
    "section": "4.3 The Data Life Cycle",
    "text": "4.3 The Data Life Cycle\nThe Data Life Cycle gives you an overview of meaningful steps data goes through in a research project, from planning to archival. This step-by-step breakdown facilitates overseeing individual actions, operations and processes required at each stage. This is a visual tool that aims o help scientists plan and anticipate what will be the “data needs” for a specific project (Faundeen et al 2013) .\n\n\n\nSource: Adapted from Faundeen et al 2013, USGS & DataONE\n\n\n\n4.3.1 Primary Elements\n\n\n\n\n\n\n\n\nStep\nDescription\nTool\n\n\n\n\nPlan\nMap out the processes and resources for all activities related to the handling of the project’s data assets. Start with the project goals (desired outputs, outcomes, and impacts) and work backwards to build a data management plan, supporting data policies, and sustainability plans for each step.\nData Management Plan (DPM)\n\n\nAcquire & Discover\nActivities needed to collect new or existing data. You can structure the process of collecting data upfront to better implement data management. Consider data policies and best practices that maintain the provenance and integrity of the data.\nIdentifying data sources and mechanisms to access data\n\n\nProcess\nEvery step needed to prepare new or existing data to be able to use it as an input for synthesis. Consider the structure of the data, unit transformation, extrapolations, etc\nCleaning & Wrangling data skills\n\n\nIntegrate\nData from multiple sources are combined into a form that can be readily analyzed. Successful data integration depends on documentation of the integration process, clearly citing and making accessible the data you are using, and employing good data management practices throughout the Data Life Cycle.\nModeling & Interpretation\n\n\nAnalyze\nCreate analyses and visualizations to identify patterns, test hypotheses, and illustrate findings. During this process, record your methods, document data processing steps, and ensure your data are reproducible. Learn about these best practices and more.\nModeling, Interpretation & Statistics\n\n\nPreserve\nPlan on how you are going to store your data for long-term use and accessibility so others can access, interpret, and use the data in the future. Decide what data to preserve, where to preserve it, and what documentation needs to accompany the data.\nData packages & repositories\n\n\nPublish and Share\nPublication and distribution of your data through the web or in data catalogs, social media or other venues to increase the chances of your data being discovered. Data is a research product as publications are.\nDOIs and citations\n\n\n\n\n\n4.3.2 Cross-Cutting Elements\nThese elements are involved across all stages describes above. They need to constantly by addressed throughout all the Data Life Cycle, making sure effective data management is in place.\n\n\n\n\n\n\n\n\nStep\nDescription\nTool\n\n\n\n\nDescribe\nDocument data and each of the data stages by describing the why, who, what, when, where, and how of the data and processes. Metadata, or data about data, is key to data sharing and reuse. Documentation such as software code comments, data models, and workflows facilitate indexing, acquiring, understanding, and future uses of the data\nMetadata and documentation\n\n\nManage Quality\nEmploy quality assurance and quality control procedures that enhance the quality of data, making sure the measurements or outputs within expected values.Identify potential errors and techniques to address them.\nQuality Control and Quality Assurance techniques\n\n\nBackup and Secure\nPlan to preserve data in the short term to minimize potential losses (e.g., via software failure, human error, natural disaster). This avoids risk and ensures data is accessible to collaborators. This applies to raw and process data, original science plan, data management plan, data acquisition strategy, processing procedures, versioning, analysis methods, published products, and associated metadata\nServers, secure data sharing services\n\n\n\n\nAs you can see there is a lot happening around the Data Life Cycle. This is why PLANNING is a key first step. It is advisable to initiate your data management planning at the beginning of your research process before any data has been collected or discovered.\nIn order to better plan and keep track of all the moving pieces when working with data, a good place to start is creating a Data Management Plan. However, this is not only the starting point. This is a “living” document that should be consulted and updated throughout the project."
  },
  {
    "objectID": "session_04.html#metadata-best-practices",
    "href": "session_04.html#metadata-best-practices",
    "title": "4  Data Management Essentials and the FAIR & CARE Principles",
    "section": "4.4 Metadata Best Practices",
    "text": "4.4 Metadata Best Practices\nWithin the data life cycle you can be collecting data (creating new data) or integrating data that has all ready been collected. Either way, metadata plays plays a major role to successfully spin around the cycle because it enables data reuse long after the original collection.\nImagine that you’re writing your metadata for a typical researcher (who might even be you!) 30+ years from now - what will they need to understand what’s inside your data files?\nThe goal is to have enough information for the researcher to understand the data, interpret the data, and then reuse the data in another study.\nHere we walk you through detail guidelines to keep track of have a well documented data.\n\n4.4.1 Overall Guidelines\nAnother way to think about metadata is to answer the following questions with the documentation:\n\nWhat was measured?\nWho measured it?\nWhen was it measured?\nWhere was it measured?\nHow was it measured?\nHow is the data structured?\nWhy was the data collected?\nWho should get credit for this data (researcher AND funding agency)?\nHow can this data be reused (licensing)?\n\n\n\n4.4.2 Bibliographic Guidelines\nThe details that will help your data be cited correctly are:\n\nGlobal identifier like a digital object identifier (DOI)\nDescriptive title that includes information about the topic, the geographic location, the dates, and if applicable, the scale of the data\nDescriptive abstract that serves as a brief overview off the specific contents and purpose of the data package\nFunding information like the award number and the sponsor\nPeople and organizations like the creator of the dataset (i.e. who should be cited), the person to contact about the dataset (if different than the creator), and the contributors to the dataset\n\n\n\n4.4.3 Discovery Guidelines\nThe details that will help your data be discovered correctly are:\n\nGeospatial coverage of the data, including the field and laboratory sampling locations, place names and precise coordinates\nTemporal coverage of the data, including when the measurements were made and what time period (ie the calendar time or the geologic time) the measurements apply to\nTaxonomic coverage of the data, including what species were measured and what taxonomy standards and procedures were followed\nAny other contextual information as needed\n\n\n\n4.4.4 Interpretation Guidelines\nThe details that will help your data be interpreted correctly are:\n\nCollection methods for both field and laboratory data the full experimental and project design as well as how the data in the dataset fits into the overall project\nProcessing methods for both field and laboratory samples\nAll sample quality control procedures\nProvenance information to support your analysis and modelling methods\nInformation about the hardware and software used to process your data, including the make, model, and version\nComputing quality control procedures like testing or code review\n\n\n\n4.4.5 Data Structure and Contents\n\nEverything needs a description: the data model, the data objects (like tables, images, matrices, spatial layers, etc), and the variables all need to be described so that there is no room for misinterpretation.\nVariable information includes the definition of a variable, a standardized unit of measurement, definitions of any coded values (i.e. 0 = not collected), and any missing values (i.e. 999 = NA).\n\nNot only is this information helpful to you and any other researcher in the future using your data, but it is also helpful to search engines. The semantics of your dataset are crucial to ensure your data is both discoverable by others and interoperable (that is, reusable).\nFor example, if you were to search for the character string “carbon dioxide flux” in a data repository, not all relevant results will be shown due to varying vocabulary conventions (i.e., “CO2 flux” instead of “carbon dioxide flux”) across disciplines — only datasets containing the exact words “carbon dioxide flux” are returned. With correct semantic annotation of the variables, your dataset that includes information about carbon dioxide flux but that calls it CO2 flux WOULD be included in that search.\n\n\n4.4.6 Rights and Attribution\nCorrectly assigning a way for your datasets to be cited and reused is the last piece of a complete metadata document. This section sets the scientific rights and expectations for the future on your data, like:\n\nCitation format to be used when giving credit for the data\nAttribution expectations for the dataset\nReuse rights, which describe who may use the data and for what purpose\nRedistribution rights, which describe who may copy and redistribute the metadata and the data\nLegal terms and conditions like how the data are licensed for reuse.\n\n\n\n4.4.7 Metadata Standards\nSo, how does a computer organize all this information? There are a number of metadata standards that make your metadata machine readable and therefore easier for data curators to publish your data.\n\nEcological Metadata Language (EML)\nGeospatial Metadata Standards (ISO 19115 and ISO 19139)\n\nSee NOAA’s ISO Workbook\n\nBiological Data Profile (BDP)\nDublin Core\nDarwin Core\nPREservation Metadata: Implementation Strategies (PREMIS)\nMetadata Encoding Transmission Standard (METS)\n\nNote this is not an exhaustive list.\n\n\n4.4.8 Data Identifiers\nMany journals require a DOI (a digital object identifier) be assigned to the published data before the paper can be accepted for publication. The reason for that is so that the data can easily be found and easily linked to.\nSome data repositories assign a DOI for each dataset you publish on their repository. But, if you need to update the datasets, check the policy of the data repository. Some repositories assign a new DOI after you update the dataset. If this is the case, researchers should cite the exact version of the dataset that they used in their analysis, even if there is a newer version of the dataset available.\n\n\n4.4.9 Data Citation\nResearchers should get in the habit of citing the data that they use (even if it’s their own data!) in each publication that uses that data.\n\n\n4.4.10 Metadata tools (EML)\n\nExcel-to EML by Li Kui is a workflow that provides a spreadsheet template to collect metadata based on the Ecological Metadata Language Schema (EML)\nThe Environmental Data Repository (EDI) provides a tool called ezEML. A form-based web application that helps streamline the process of creating EML metadata."
  },
  {
    "objectID": "session_04.html#data-preservation-sharing",
    "href": "session_04.html#data-preservation-sharing",
    "title": "4  Data Management Essentials and the FAIR & CARE Principles",
    "section": "4.5 Data Preservation & Sharing",
    "text": "4.5 Data Preservation & Sharing\n\n\n4.5.1 Data Packages\n\nWe define a data package as a scientifically useful collection of data and metadata that a researcher wants to preserve.\n\nSometimes a data package represents all of the data from a particular experiment, while at other times it might be all of the data from a grant, or on a topic, or associated with a paper. Whatever the extent, we define a data package as having one or more data files, software files, and other scientific products such as graphs and images, all tied together with a descriptive metadata document.\nMany data repositories assign a unique identifier to every version of every data file, similarly to how it works with source code commits in GitHub. Those identifiers usually take one of two forms. A DOI identifier, often assigned to the metadata and becomes a publicly citable identifier for the package. Each of the other files gets a global identifier, often a UUID that is globally unique. This allows to identify a digital entity within a data package.\nIn the graphic to the side, the package can be cited with the DOI doi:10.5063/F1Z1899CZ,and each of the individual files have their own identifiers as well.\n\n\n\n4.5.2 Data Repositories: Built for Data (and code)\n\nGitHub is not an archival location\nExamples of dedicated data repositories:\n\nKNB\nArctic Data Center\ntDAR\nEDI\nZenodo\n\nDedicated data repositories are:\n\nRich in metadata\nArchival in their mission\nCertified\n\nData papers, e.g., Scientific Data\nre3data is a global registry of research data repositories\nRepository Finder is a pilot project and tool to help researchers find an appropriate repository for their work\n\n\n4.5.2.1 DataOne Federation\nDataONE is a federation of dozens of data repositories that work together to make their systems interoperable and to provide a single unified search system that spans the repositories. DataONE aims to make it simpler for researchers to publish data to one of its member repositories, and then to discover and download that data for reuse in synthetic analyses.\nDataONE can be searched on the web, which effectively allows a single search to find data from the dozens of members of DataONE, rather than visiting each of the (currently 44!) repositories one at a time."
  },
  {
    "objectID": "session_04.html#data-management-summary",
    "href": "session_04.html#data-management-summary",
    "title": "4  Data Management Essentials and the FAIR & CARE Principles",
    "section": "4.6 Data Management Summary",
    "text": "4.6 Data Management Summary\n\nThe Data Life Cycle help us see the big picture of our data project.\nIt is extremely helpful to develop a data management plan describing each step of the data life cycle to stay organized.\nDocument everything. Having rich metadata is a key factor to enable data reuse. Describe your data and files and use an appropriate metadata standard.\nIdentify software and tools that will help you and your team organize and document the project’s data life cycle.\nPublish your data in a stable long live repository and assign a unique identifier.\n\n\nNow that we have talked about the big picture of data management, it is time to focus on the FAIR & CARE principles. It is important to learn about these principles and apply them since the very beginning of your planning process. This will make it easier to include and maintain tidy and ethical principles throughout the entire project."
  },
  {
    "objectID": "session_04.html#the-fair-and-care-principles",
    "href": "session_04.html#the-fair-and-care-principles",
    "title": "4  Data Management Essentials and the FAIR & CARE Principles",
    "section": "4.7 The FAIR and CARE Principles",
    "text": "4.7 The FAIR and CARE Principles\n\n\n\nSource: Global Indigenous Data Alliance\n\n\nThe idea behind these principles is to increase access and usage of complex and large datasets for innovation, discovery, and decision-making. This means making data available to machines, researchers, Indigenous communities, policy makers, and more.\nWith the need to improve the infrastructure supporting the reuse of data, a group of diverse stakeholders from academia, funding agencies, publishers and industry came together to jointly endorse measurable guidelines that enhance the reusability of data (Wilkinson et al. (2016)). These guidelines became what we now know as the FAIR Data Principles.\nFollowing the discussion about FAIR and incorporating activities and feedback from the Indigenous Data Sovereignty network, the Global Indigenous Data Alliance developed the CARE principles (Carroll et al. (2021)). The CARE principles for Indigenous Data Governance complement the more data-centric approach of the FAIR principles, introducing social responsibility to open data management practices.\nTogether, these two principle encourage us to push open and other data movements to consider both people and purpose in their advocacy and pursuits. The goal is that researchers, stewards, and any users of data will be FAIR and CARE (Carroll et al. (2020)).\n\n4.7.1 What is FAIR?\nWith the rise of open science and more accessible data, it is becoming increasingly important to address accessibility and openness in multiple ways. The FAIR principles focuses on how to prepare your data so that it can be reused by others (versus just open access of research outputs). In 2016, the data stewardship community published principles surrounding best practices for open data management, including FAIR. FAIR stands for Findable, Accessible, Interoperable, and Reproducible. It is best to think about FAIR as a set of comprehensive standards for you to use while curating your data. And each principle of FAIR can be translated into a set of actions you can take during the entire lifecycle of research data management.\n\n\n\nSource: Fair Teaching Handbook\n\n\n\n\n\n\n\n\n\nFAIR\nDefinition\n\n\n\n\n(F) Findable\nMetadata and data should be easy to find for both humans and computers.\n\n\n(A) Accessible\nOnce someone finds the required data, they need to know how the data can be accessed.\n\n\n(I) Interoperable\nThe data needs to be easily integrated with other data for analysis, storage, and processing.\n\n\n(R) Reusable\nData should be well-described so they can be reused and replicated in different settings.\n\n\n\n\n\n4.7.2 FAIR Principles in Practice\nThis is not an exhaustive list of actions for applying FAIR Principles to your research, but these are important big picture concepts you should always keep in mind. We’ll be going through the resources linked below so that you know how to use them in your own work.\n\nIt’s all about the metadata. To make your data and research as findable and as accessible as possible, it’s crucial that you are providing rich metadata. This includes, using a field-specific metadata standard (i.e. EML or Ecological Metadata Language for earth and environmental sciences), adding a globally unique identifier (i.e. a Digital Object Identifier) to your datasets, and more. As discussed earlier, quality metadata goes a long way in making your data FAIR. One tool to help implement FAIR principles to non-FAIR data is the FAIRification process. This workflow was developed by GoFAIR, a self-governed initiative that aims to help implement the FAIR data principles.\nAssess the FAIRness of your research. The FAIR Principles are a lens to apply to your work. And it’s important to ask yourself questions about finding and accessing your data, about how machine-readable your datasets and metadata are, and how reusable it is throughout the entirety of your project. This means you should be re-evaluating the FAIRness of your work over and over again. One way to check the FAIRness of your work, is to use tools like FAIR-Aware and the FAIR Data Maturity Model. These tools are self-assessments and can be thought of as a checklists for FAIR and will provide guidance if you’re missing anything.\nMake FAIR decisions during the planning process. You can ensure FAIR Principles are going to implemented in your work by thinking about it and making FAIR decisions early on and throughout the data life cycle. As you document your data always keep in mind the FAIR lense.\n\n\n\n4.7.3 What is CARE?\nThe CARE Principles for Indigenous Data Governance were developed by the International Indigenous Data Sovereignty Interest Group in consultation with Indigenous Peoples, scholars, non-profit organizations, and governments (Carroll et al. (2020)). They address concerns related to the people and purpose of data. It advocates for greater Indigenous control and oversight in order to share data on Indigenous Peoples’ terms. These principles are people and purpose-oriented, reflecting the crucial role data have in advancing Indigenous innovation and self-determination. CARE stands for Collective benefits, Authority control, Responsibility and Ethics. It details that the use of Indigenous data should result in tangible benefits for Indigenous collectives through inclusive development and innovation, improved governance and citizen engagement, and result in equitable outcomes.\n\n\n\nSource: Carroll, S.R., et al, 2020. The CARE Principles for Indigenous Data Governance\n\n\n\n\n\n\n\n\n\nCARE\nDefinition\n\n\n\n\n(C) Collective Benefit\nData ecosystems shall be designed and function in ways that enable Indigenous Peoples to derive benefit from the data.\n\n\n(A) Authority to Control\nIndigenous Peoples’ rights and interests in Indigenous data must be recognized and their authority to control such data be empowered. Indigenous data governance enables Indigenous Peoples and governing bodies to determine how Indigenous Peoples, as well as Indigenous lands, territories, resources, knowledge and geographical indicators, are represented and identified within data.\n\n\n(R) Responsibility\nThose working with Indigenous data have a responsibility to share how those data are used to support Indigenous Peoples’ self-determination and collective benefit. Accountability requires meaningful and openly available evidence of these efforts and the benefits accruing to Indigenous Peoples.\n\n\n(E) Ethics\nIndigenous Peoples’ rights and well being should be the primary concern at all stages of the data life cycle and across the data ecosystem.\n\n\n\n\n\n4.7.4 CARE Principles in Practice\n\nMake your data access to Indigenous groups. Much of the CARE Principles are about sharing and making data accessible to Indigenous Peoples. To do so, consider publish your data on Indigenous founded data repositories such as:\n\nCollaborative Indigenous Research Digital Garden (CIRDG)\nMukurtu Wumpurrarni-kari Archive\n\nUse Traditional Knowledge (TK) and Biocultural (BC) Labels How do we think of intellectual property for Traditional and Biocultural Knowledge? Knowledge that outdates any intellectual property system. In many cases institution, organizations, outsiders hold the copy rights of this knowledge and data that comes from their lands, territories, waters and traditions. Traditional Knowledge and Biocultural Labels are digital tags that establish Indigenous cultural authority and governance over Indigenous data and collections by adding provenance information and contextual metadata (including community names), protocols, and permissions for access, use, and circulation. This way mark cultural authority so is recorded in a way that recognizes the inherent sovereignty that Indigenous communities have over knowledge. Giving Indigenous groups more control over their cultural material and guide users what an appropriate behavior looks like. A global initiative that support Indigenous communities with tools that attribute their cultural heritage is Local Contexts.\nAssess the CAREness of your research. Like FAIR, CARE Principles are a lens to apply to your work. With CARE, it’s important to center human well-being in addition to open science and data sharing. To do this, reflect on how you’re giving access to Indigenous groups, on who your data impacts and the relationships you have with them, and the ethical concerns in your work. The Arctic Data Center, a data repository for Arctic research, now requires an Ethical Research Practices Statement when submitting data to them. They also have multiple guidelines on how to write and what to include in an Ethical Research Practices Statement."
  },
  {
    "objectID": "session_04.html#exercise-evaluate-a-data-package-on-the-edi-repository",
    "href": "session_04.html#exercise-evaluate-a-data-package-on-the-edi-repository",
    "title": "4  Data Management Essentials and the FAIR & CARE Principles",
    "section": "4.8 Exercise: Evaluate a Data Package on the EDI Repository",
    "text": "4.8 Exercise: Evaluate a Data Package on the EDI Repository\nExplore data packages published on EDI assess the quality of their metadata. Imagine you’re a data curator!\n\n\n\n\n\n\nSetup\n\n\n\n\nBreak into groups and use the following data packages:\n\nGroup A: EDI Data Portal SBC LTER: Reef: Abundance, size and fishing effort for California Spiny Lobster (Panulirus interruptus), ongoing since 2012\nGroup B: EDI Data Portal Physiological stress of American pika (Ochotona princeps) and associated habitat characteristics for Niwot Ridge, 2018 - 2019\nGroup C: EDI Data Portal Ecological and social interactions in urban parks: bird surveys in local parks in the central Arizona-Phoenix metropolitan area\n\n\n\n\nYou and your group will evaluate a data package for its: (1) metadata quality, (2) data documentation quality for reproducibility, and (3) FAIRness and CAREness.\n\n\n\n\n\n\nExercise: Evaluate a data package on EDI Data Portal\n\n\n\n\nView our Data Package Assessment Rubric and make a copy of it to:\n\nInvestigate the metadata in the provided data\n\nDoes the metadata meet the standards we talked about? How so?\nIf not, how would you improve the metadata based on the standards we talked about?\n\nInvestigate the overall data documentation in the data package\n\nIs the documentation sufficient enough for reproducibility? Why or why not?\nIf not, how would you improve the data documentation? What’s missing?\n\nIdentify elements of FAIR and CARE\n\nIs it clear that the data package used a FAIR and CARE lens?\nIf not, what documentation or considerations would you add?\n\n\nElect someone to share back to the group the following:\n\nHow easy or challenging was it to find the metadata and other data documentation you were evaluating? Why or why not?\nWhat documentation stood out to you? What did you like or not like about it?\nHow well did these data packages uphold FAIR and CARE Principles?\nDo you feel like you understand the research project enough to use the data yourself (aka reproducibility?\n\n\nIf you and your group finish early, check out more datasets in the bonus question."
  },
  {
    "objectID": "session_04.html#bonus-investigate-metadata-and-data-documentation-in-other-data-repositories",
    "href": "session_04.html#bonus-investigate-metadata-and-data-documentation-in-other-data-repositories",
    "title": "4  Data Management Essentials and the FAIR & CARE Principles",
    "section": "4.9 Bonus: Investigate metadata and data documentation in other Data Repositories",
    "text": "4.9 Bonus: Investigate metadata and data documentation in other Data Repositories\nNot all environmental data repositories document and publish datasets and data packages in the same way. Nor do they have the same submission requirements. It’s helpful to become familiar with metadata and data documentation jargon so it’s easier to identify the information you’re looking for. It’s also helpful for when you’re nearing the end of your project and are getting ready to publish your datasets.\nEvaluate the following data packages at these data repositories:\n\nKNB Arthropod pitfall trap biomass captured (weekly) and pitfall biomass model predictions (daily) near Toolik Field Station, Alaska, summers 2012-2016\nDataOne USDA-NOAA NWS Daily Climatological Data\nArctic Data Center Landscape evolution and adapting to change in ice-rich permafrost systems 2021-2022\n\nHow different are these data repositories from the EDI Data Portal? Would you consider publishing you data at one or multiple of these repositories?"
  },
  {
    "objectID": "session_04.html#references",
    "href": "session_04.html#references",
    "title": "4  Data Management Essentials and the FAIR & CARE Principles",
    "section": "References",
    "text": "References\n\n\n\n\nCarroll, Stephanie Russo, Ibrahim Garba, Oscar L. Figueroa-Rodríguez, Jarita Holbrook, Raymond Lovett, Simeon Materechera, Mark Parsons, et al. 2020. “The CARE Principles for Indigenous Data Governance.” Data Science Journal 19 (1): 43. https://doi.org/10.5334/dsj-2020-043.\n\n\nCarroll, Stephanie Russo, Edit Herczog, Maui Hudson, Keith Russell, and Shelley Stall. 2021. “Operationalizing the CARE and FAIR Principles for Indigenous Data Futures.” Scientific Data 8 (1): 108. https://doi.org/10.1038/s41597-021-00892-0.\n\n\nWilkinson, Mark D., Michel Dumontier, IJsbrand Jan Aalbersberg, Gabrielle Appleton, Myles Axton, Arie Baak, Niklas Blomberg, et al. 2016. “The FAIR Guiding Principles for Scientific Data Management and Stewardship.” Scientific Data 3 (1): 160018. https://doi.org/10.1038/sdata.2016.18."
  },
  {
    "objectID": "session_05.html#learning-objectives",
    "href": "session_05.html#learning-objectives",
    "title": "5  Writing Data Management Plans",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nUnderstand the applications and importance of data management plans (DMPs).\nIdentify and describe the core components of a DMP while gaining proficiency in crafting them following best open and reproducible science practices.\nBecome familiar with the DMPTool and its functionalities to streamline the creation of DMPs."
  },
  {
    "objectID": "session_05.html#data-life-cycle",
    "href": "session_05.html#data-life-cycle",
    "title": "5  Writing Data Management Plans",
    "section": "5.1 Data Life Cycle",
    "text": "5.1 Data Life Cycle\nThink of data as having a life cycle. Often, it’s tempting to skip the planning phase and dive straight into data collection, making decisions as you go along. However, careful planning will ultimately save you time in the long run and ensure a smoother process. It is during the planning stage that you will map out the processes and identify the required and available resources to support your research.\nThe Data Life Cycle is a tool for facilitating successful management and preservation of data throughout a research project. Multiple versions of the data life cycle exist and vary in practice across domains or communities. For example, a meta-analysis project may only focus on the Discover, Integrate, and Analyze phases of the cycle.\n\n\n\n\n\nSource: DataOne\n\n\nDataOne’s Data Management Skillbuilding Hub offers several best practices on how to effectively work with your data throughout all stages of the data life cycle.\nA way to use the Data Life Cycle in practice is to:\n\nThink about the end goal, outcomes, and products of your project\nThink and decide steps in the Data Life Cycle you need to include in your project\nReview best practices for that step in the cycle and start outlining action items in each of those steps\n\nThe ultimate goal of this lesson is to provide you with a framework for crafting data management plans (DMPs) that consider data within a life cycle, are compliant with FAIR and CARE principles, and follow best practices for reproducible and open science."
  },
  {
    "objectID": "session_05.html#data-management-plans",
    "href": "session_05.html#data-management-plans",
    "title": "5  Writing Data Management Plans",
    "section": "5.2 Data Management Plans",
    "text": "5.2 Data Management Plans\nA Data Management Plan is a document that describes how you will obtain and use your data during a research project, as well as what you will do with your data long after the project ends. Think of it as a formal and concise document that articulates how data will be handled during and after you complete your research. Often a DMP encompasses all phases of the Data Life Cycle - from planning, to collecting, to analyzing and ultimately to preservation and storage of the data.\nMost funding agencies require researchers to submit a DMP along with their research proposals outlining how scientific data from their research will be managed and shared. While compliance is key for those seeking grants, we like to think of DMPs as a tool that applies to any research project, because a well-thought-out plan means you are more likely to:\n\nstay organized\nwork more efficiently with your team and set specific responsibilities\ntruly share and safeguard data, while increasing your research impact\nprevent unauthorized use or the breach of sensitive information, when applicable\nengage your team\navoid potential issues related to data and code licensing\nbetter budget for storage, preservation and long-term archiving of the data\n\nA DMP is both a straightforward blueprint for how you manage your data, and provides guidelines for your and your team on policies, access, roles, etc. It is both an accountability and productivity tool that helps you anticipate the required resources, explore available alternatives and identify available support and personnel to help you achieve your research goals, while conforming with reproducible standards and open science principles.\nWhile it is important to plan, it is equally important to recognize that no plan is perfect as change is inevitable. To make your DMP as robust as possible, treat it as a “living document” that you periodically review with your team and adjust as the needs of the project change. We will recap this later in the lesson.\n\n5.2.1 How to Plan?\n\nPlan early: research shows that over time, information is lost and this is inevitable so it’s important to think about long-term plans for your research at the beginning before you’re deep in your project. And ultimately, you’ll save more time.\nPlan in collaboration: high engagement of your team and stakeholders is not only a benefit to your project, but it also makes your DMP more resilient. When you include diverse expertise and perspectives to the planning stages, you’re more likely to overcome obstacles in the future.\nUtilize existing resources: don’t reinvent the wheel! There are many great DMP resources out there. Consider the article Ten Simple Rules for Creating a Good Data Management Plan (Michener 2015), which has succinct guidelines on what to include in a DMP. Or use an online tool like DMPTool, as we will see in a bit, which provides official DMP templates from funders like NSF, example answers, and allows for collaboration.\nMake revising part of the process: Don’t let your DMP collect dust. Make revising the DMP part of your research project and use it as a guide to ensure you’re keeping on track.\nInclude FAIR and CARE principles: Think of the resources we discussed in the previous lesson. When you include FAIR and CARE in the planning process of your DMP, it will make it easier to include and maintain throughout the entire project. Operationalize these acronyms in your answers and incorporate the terminology (and their underlying meaning) into your workflow.\n\n\n\n5.2.2 What to include in a DMP?\nMost funding agencies require a DMP as part of an application for funding, but the specific requirements differ across and even within agencies depending on the discipline/division and program. If you are writing a data management plan as part of a solicitation proposal, the funding agency will have guidelines for the information they want to be provided in the plan. Always check which template applies to the specific call you are submitting your proposal and use the most updated version available. You may also consult SPARC Open Data and the DMPTool for a list of federal mandates and funder policy documents, including specific guidelines and templates.\nAfter you have identified which template or specific guidelines you should follow, ask yourself:\n\nDo you thoroughly understand all the requirements? Or do you need any clarification before you start?\nIs there a page-limit to what you can submit in your proposal? Would it beneficial to have an appendix or a longer version of your DMP for internal use (and not for submission)?\n\nThese plans are typically two pages long and are reviewed as an integral part of the proposal. They are considered under intellectual merit, broader impacts, or both, depending on the relevant scientific community.\n\n5.2.2.1 Structure of a DMP\nA good plan should include information about the study design, the data to be collected, metadata, policies for data access, sharing, and reuse, as well as long-term archival and preservation. To make this lesson more tangible, we will use the NSF (National Science Foundation) generic template as a framework to understand comprehensively what a data management plan encompasses from start to finish.\n\n5.2.2.1.1 NSF Generic Template\nWe will be using the generic template from the National Science Foundation (NSF), which is recommended when there is no specific guidance available and can be more easily adapted to specific requirements later if needed. The NSF Generic Template is comprised of five main sections:\n\nTypes of data, samples, physical collections, software, curriculum materials, and other materials to be produced in the course of the project;\nStandards to be used for data and metadata format and content (where existing standards are absent or deemed inadequate, this should be documented along with any proposed solutions or remedies);\nPolicies for access and sharing including provisions for appropriate protection of privacy, confidentiality, security, intellectual property, or other rights or requirements;\nPolicies and provisions for re-use, re-distribution, and the production of derivatives; and\nPlans for archiving data, samples, and other research products, and for preservation of access to them.We will delve into each of these sections and provide practical insights to address them shortly.\n\nBefore we delve into that, let’s first understand how you can use the DMPTool to streamline and simplify the DMP writing process."
  },
  {
    "objectID": "session_05.html#dmptool---part-i",
    "href": "session_05.html#dmptool---part-i",
    "title": "5  Writing Data Management Plans",
    "section": "5.3 DMPTool - Part I",
    "text": "5.3 DMPTool - Part I\n\n5.3.1 Selecting and Using a Template\nFortunately, you do not need to create a DMP from scratch or using a text processor. There is a great tool available to assist you in crafting your DMP, which provides web-based templates (based on funder requirements) that enable you to input the data management plan for your project: the DMPTool (https://dmptool.org). When you’re ready, you can download the DMP in your preferred format. It is free, but you need to sign in using your institutional address for Single Sign-on (SSO).\n\n\n\n\nDPMTool - SSO sign in\n\n\n\nChoose “Funder Requirements” and search for the NSF. You will see many templates available, but let’s choose NSF-GEN, the generic one. Once you select it, you will be granted with more detailed information about the guidelines and templates and will be offered the option to create a plan clicking on the plus sign.\n\n\n\n\nDMPTool - Funder Templates\n\n\n\nNext, you’ll be prompted to provide the project details. No need to worry about it at this moment; you can always come back to edit them later. Alternatively, you may click on create a plan and then select the funding organization and the specific template you would like to use from the drop-down menu."
  },
  {
    "objectID": "session_05.html#writing-the-plan",
    "href": "session_05.html#writing-the-plan",
    "title": "5  Writing Data Management Plans",
    "section": "5.4 Writing the Plan",
    "text": "5.4 Writing the Plan\nClick on the tab “Write Plan” and expand all sections. Note that in the right hand side contains comments and guidance to support the writing process. Comments can be added by collaborators and reviewers when you request feedback (we will cover these later). The guidance tab contains links and recommendations to help you answer each section. These may be from the funding agency, the DMPTool or the university-specific.\n\n\n\n\nDMPTool - Comments and Guidance Feature\n\n\n\nNow, let’s explore each section of the plan based on the chosen template.\n\n5.4.1 Types of Data Produced\nEvery component of the DMP depends upon knowing how much and what types of data will be collected. Volume matters, as it normally costs more to manage 10 terabytes of data than 10 megabytes of data, both in terms of infrastructure and personnel. But other data attributes also affect costs, metadata, quality assurance, and preservation strategies, and even data policies. A good plan will include information that is sufficient to understand the nature of the data that is produced over the course of the research, including:\n\nTypes: A good first step is to list the various data types you expect to collect, compile or create. This may include text, spreadsheets, software and algorithms, models, images and movies, audio files, and patient records. Many research sponsors define data broadly, including physical collections, software and code, and curriculum materials.\nSources: Data may come from direct human observation, laboratory and field instruments, experiments, simulations, and compilations of data from other studies. Reviewers and sponsors may be particularly interested in understanding if data are proprietary, are being compiled from other studies, pertain to human subjects, or are otherwise subject to restrictions in their use or redistribution. When using existing third-party data sources to generate new data, make sure to indicate their provenance, methods for gaining access, and any limitations and license restrictions that may apply.\nVolume: Outline the total volume of data and the total number of files expected to be collected can affect all other data management activities (storage, backup, access, preservation, etc.) Giving the hosting institution a heads-up about the anticipated infrastructure to manage large volumes of data is important. Note what volume of data you will create in MB/GB/TB. Indicate the proportions of raw data, processed data, and other secondary outputs (e.g., reports). Consider the implications of data volumes regarding storage, access, and preservation. Do you need to include additional costs to the budget? Consider whether the scale of the data will pose challenges when sharing or transferring data between sites; if so, how do you plan to address these challenges?\n\n\n\n5.4.2 Data & Metadata Standards\n\n5.4.2.1 Data formats\nTechnology changes and proprietary formats may soon become obsolete. When selecting data standards give preference to open standards which are more widely adopted and preferred by the scientific community (e.g., Comma Separated Values [CSV] over Excel [.xls, xlsx]). Also, data are more likely to be accessible for the long term if they are uncompressed, unencrypted, and stored using standard character encoding such as UTF-16.\nExplain why you have chosen certain formats. Decisions may be based on staff expertise, a preference for open formats, the standards accepted by data centers, or widespread usage within a given community. Using standardized, interchangeable, or open formats ensures the long-term usability of data; these are recommended for sharing and archiving. When limited by proprietary software to generate and/or process data, consider converting them to open formats before sharing. Also consider indicating non-proprietary options that could read the data (e.g., GNU Octave to read MATLAB files).\n\n\n5.4.2.2 Metadata\nRows and columns of numbers and characters have little to no meaning unless they are documented in some fashion. Metadata—the details about what, where, when, why, and how the data were collected, processed, and interpreted—provide the information that enables data and files to be discovered, used, and properly cited. Metadata (data about data) is an important part of the Data Life Cycle because it enables data reuse long after the original collection. Imagine that you’re writing your metadata for a typical researcher (who might even be you!) 30+ years from now - what will they need to understand what’s inside your data files? We often refer to metadata “as a love note to your future self”, which you and potential reusers will greatly appreciate.\nThe goal is to have enough information for the researcher to understand the data, interpret the data, and then reuse the data. Another way to think about metadata is to answer the following questions with the documentation:\n\nWhat was measured?\nWho measured it?\nWhen was it measured?\nWhere was it measured?\nHow was it measured?\nHow is the data structured?\nWhy was the data collected?\nWho should get credit for this data (researcher AND funding agency)?\nHow can this data be reused (licensing)?\n\nYour DMP won’t be extensive enough to provide such information in detail. Instead, briefly describe how you plan to capture and record metadata, as well as which documentation you intend to produce to enable the future reuse of the data. More importantly, indicate which metadata standard you plan to adopt.\n\n\n5.4.2.3 Metadata Standards\nA metadata standard serves as a specialized manual for your metadata which specifies a common structure and language for describing and managing data or information. It organizes metadata components into collections tailored for particular objectives, assigning them consistent names and definitions, so it can be more easily interpreted by a community and by machines (which represents the “I” interoperability, for the FAIR principles).\nAdditionally, a metadata standard may incorporate guidelines regarding obligatory content, required syntax, and the use of a regulated vocabulary. Some examples relevant to the Environmental Sciences are:\n\nEcological Metadata Language (EML)\nGeospatial Metadata Standards (ISO 19115 and ISO 19139)\n\nSee NOAA’s ISO Workbook\n\nBiological Data Profile (BDP)\nDublin Core\nDarwin Core\nPREservation Metadata: Implementation Strategies (PREMIS)\nMetadata Encoding Transmission Standard (METS)\n\nNote this is not an exhaustive list. A more comprehensive inventory of metadata standards can be found at: https://rdamsc.bath.ac.uk\nBefore selecting a metadata standard we suggest you ask the following questions:\n\nIs there a particular standard baked into the system or repository you plan to share your data?\nWhat standards are similar projects and others in your field using?\nHow big is the user community around this metadata standard?\n\nWhen in doubt, consult with the campus Library on available options.\n\n\n\n5.4.3 Policies for Data Access & Sharing\nIn this section your DMP should focus on the description of any access and sharing restrictions that may apply to your data. Funders are aware of potential limitations to make all data publicly available, but expect researchers to explicitly acknowledge any anticipated restrictions followed by a compelling justification.\nConsider ethical issues when dealing with human subjects data or sensitive data of any kind (e.g., endangered species and protected lands). Address plans to anonymize the data and protect privacy and confidentiality while trying to maximize data sharing whenever possible. Do not limit your response to a shallow statement that data will be made available upon request!\nWhen writing your response consider crafting a paragraph or two that incorporates the following topics:\n\nAccess Control:\n\nWill your data be open access, restricted access, or controlled by specific permissions?\nExplain how you will control access to the data and specify who will be responsible for managing access controls and permissions.\n\nData Sharing Mechanisms:\n\nProvide information about any third-party services or repositories you plan to use. This could include services you plan to use during the project for exchanging files, save versions of your data and code with your team (e.g., Box, GitHub). You may also indicate when and where do you plan to share the data once your project is completed, and provide more details in the [Plans for Archiving & Preservation].\n\nEmbargo Periods:\n\nAn embargo is a set time frame when specific data is restricted from public access or sharing, typically limited to those directly involved in the research or with special permissions. If applicable, state whether there will be any embargo periods during which the data will not be accessible or shared. Explain the reasons for these embargoes and their expected duration.\n\nData Access Requests:\n\nOutline the process for requesting access to the data. Include information on who can request access, how they should submit requests, and the expected response time.\n\nData Sharing Agreements:\n\nIf required, mention any formal data sharing agreements or contracts that researchers or collaborators must adhere to when accessing or using the data.\n\nEthical and Legal Considerations:\n\nAddress ethical and legal considerations related to data sharing. Explain how you will handle sensitive or confidential data and ensure compliance with privacy regulations.\n\n\n\n\n\n\nWhat if no restrictions apply?\n\n\n\nIf no restrictions apply, you can openly declare your intention to make all data publicly accessible. Please specify the anticipated time frame, which can coincide with the publication of the results, and indicate the platforms or avenues through which you plan to share your data and other research deliverables.\n\n\n\n\n\n\n5.4.4 Policies for Re-use, Re-distribution & Derivatives\nIt’s important to emphasize that access restrictions and license terms serve distinct and valuable purposes. Access restrictions are primarily concerned with safeguarding data and ensuring secure access, while license terms are crucial for governing how content or intellectual property can be utilized and shared. These terms provide valuable guidelines, specifying aspects like usage scope, license duration, potential payment requirements, and any conditions related to modifications, redistribution, or resale.\nThis section of the DMP should cover the scientific rights and expectations for the future use of the data and other derivatives produced by your research. More specifically, it should address which licenses you expect to govern your research deliverables. This is important to eliminate any uncertainties and ensure others will reuse it accordingly. Even those these decisions may change, this planning forces researchers to think ahead any anticipated restrictions on use, redistribution, or modification and become familiar with different license options to satisfy them.\nLicenses can range from very permissive to very restrictive. Nonstandard licenses and waivers can be a significant barrier to reuse. Whenever possible, apply standard rights waivers or licenses, such as those established by Open Data Commons (ODC) and Creative Commons (CC), that guide subsequent use of data and other intellectual products. The CC0 license and the ODC Public Domain Dedication and License, for example, promote unrestricted sharing and data use.\n\n\n\n\n\n\nBefore choosing a license\n\n\n\nThe license options available to you may be influenced by the terms of use of your selected data repository or archive. CC0 is the most commonly applied license for research data; therefore, it is essential to verify these terms to prevent any conflicting information in your DMP.\n\n\n\n5.4.4.1 Plans for Archiving & Preservation\nThe best-laid preservation plans do not necessarily mean that all project data will see the light of day. Reviewers and research sponsors will be reassured that this will not be the case if you have spelled out how and when the data products will be disseminated to others, especially people outside your research group. First, determine whether the research sponsor or your home institution has specific requirements. Usually, all data need not be retained, and those that do need not be retained forever. Follow the principle as open as possible, as restricted as needed. A recurrent question we get: Should I share the raw data if I am re-using a publicly available data source? The answer is: It depends! If the data source is housed in a repository with a DOI, a citation and attribution on the README will suffice. In that case, you may only share derived datasets (in case you aggregate other data sources or perform transformations). However, if the dataset is on a website or ftp chances are that they won’t be accessible for long-term, and we recommend you also add the raw data to the data folder of your project directory that you plan to share.\nFunding agencies and research institutions favor more active approaches, including: (1) publishing the data in an open repository or archive; (2) submitting the data (or subsets thereof) as appendices or supplements to journal articles; and (3) publishing the data, metadata, and relevant code as a “data paper”.\nA good dissemination plan includes a few concise statements. State when, how, and what data products will be made available. Generally, making data available to the greatest extent and with the fewest possible restrictions at publication or project completion is encouraged.\nThe more proactive approaches described above are greatly preferred over mailing or emailing data and will likely save significant time and money in the long run, as the appropriate journals and repositories or archives will support the data curation and sharing.\nFurthermore, many journals and repositories provide guidelines and mechanisms for how others can appropriately cite your data, including digital object identifiers (e.g., DOIs), and recommended citation formats; this helps ensure that you receive credit for the data products you create. Keep in mind that the data will be more usable and interpretable by you and others if disseminated using standards and nonproprietary approaches and if the data are accompanied by metadata and associated code used for data processing.\nGive preference to a certified curated disciplinary data repository. Examples of disciplinary data repositories are:\n\nKnowledge Network for Biocomplexity (KNB)\nArctic Data Center\nThe Digital Archaeological Record (tDAR)\nEnvironmental Data Initiative (EDI)\n\nIf not none of the disciplinary options are suitable for your project, consider an institutional, general, or multidisciplinary repository to house your data and code. Some options are:\n\nDryad\nFigshare\nZenodo\n\nThe Registry of Research Data Repositories (Re3data.org) is a global registry of data repositories that helps researchers to identify suitable options to house their data. When in doubt, consult with the campus Library.\n\n\n\n\n\n\nWhat about GitHub?\n\n\n\nGitHub is not an archival location, it’s great for collaboration and tracking contributions, but projects hosted there are not as easy to find. GitHub works great for ongoing projects, but it is not a preservation tool nor one that facilitates discoverability (most repositories are now indexed on Google Data Sets). Also, Microsoft owns GitHub and does not include tracks citations and other metrics. It is also not ideal for housing projects with a combination of public and restricted datasets and no option for data user agreements if needed."
  },
  {
    "objectID": "session_05.html#dmptool---part-ii",
    "href": "session_05.html#dmptool---part-ii",
    "title": "5  Writing Data Management Plans",
    "section": "5.5 DMPTool - Part II",
    "text": "5.5 DMPTool - Part II\n\n5.5.0.1 Other Features\nAs promised, now that we have covered key recommendations for addressing each section of the NSF-GEN DMP template, let’s take a quick live tour and explore other valuable functionalities this tool offers:\n\nProject details: You can continually update your project’s status and provide more descriptive information.\nAdd project contributors: Include project contributors and DMP collaborators with specific permissions (co-owner, editor, or read-only access).\nSpecify expected research outputs: You can specify both expected and completed research outputs. This includes options for flagging sensitive data or personally identifiable information (PII), selecting intended repositories and metadata schema, providing access information, indicating data size, anticipating the release date, and specifying the license.\nRequest feedback: You can request for an expert review from our local team directly through the tool.\nSet plan visibility: You have the option to set restrictions on who can access your plan.\nRegister your plan: Register your plan to obtain a DMP ID, a DOI designed specifically for data management plans. This registration allows you to link your plan to your ORCID and project outputs, such as datasets and journal articles, making it easier to demonstrate compliance with your funder’s requirements by the end of the project.\nDownload in preferred format: you have you can download the plan in your preferred format and style."
  },
  {
    "objectID": "session_05.html#final-considerations",
    "href": "session_05.html#final-considerations",
    "title": "5  Writing Data Management Plans",
    "section": "5.6 Final considerations",
    "text": "5.6 Final considerations\n\n5.6.1 Ask for feedback\nOnce you complete your DMP draft, the UCSB Library Research Data Services team will be happy to review your it and provide comments and suggestions to enhance its effectiveness and compliance with best open and reproducible science practices. Researchers can continue to seek feedback and make updates to their DMPs post-award whenever needed.\n\n\n5.6.2 Iterate, Iterate, Iterate\nIt’s crucial to remember that a DMP is a plan. We recognize that DMPs are dynamic documents that may evolve as research projects progress.\nNone of the information in it is set in stone and you should change and update it as needed. For example, your initial DMP may have it written to store the final datasets in a general repository such as Figshare, but later on you find that a disciplinary repository like KNB would be a better option to house the data because the data would be more visible and easily findable by others in your community. In that case, you can always go back and update your plan to reflect that change!\nWhat is most important is that your DMP is an accurate reflection when you’re finished with your project so you’re ready to submit your data. This will make the process of submitting data much smoother.\n\n\n5.6.3 Define Roles & Responsibilities\nSome templates include specific sections about roles and responsibilities and data management oversight. It is the Principal Investigator’s responsibility to supervise and coordinate team efforts. Developing a policy where you and your team regularly review and update the DMP as needed can be beneficial. This responsibility along with more specific ones (e.g., data organization and documentation, data anonymization, backup, encryption, access control, etc.) can be assigned to specific team members or rotated among them. There is flexibility in how you choose to implement this policy or plan, but it’s crucial to ensure that expectations are clear and that all collaborators are aware of and in agreement with any changes.\n\n\n\n\n\n\nExercise: Your turn!\n\n\n\nPlease organize yourselves into groups of two or three members each. Within your respective groups, you will soon receive an invitation to collaborate on the development of a Data Management Plan (DMP) draft using the DMPTool. It’s important to note that this DMP has been exclusively designed for instructional purposes.\nAs you engage with the DMP, please thoroughly assess its content, focusing on areas where you identify opportunities for improvement and clarification. Keep in mind the best practices we’ve previouslty covered.\nUtilize the commenting and suggestion features in the DMPTool to submit a minimum of two comments and suggestions aimed at enhancing and clarifying the document. We will later convene to discuss the recommendations.\n\n\n\n\n\n\nMichener, William K. 2015. “Ten Simple Rules for Creating a Good Data Management Plan.” PLOS Computational Biology 11 (10): 1–9. https://doi.org/10.1371/journal.pcbi.1004525."
  },
  {
    "objectID": "session_06.html#learning-objectives",
    "href": "session_06.html#learning-objectives",
    "title": "6  Intro to Literate Analysis",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nIntroduce literate analysis using Quarto (an extension of RMarkdown’s features)\nLearn markdown syntax and run R code using Quarto\nBuild and render an example analysis"
  },
  {
    "objectID": "session_06.html#introduction-to-literate-programming",
    "href": "session_06.html#introduction-to-literate-programming",
    "title": "6  Intro to Literate Analysis",
    "section": "6.1 Introduction to Literate Programming",
    "text": "6.1 Introduction to Literate Programming\nAll too often, computational methods are written in such a way as to be borderline incomprehensible even to the person who originally wrote the code! The reason for this is obvious, computers interpret information very differently than people do. In 1984, Donald Knuth proposed a reversal of the programming paradigm by introducing the concept of Literate Programming (Knuth 1984).\n\n“Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do.”\n\nIf our aim is to make scientific research more transparent, the appeal of this paradigm reversal is immediately apparent. By switching to a literate analysis model, you help enable human understanding of what the computer is doing. As Knuth describes, in the literate analysis model, the author is an “essayist” who chooses variable names carefully, explains what they mean, and introduces concepts in the analysis in a way that facilitates understanding.\nQuarto and RMarkdown are an excellent way to generate literate analysis, and a reproducible workflow. These types of files, combine R the programming language, and markdown, a set of text formatting directives.\nIn an R script, the language assumes that you are writing R code, unless you specify that you are writing prose (using a comment, designated by #). The paradigm shift of literate analysis comes in the switch to RMarkdown or Quarto, where instead of assuming you are writing code, they assume that you are writing prose unless you specify that you are writing code. This, along with the formatting provided by markdown, encourages the “essayist” to write understandable prose to accompany the code that explains to the human-beings reading the document what the author told the computer to do. This is in contrast to writing just R code, where the author telling to the computer what to do with maybe a smattering of terse comments explaining the code to a reader.\nBefore we dive in deeper, let’s look at an example of what a rendered literate analysis can look like using a real example. Here is an example of an analysis workflow written using RMarkdown. Note that if this analysis would be in Quarto, the render version it would be similar, except for formatting and layout (eg: the default font in Quarto is different).\nThere are a few things to notice about this document, which assembles a set of similar data sources on salmon brood tables with different formatting into a single data source.\n\nIt introduces the data sources using in-line images, links, interactive tables, and interactive maps.\nAn example of data formatting from one source using R is shown.\nThe document executes a set of formatting scripts in a directory to generate a single merged file.\nSome simple quality checks are performed (and their output shown) on the merged data.\nSimple analysis and plots are shown.\n\nIn addition to achieving literate analysis, this document also represents a reproducible analysis. Because the entire merging and quality control of the data is done using the R code in the Quarto file, if a new data source and formatting script are added, the document can be run all at once with a single click to re-generate the quality control, plots, and analysis of the updated data.\n\n\n\n\n\n\nA note on reproducibility\n\n\n\nReproducible analysis allow you to automatize how the figures and the statistics in your analysis are generated. This process also helps your collaborators, your readers and your future self to follow your code trail the leads to the original data, increasing the transparency of your science.\nLiterate analysis help reduce the mistakes from copying and pasting across software, keeps results and models in sync, and allows you to provide interested readers with more information about the different approaches and analyses you tried before coming up with the final results."
  },
  {
    "objectID": "session_06.html#rmarkdown-and-quarto",
    "href": "session_06.html#rmarkdown-and-quarto",
    "title": "6  Intro to Literate Analysis",
    "section": "6.2 RMarkdown and Quarto",
    "text": "6.2 RMarkdown and Quarto\nYou can identify a Quarto file with the .qmd extension. On the other hand, an RMarkdown file has a .Rmd extension. Both have similar structures and both combine prose with code.Quarto provides a rich support to languages other than R such as Python, Observable, and Julia. It also excels in formatting and layout. Allowing users to customize in details the looks of the rendered documents. On the other hand, RMarkdown is compatible with some languages that Quarto is not, for example bash. Quarto and Rmarkdown are amazing tools to use for collaborative research. During this course e will spend some time learning and using the basics of Quarto and provide some comparisons to RMarkdown.\n\nNow, let’s take a look at the structure of each of these files. The both look for the most part the same with minor differences.\n\n\nFinally, lets compare each of these files when knitted/rendered.\n\n\nAgain, we see similar outcoumes, with minor differences mainly in formatting (font, style of showing code chunks, etc.)\nBoth type of documents have three main components:\n\nYAML metadata to guide the document’s build process\nCode chunks to run\nProse (Text to display)\n\nToday we are going to use Quarto to run some analysis on data. We are specifically going to focus on the code chunk and text components. We will discuss more about the how the YAML works in an Quarto later in the course.\n\n\n\n\n\n\nThe YAML\n\n\n\nIs the document’s metadata which sets guidelines on how your want the output of your document to look like. It is located at the top of your file, delineated by three dashes (---) at the top and at the bottom of it. It can be used to specify:\n\nCharacteristics of your documents such at title, author, date of creation.\nArgument to pass on the building process to control the format of the output.\nAdd additional information such as the bibliography file (and formatting of the references)\nSpecific parameters for your report (eg: just used a subset of the data)."
  },
  {
    "objectID": "session_06.html#a-quarto-document",
    "href": "session_06.html#a-quarto-document",
    "title": "6  Intro to Literate Analysis",
    "section": "6.3 A Quarto Document",
    "text": "6.3 A Quarto Document\nLet’s open an Quarto file following the instructions below.\n\n\n\n\n\n\nSetup\n\n\n\n\nOpen a new Quarto file using the following prompts: File &gt; New File &gt; Quarto Document\nA popup window will appear.\nGive your file a new title, e.g “Introduction to Quarto”.\nLeave the output format as HTML and Engine set to Knitr.\nThen click the “Create” button.\n\n\n\nThe first thing to notice is that by opening a file, we see the fourth pane of the RStudio pops up. This is our Quarto document which is essentially a text editor. We also see in the upper left side that we are looking at the document under the “Visual editor”. This is probably a familiar way of looking at a text document. To introduce the markdown syntax, we re going to move to the source editor and then come back to the visual editor. In the upper left corner, click on Source. See how the formatting changed? In the Source editor we are looking at the same text, but in markdown syntax. The visual editor on the other hand, allows us to see how markdown is rendered, therefore how is it going to look in our output document.\nLet’s have a look at this file — As we saw in the examples above, it looks a little different than a R script. It’s not blank; there is some initial text already provided for you. Lets identify the three main components we introduces before. We have the YAML a the top, in between the two sets of dashed lines. Then we also see white and grey sections. The gray sections are R code chunks and the white sections are plain text.\nLet’s go ahead and render this file by clicking the “Render” button, next to the blue arrow at the top of the Quarto file. When you first click this button, RStudio will prompt you to save this file. Save it in the top level of your home directory on the server, and name it something that you will remember (like quarto-intro.Rmd).\n\n\n\nWhat do you notice between the two?\nFirst, the render process produced a second file (an HTML file) that popped up in a second window in the browser. You’ll also see this file in your directory with the same name as your qmd, but with the .html extension. In it’s simplest format, Quarto files come in pairs (same than RMarkdown files) the Quarto document, and its rendered version. In this case, we are rendering, the file into HTML. You can also knit to PDF or Word files and others.\nNotice how the grey R code chunks are surrounded by 3 back-ticks and {r LABEL}. The first chunk, in this case 1+1, is evaluated and return the output number (2). Notice the line in the second chunk that says #| echo: false? This is a code chunk option that indicates not to print the code. In the rendered version, we can see the outcome of 2*2 but not the executed code that created the outcome.\nThe table below show some of the options available to customizing outputs (Quarto.org).\n\nCode chunk options\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\n#| eval:\nEvaluate the code chunk (if false, just echos the code into the output).\n\n\n#| echo:\nInclude the source code in output\n\n\n#| warning:\nInclude warnings in the output.\n\n\n#| error:\nInclude warnings in the output.\n\n\n#| include:\nCatch all for preventing any output (code or results) from being included (e.g.include: false suppresses all output from the code block).\n\n\n\nNote that you can also combine these options by adding more than one to a code chunk.\n\n\n\n\n\n\nImportant\n\n\n\nOne important difference between Quarto documents and RMarkdown documents is that in Quarto, chunk options are written in special comment format (#|) at the top of code chunks rather than within the wiggly brackets next to ```{r} at the begging of the chunk. For example:\n\nQuarto code options syntax\n\n\n\nRMarkdown code options syntax\n\n\n\n\nIt is important to emphasize one more time that in an Quarto (and RMarkdown) document, the gray areas of the document are code, in this case R code because that is what it is indicated in the ```{r} syntax at the start of this gray area. And the white areas of a qmd are in markdown language."
  },
  {
    "objectID": "session_06.html#markdown-syntax",
    "href": "session_06.html#markdown-syntax",
    "title": "6  Intro to Literate Analysis",
    "section": "6.4 Markdown Syntax",
    "text": "6.4 Markdown Syntax\nLet’s start by talking about markdown. Markdown is a formatting language for plain text, and there are only around 15 rules to know.\nNotice the syntax in the document we just knitted:\n\nHeaders get rendered at multiple levels: #, ##\nBold: **word**\n\nThere are some good cheatsheets to get you started, and here is one built into RStudio: Go to Help &gt; Markdown Quick Reference.\n\n\n\n\n\n\nImportant\n\n\n\nThe hash symbol # is used differently in markdown and in R\n\nIn an R script or inside an R code chunk, a hash indicates a comment that will not be evaluated. You can use as many as you want: # is equivalent to ######. It’s just a matter of style.\nIn markdown, a hash indicates a level of a header. And the number you use matters: # is a “level one header”, meaning the biggest font and the top of the hierarchy. ### is a level three header, and will show up nested below the # and ## headers.\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\nIn markdown, Write some italic text, make a numbered list, and add a few sub-headers. Use the Markdown Quick Reference (in the menu bar: Help &gt; Markdown Quick Reference).\nRe-knit your html file and observe your edits."
  },
  {
    "objectID": "session_06.html#the-visual-editor",
    "href": "session_06.html#the-visual-editor",
    "title": "6  Intro to Literate Analysis",
    "section": "6.5 The Visual Editor",
    "text": "6.5 The Visual Editor\nQuarto has a “what you see is what you mean” (WYSIWYM) editor or Visual editor, which can be a nice way to write markdown without remembering all of the markdown rules. Since there aren’t many rules for markdown, we recommend just learning them especially since markdown is used in many, many other contexts besides Quarto and RMarkdown. For example, formatting GitHub comments and README files.\nTo access the editor, click the Visual button in the upper left hand corner of your editor pane. You’ll notice that your document is now formatted as you type, and you can change elements of the formatting using the row of icons in the top of the editor pane. Although we don’t really recommend doing all of your markdown composition in the Visual editor, there are two features to this editor that we believe are immensely helpful, adding citations, and adding tables.\n\n6.5.1 Adding citations\nTo add a citation, go to the visual editor and in the insert drop down, select “Citation.” In the window that appears, there are several options in the left hand panel for the source of your citation. If you have a citation manager, such as Zotero, installed, this would be included in that list. For now, select “From DOI”, and in the search bar enter a DOI of your choice (e.g.: 10.1038/s41467-020-17726-z), then select “Insert.”\n\nAfter selecting insert, a couple of things happen. First, the citation reference is inserted into your markdown text as [@oke2020]. Second, a file called references.bib containing the BibTex format of the citation is created. Third, that file is added to the YAML header of your Quarto document (bibliography: references.bib). Adding another citation will automatically update your references.bib file. So easy!\n\n\n6.5.2 Adding table in markdown\nThe second task that the visual editor is convenient for is generating tables. Markdown tables are a bit finicky and annoying to type, and there are a number of formatting options that are difficult to remember if you don’t use them often. In the top icon bar, the “Table” drop down gives several options for inserting, editing, and formatting tables. Experiment with this menu to insert a small table."
  },
  {
    "objectID": "session_06.html#code-chunks-in-quarto",
    "href": "session_06.html#code-chunks-in-quarto",
    "title": "6  Intro to Literate Analysis",
    "section": "6.6 Code Chunks in Quarto",
    "text": "6.6 Code Chunks in Quarto\nEvery time when opening a new Quarto document we should start by deleting all template text (everything except for the YAML). Then we save the document into the most convenient folder of our project. Now we are ready to start our work.\nYou can create a new chunk in your Quarto in one of these ways:\n\nGo to Code in the top menu bar, click “Insert Chunk”\nType by hand {r}\nUse the keyboard shortcut\n\nMac:command + option + i\nWindows: Ctrl + Alt + i\n\n\n\n\n\n\n\n\nAbout code chunks\n\n\n\nEach code chunk needs to have an opening syntax ```{r} and a closing syntax ```. Everything in between these lines will be identified as R code.\n\n\nIf I want to write some R code, this is how it would look like.\n\nx &lt;- 4 * 8\n\nhights_ft &lt;- c(5.2, 6.0, 5.7)\n\ncoef &lt;- 3.14\n\nHitting return does not execute this command; remember, it’s just a text file. To execute it, we need to get what we typed in the the R chunk (the grey R code) down into the console. How do we do it? There are several ways (let’s do each of them):\n\nCopy-paste this line into the console (generally not recommended as a primary method)\nSelect the line (or simply put the cursor there), and click “Run”. This is available from:\n\nthe bar above the file (green arrow)\nthe menu bar: Code &gt; Run Selected Line(s)\nkeyboard shortcut: command-return\n\nClick the green arrow at the right of the code chunk"
  },
  {
    "objectID": "session_06.html#practice-literate-analysis-with-ocean-water-samples",
    "href": "session_06.html#practice-literate-analysis-with-ocean-water-samples",
    "title": "6  Intro to Literate Analysis",
    "section": "6.7 Practice: Literate Analysis with ocean water samples",
    "text": "6.7 Practice: Literate Analysis with ocean water samples\nNow that we have gone over the basics, let’s go a little deeper by building a simple, Quarto document that represents a literate analysis using real data. We are going to work with the seawater chemistry data. We are going to download a file named BGchem2008data.csv from the Arctic Data Center repository. Please follow the steps below to download the data and then upload to your RStudio Server data folder.\n\n\n\n\n\n\nSetup\n\n\n\n\nNavigate to the following dataset: https://doi.org/10.18739/A25T3FZ8X\nDownload the file BGchem2008data.csv\nClick the “Upload” button in your RStudio server file browser.\nIn the dialog box, make sure the destination directory is the data directory in your R project, click “Choose File,” and locate the BGchem2008data.csv file. Press “OK” to upload the file.\nCheck your file was successfully uploaded by navigating into your data folder in the Files pane.\n\n\n\n\n6.7.1 Getting Started\nExperienced R users who have never used Quarto (or RMarkdown) often struggle a bit in the transition to developing analysis in Prose+Code format — which makes sense! It is switching the code paradigm to a new way of thinking.\nRather than starting an R chunk and putting all of your code in that single chunk, below we describe what we think is a better way.\n\nOpen a document and block out the high-level sections you know you’ll need to include using top level headers.\nAdd bullet points for some high level pseudo-code steps you know you’ll need to take.\nStart filling in under each bullet point the code that accomplishes each step. As you write your code, transform your bullet points into prose, and add new bullet points or sections as needed.\n\nFor this mini-analysis, we will have the following sections and code steps:\n\nIntroduction\n\nAbout the data\nSetup\nRead in data\n\nAnalysis\n\nCalculate summary statistics\nCalculate mean Redfield ratio\nPlot Redfield ratio\n\nConclusion\n\n\n\n\n\n\n\nExercise\n\n\n\nUnder “About the data”, write a sentence saying where the data set came from, including a hyperlink ti the data. Also mention when was the data downloaded.\nHint: Navigate to Help &gt; Markdown Quick Reference to look-up the hyperlink syntax.\n\n\n\n\n6.7.2 Read in the data\nNow that we have outlined our document, we can start writing code! To read the data into our environment, we will use a function from the readr package.\nTo use a package in our analysis, we need to first make sure it is installed (you can install a package by running install.package(\"name-of-package\")). Once installed you need to load it into our environment using library(package_name). Even though we have installed it, we haven’t yet told our R session to access it. Because there are so many packages (many with conflicting namespaces) R cannot automatically load every single package you have installed. Instead, you load only the ones you need for a particular analysis. Loading the package is a key part of the reproducible aspect of our literate analysis, so we will include it as an R chunk as part of our Setup.\n\n\n\n\n\n\nBest Practice\n\n\n\nIt is generally good practice to include all of your library() calls in a single, dedicated R chunk near the top of your document. This lets collaborators know what packages they might need to install before they start running your code.\n\n\nThe server should have already installed readr, so add a new R chunk below your Setup header that calls the readr library, and run it. It should look like this:\n\nlibrary(readr)\n\nNow, under “Read data”, add a code chunk that uses the read_csv() function to read in your data file.\n\nbg_chem &lt;- read_csv(\"data/BGchem2008data.csv\")\n\nRows: 70 Columns: 19\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (1): Station\ndbl  (16): Latitude, Longitude, Target_Depth, CTD_Depth, CTD_Salinity, CTD_T...\ndttm  (1): Time\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nWhy read_csv() over read.csv()?\nWe chose to show read_csv() from the readr package to introduce the concept of packages, to show you how to load packages, and read_csv() has several advantages over read.csv() from base R, including:\n\nMore reasonable function defaults (no stringsAsFactors!)\nSmarter column type parsing, especially for dates\nread_csv() is much faster than read.csv(), which is helpful for large files\n\nOnce you run this line in your document, you should see the bg_chem object populate in your environment pane. It also spits out lots of text explaining what types the function parsed each column into. This text is important, and should be examined, but we might not want it in our final document.\n\n\n\n\n\n\nExercise\n\n\n\nHow would you suppress the warnings (so they don’t show in our output file) form a specific code chunk?\nHint: Code chunk options\n\n\n\n\n6.7.3 Calculate Summary Statistics\nAs our “analysis” we are going to calculate some very simple summary statistics and generate a single plot. Using water samples from the Arctic Ocean, we will examine the ratio of nitrogen to phosphate to see how closely the data match the Redfield ratio, which is the consistent 16:1 ratio of nitrogen to phosphorous atoms found in marine phytoplankton.\nLet’s start by exploring the data we just read. Every time we read a new data set, it is important to familiarize yourself with it and make sure that the data looks as expected. Below some useful functions for exploring your data.\nLet’s start by creating a new R chunk and run the following functions. Because this just an exploration and we do not want this chunk to be part of our report, we will indicate that by adding #|eval: false and #| echo: false in the setup of the chunk, that way, the code in this chunk will not run and not be displayed when I knit the final document.\n\n## Prints the column names of my data frame\ncolnames(bg_chem)\n\n## General structure of the data frame - shows class of each column\nstr(bg_chem)\n\n## First 6 lines of the data frame\nhead(bg_chem)\n\n## Summary of each column of data\nsummary(bg_chem)\n\n## Prints unique values in a column (in this case Date)\nunique(bg_chem$Date)\n\nTo peek out data frame, we can type View(bg_chem) in the console. This will open a tab with our data frame in a tabular format.\nNow that we know a more about the data set we are working with lets do some analyses. Under the appropriate bullet point in your analysis section, create a new R chunk, and use it to calculate the mean nitrate (NO3), nitrite (NO2), ammonium (NH4), and phosphorous (P) measured.\nSave these mean values as new variables with easily understandable names, and write a (brief) description of your operation using markdown above the chunk. Remember that the $ (aka the subset operator) indicates which column of your data to look into.\n\nnitrate &lt;- mean(bg_chem$NO3)\nnitrite &lt;- mean(bg_chem$NO2)\namm &lt;- mean(bg_chem$NH4)\nphos &lt;- mean(bg_chem$P)\n\nIn another chunk, use those variables to calculate the nitrogen: phosphate ratio (Redfield ratio).\n\nratio &lt;- (nitrate + nitrite + amm)/phos\n\nYou can access this variable in your markdown text by using R in-line in your text. The syntax to call R in-line (as opposed to as a chunk) is a single backtick `, followed by the letter “r”, then whatever your simple R command is — here we will use round(ratio) to print the calculated ratio, and finally a closing backtick `. This allows us to access the value stored in this variable in our explanatory text without resorting to the evaluate-copy-paste method so commonly used for this type of task.\nSo, the text in you Quarto document should look like this:\nThe Redfield ratio for this dataset is approximately: `r round(ratio)`\nAnd the rendered text like this:\nThe Redfield ratio for this dataset is approximately 6.\nFinally, create a simple plot using base R that plots the ratio of the individual measurements, as opposed to looking at mean ratio.\n\nplot(bg_chem$P, bg_chem$NO2 + bg_chem$NO3 + bg_chem$NH4)\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nDecide whether or not you want the plotting code above to show up in your knitted document along with the plot, and implement your decision as a chunk option.\nRender your Quarto document (by pressing the Render button) and observe the results.\n\n\n\n\n\n\n\n\nHow do I decide when to make a new code chunk?\n\n\n\nLike many of life’s great questions, there is no clear cut answer. A rule of thumb is to have one chunk per functional unit of analysis. This functional unit could be 50 lines of code or it could be 1 line, but typically it only does one “thing.” This could be reading in data, making a plot, or defining a function. It could also mean calculating a series of related summary statistics (as we’ll see below). Ultimately, the choice is one related to personal preference and style, but generally you should ensure that code is divided up such that it is easily explainable in a literate analysis as the code is run."
  },
  {
    "objectID": "session_06.html#quarto-file-paths-and-environement",
    "href": "session_06.html#quarto-file-paths-and-environement",
    "title": "6  Intro to Literate Analysis",
    "section": "6.8 Quarto file paths and environement",
    "text": "6.8 Quarto file paths and environement\nAs we discussed during our setup session, in computing, a path specifies the unique location of a file on the filesystem. A path can come in one of two forms: absolute or relative.\n\nAbsolute paths start at the very top of your file system, and work their way down the directory tree to the file.\nRelative paths start at an arbitrary point in the file system. In R, this point is set by your working directory.\n\nQuarto has a special way of handling relative paths that can be very handy. When working in an Quarto document, R will set all paths relative to the location of the Quarto file. This way, you don’t have to worry about setting a working directory, or changing your colleagues absolute path structure with the correct user name, etc. If your Quarto document is stored near where the data it analyses are stored (good practice, generally), setting paths becomes much easier!\nIf you saved your BGchem2008data.csv data file in the same location as your qmd, you can just write read_csv(\"BGchem2008data.csv\") to read it in. Checkout the help page by typing ?read_csv() in the console. This tells you that for this function the first argument should be a pointer to the file. Rstudio has some nice helpers to help you navigate paths. If you open quotes and press tab with your cursor between the quotes, a popup menu will appear showing you some options.\n\n6.8.1 Practice: Quarto and Environments\nLet’s walk through an exercise with the document we just created to demonstrate how Quarto handles environments. We will be deliberately inducing some errors here for demonstration purposes.\nFirst, follow these steps:\n\n\n\n\n\n\nSetup\n\n\n\n\nRestart your R session (Session &gt; Restart R)\nRun the last chunk in your Quarto document by pressing the play button on the chunk\n\n\n\nPerhaps not surprisingly, we get an error:\nError in plot(bg_chem$P, bg_chem$NO2 + bg_chem$NO3 + bg_chem$NH4) : \n  object 'bg_chem' not found\nThis is because we have not run the chunk of code that reads in the bg_chem data. The R part of Quarto works just like a regular R script. You have to execute the code, and the order that you run it in matters. It is relatively easy to get mixed up in a large Quarto document — running chunks out of order, or forgetting to run chunks.\nTo resolve this, follow the next step:\n\n\n\n\n\n\nSetup continued\n\n\n\n\nSelect from the “Run” menu (top right of the editor pane) “Run All.”\nObserve the bg_chem variable in your environment\n\n\n\nThis is a great way to reset and re-run code when things seem to have gone sideways. It is great practice to do periodically since it helps ensure you are writing code that actually runs and it’s reproducible.\n\n\n\n\n\n\nFor the next exercise:\n\n\n\n\nClean your environment by clicking the broom in the environment pane\nRestart your R session (Session &gt; Restart R)\nPress “Render” to run all of the code in your document\nObserve the state of your environment pane\n\nAssuming your document rendered and produced an html page, your code ran. Yet, the environment pane is empty. What happened?\n\n\nThe Render button is rather special — it doesn’t just run all of the code in your document. It actually spins up a fresh R environment separate from the one you have been working in, runs all of the code in your document, generates the output, and then closes the environment. This is one of the best ways Quarto (or RMarkdown) helps ensure you have built a reproducible workflow. If, while you were developing your code, you ran a line in the console as opposed to adding it to your Quarto document, the code you develop while working actively in your environment will still work. However, when you knit your document, the environment RStudio spins up doesn’t know anything about that working environment you were in. Thus, your code may error because it doesn’t have that extra piece of information. Commonly, library() calls are the source of this kind of frustration when the author runs it in the console, but forgets to add it to the script.\nTo further clarify the point on environments, perform the following steps:\n\n\n\n\n\n\nSetup continued\n\n\n\n\nSelect from the “Run” menu (top right of editor pane) “Run All”\nObserve all of the variables in your environment\n\n\n\n\n\n\n\n\n\nWhat about all my R Scripts?\n\n\n\nSome pieces of R code are better suited for R scripts than Quarto or RMarkdown. A function you wrote yourself that you use in many different analyses is probably better to define in an R script than repeated across many Quarto or RMarkdown documents. Some analyses have mundane or repetitive tasks that don’t need to be explained very much. For example, in the document shown in the beginning of this lesson, 15 different excel files needed to be reformatted in slightly different, mundane ways, like renaming columns and removing header text. Instead of including these tasks in the primary Quarto document, the authors chose to write one R script per file and stored them all in a directory. Then, took the contents of one script and included it in the literate analysis, using it as an example to explain what the scripts did, and then used the source() function to run them all from within the Quarto document.\nSo, just because you know Quarto now, doesn’t mean you won’t be using R scripts anymore. Both .R and .qmd have their roles to play in analysis. With practice, it will become more clear what works well in Quarto or RMarkdown, and what belongs in a regular R script."
  },
  {
    "objectID": "session_06.html#additional-quarto-resources",
    "href": "session_06.html#additional-quarto-resources",
    "title": "6  Intro to Literate Analysis",
    "section": "6.9 Additional Quarto Resources",
    "text": "6.9 Additional Quarto Resources\n\nPosit (the organization that developed Quarto) has great documentation, check out Quarto.org\nR for Data Science (2e) (Wickham et al, 2023), this is an awesome book for all R related things. Chapter 29 and 30 are specific to Quarto.\nQuarto Gallery: Example of different outputs created using Quarto\nHello Quarto: share, collaborate, teach, reimagine. A talk by Julia Stewart Lowndes and Mine Cetinkaya-Runde."
  },
  {
    "objectID": "session_06.html#troubleshooting-my-rmarkdown-wont-knit-to-pdf",
    "href": "session_06.html#troubleshooting-my-rmarkdown-wont-knit-to-pdf",
    "title": "6  Intro to Literate Analysis",
    "section": "6.10 Troubleshooting: My RMarkdown Won’t Knit to PDF",
    "text": "6.10 Troubleshooting: My RMarkdown Won’t Knit to PDF\nIf you get an error when trying to knit to PDF that says your computer doesn’t have a LaTeX installation, one of two things is likely happening:\n\nYour computer doesn’t have LaTeX installed\nYou have an installation of LaTeX but RStudio cannot find it (it is not on the path)\n\nIf you already use LaTeX (like to write papers), you fall in the second category. Solving this requires directing RStudio to your installation - and isn’t covered here.\nIf you fall in the first category - you are sure you don’t have LaTeX installed - can use the R package tinytex to easily get an installation recognized by RStudio, as long as you have administrative rights to your computer.\nTo install tinytex run:\n\ninstall.packages(\"tinytex\")\ntinytex::install_tinytex()\n\nIf you get an error that looks like destination /usr/local/bin not writable, you need to give yourself permission to write to this directory (again, only possible if you have administrative rights). To do this, run this command in the terminal:\nsudo chown -R `whoami`:admin /usr/local/bin\nand then try the above install instructions again. Learn more about tinytex from Yihui Xie’s online book TinyTeX. ````"
  },
  {
    "objectID": "session_07.html#learning-objectives",
    "href": "session_07.html#learning-objectives",
    "title": "7  Intro to Tidy Data",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nLearn how to design and create effective data tables by:\n\napplying tidy and normalized data principles,\nfollowing best practices to format data tables’ content,\nrelating tables following relational data models principles, and\nunderstanding how to perform table joins."
  },
  {
    "objectID": "session_07.html#tidy-data",
    "href": "session_07.html#tidy-data",
    "title": "7  Intro to Tidy Data",
    "section": "7.1 Tidy Data",
    "text": "7.1 Tidy Data\n\n7.1.1 Values, variables, observations, and entities\nBefore we dive into tidy data, we need to get acquainted with our building blocks. A dataset is a collection of values, with each value belonging to an observation and a variable.\n\nAn observation groups all the values measured for an individual entity. For example, an observation about a plant could include the species name, date of collection and altitude of the place where the plant was found. The plants found would be the entity.\nA variable groups all the values that measure the same attribute. In the previous example, the variables would be the date of collection, altitude and species name.\n\n\n\n\n\n\n\nNote\n\n\n\n“Variable” is a general term that covers multiple types of attributes. For example, when we are collecting data to investigate a causal relationship, variables include both explanatory variables (also called independent variables) and response variables (also called dependent variables). We could also have a classifier variable that assigns a unique identifier to each observation.\nWhen we want to document our values, we must think of the best way to organize them so they clearly relate to the variables they represent and the observations they belong to.\n\n\n\n\n7.1.2 What is tidy data?\nTidy data is a standardized way of organizing data tables that allows us to manage and analyze data efficiently, because it makes it straightforward to understand the corresponding variable and observation of each value. The  tidy data principles  are:\n\nEvery column is a variable.\nEvery row is an observation.\nEvery cell is a single value.\n\nThe following is an example of tidy data - it’s easy to see the three tidy data principles apply.\n\n\n\n\n\n\n7.1.3 Recognizing untidy data\nAnything that does not follow the three tidy data principles is untidy data.\nThere are many ways in which data can become untidy, some can be noticed right away, while others are more subtle. In this section we will look at some examples of common untidy data situations.\n\n7.1.3.1 Example 1\nThe following is a screenshot of an actual dataset that came across NCEAS. We have all seen spreadsheets that look like this - and it is fairly obvious that whatever this is, it isn’t very tidy. Let’s dive deeper into why we consider it untidy data.\n\n\n7.1.3.1.1 Multiple tables\nTo begin with, notice there are actually three smaller tables within this table. Although for our human brain it is easy to see and interpret this, it is extremely difficult to get a computer to see it this way.\n\nHaving multiple tables within the same table will create headaches down the road should you try to read in this information using R or another programming language. Having multiple tables immediately breaks the tidy data principles, as we will see next.\n\n\n7.1.3.1.2 Inconsistent columns\nIn tidy data, each column corresponds to a single variable. If you look down a column, and see that multiple variables exist in the table, the data is not tidy. A good test for this can be to see if you think the column consists of only one unit type.\n\n\n\n7.1.3.1.3 Inconsistent rows\nThe second principle of tidy data is: every column must be a single observation. If you look across a single row, and you notice that there are clearly multiple observations in one row, the data are likely not tidy.\n\n\n\n7.1.3.1.4 Marginal sums and statistics\nMarginal sums and statistics are not considered tidy. They break principle one, “Every column is a variable”, because a marginal statistic does not represent the same variable as the values it is summarizing. They also break principle two, “Every row is an observation”, because they represent a combination of observations, rather than a single one.\n\n\n\n\n7.1.3.2 Example 2\nConsider the following table. It’s a single one this time! It shows data about species observed at a specific site and date. The column headers refer to the following:\n\nid: id of row\ndate: date when a species was observed\nsite: site where a species was observed\nname: site’s name\naltitude: site’s altitude\nsp1code, sp2code: species code for two plants observed\nsp1height, sp2height: height of the plants observed\n\nTake a moment to see why this is not tidy data.\n\n\n7.1.3.2.1 Multiple Observations\nRemember that an observation is all the values measured for an individual entity.\nIf our entity is a single observed plant, then the values we measured are date and site of observation, the altitude, and the species code and height. This table breaks the second tidy data principles: Every row is an observation.\n\nPeople often refer to this as “wide format”, because the observations are spread across a wide number of columns. Note that, should one encounter a new species in the survey, we would have to add new columns to the table. This is difficult to analyze, understand, and maintain. To solve this problem, we can create a single column for species code and a single column for species height as in the following table."
  },
  {
    "objectID": "session_07.html#data-normalization",
    "href": "session_07.html#data-normalization",
    "title": "7  Intro to Tidy Data",
    "section": "7.2 Data Normalization",
    "text": "7.2 Data Normalization\n\n7.2.1 What is data normalization?\nData normalization is the process of creating normalized data, which are datasets free from data redundancy to simplify query, analysis, storing, and maintenance. In normalized data we organize data so that :\n\nEach table follows the tidy data principles\nWe have separate tables for each type of entity measured\nObservations (rows) are all unique\nEach column represents either an identifying variable or a measured variable\n\nIn denormalized data observations about different entities are combined. A good indication that a data table is denormalized and needs normalization is seeing the same column values repeated across multiple rows.\n\n\n7.2.2 Example\nIn the previous data table the row values for the last three columns are repeated.\n\nThis means the data is denormalized and it happens because each row has measurements about multiple entities:\n\n1st entity: individual plants found at that site, and\n2nd entity: sites at which the plants were observed.\n\n\nIf we use this information to normalize our data, we should end up with:\n\none tidy table for each entity observed, and\nadditional columns for identifying variables (such as site ID).\n\nHere’s how our normalized data would look like:\n\n\n\n\n\nNotice that each table also satisfies the tidy data principles.\nNormalizing data by separating it into multiple tables often makes researchers really uncomfortable. This is understandable! The person who designed this study collected all of these measurements for a reason - so that they could analyze the measurements together. Now that our site and plant information are in separate tables, how would we use site temperature as a predictor variable for species composition, for example? We will go over a solution in the next section."
  },
  {
    "objectID": "session_07.html#relational-data-models",
    "href": "session_07.html#relational-data-models",
    "title": "7  Intro to Tidy Data",
    "section": "7.3 Relational Data Models",
    "text": "7.3 Relational Data Models\n\n7.3.1 What are relational data models?\nA relational data model is a way of encoding links between multiple tables in a database. A database organized following a relational data model is a relational database. A few of the advantages of using a relational data model are:\n\nEnabling powerful search and filtering\nAbility to handle large, complex data sets\nEnforcing data integrity\nDecreasing errors from redundant updates\n\nRelational data models are used by relational databases (like mySQL, MariaDB, Oracle, or Microsoft Access) to organize tables. However, you don’t have to be using a relational database or handling large and complex data to enjoy the benefits of using a relational data model.\n\n\n7.3.2 Primary and foreign keys\nThe main way in which relational data models encode relationships between different tables is by using keys. Keys are variables whose values uniquely identify observations. For tidy data, where variables and columns are equivalent, a column is a key if it has a different value in each row. This allows us to use keys as unique identifiers that reference particular observations and create links across tables.\nTwo types of keys are common within relational data models:\n\nPrimary Key: chosen key for a table, uniquely identifies each observation in the table,\nForeign Key: reference to a primary key in another table, used to create links between tables.\n\n\n\n7.3.3 Example\nOn our previously normalized data for plants and sites, let’s choose primary keys for these tables and then identify any foreign keys.\nPrimary keys\nFirst, notice that the columns ‘date’, ‘site’ and ‘sp_code’ cannot be primary keys because they have repeated values across rows. The columns ‘sp_height’ and ‘id’ both have different values in each row, so both are candidates for primary keys. However, the decimal values of ‘sp_height’ don’t make it as useful to use it to reference observations. So we chose ‘id’ as the primary key for this table.\nFor the sites table, all three columns could be keys. We chose ‘site’ as the primary key because it is the most succinct and it also allows us to link the sites table with the plants table.\nForeign keys\nThe ‘site’ column is the primary key of that table because it uniquely identifies each row of the table as a unique observation of a site. In the first table, however, the ‘site’ column is a foreign key that references the primary key from the second table. This linkage tells us that the first height measurement for the DAPU observation occurred at the site with the name Taku.\n\n\n\n\n\n\n\n7.3.4 Compound keys\n\n\n\nIt can also be the case that a variable is not a key, but by combining it with a second variable we get that the combined values uniquely identify the rows. This is called a\n\nCompound Key: a key that is made up of more than one variable.\n\nFor example, the ‘site’ and ‘sp_code’ columns in the plants table cannot be keys on their own, since each has repeated values. However, when we look at their combined values (1-DAPU, 1-DAMA, 2-DAMA, 2-DAPU) we see each row has a unique value. So ‘site’ and ‘sp_code’ together form a compound key.\n\nThere are different advantages and disadvantages to choosing surrogate, natural, or compound keys as primary keys. You can read more about this in  this article.\n\n\n7.3.5 Entity-Relationship models\nAn Entity-Relationship model (E-R model), also known as an E-R diagram, is a way to draw a compact diagram that reflects the structure and relationships of the tables in a relational database. These can be particularly useful for big databases that have many tables and complex relationships between them.\nWe will explain the steps to drawing a simplified E-R model with our previous plants and sites tables.\nStep 1: Identify the entities in the relational database and add each one in a box. In our case, entities are [plants] and [sites], since we are gathering observations about both of these.\n\n\n\n\n\nStep 2: Add variables for each entity and identify keys. Add the variables as a list inside each box. Then, identify the primary and foreign keys in each of the boxes. To visualize this, we have indicated the primary key of each entity in red and any foreign keys in blue.\n\n\n\n\n\nStep 3: Add relationships between entities.\n\nDraw a line between the boxes of any two entities that have a relationship.\nIdentify which box has the primary key of the other as a foreign key. Let’s call the box that has the foreign key [box1] and the other box [box2]. Using the previous diagram we can see that “site” is the primary key of [sites] and appears as a foreign key in [plants]. So [plants] is [box1] and [sites] is [box2].\nAdd a word describing how [box1] is related to [box2] above the line connecting the two boxes. So, for example, we need to describe how [plants] is related to [sites]. The relation is “a plant is located in a site”, so we write “located” above the line indicating the relationship between [plants] and [sites].\n\n\n\n\n\n\nStep 4: Add cardinality to every relationship in the diagram. At this step we want to quantify how many items in an entity are related to another entity. This is easiest if we reuse the description we found in the previous step. For example, “a plant is located in one site”. Then we add the symbol for “one” at the end of the line going from [plants] to [sites].\n\n\n\n\n\nTo finish, we also indicate how many plants are related to a single site. Since “a site has many plants”, we add the symbol for “many” at the end of the line going from [sites] to [plants]\n\n\n\n\n\nThat’s it! The symbols we used at the end of the lines are called ERD “crow’s foot”. You can see all the existing ones together with an example in the next diagram.\n\n\n\n\n\n\n\nNote\n\n\n\nIf you need to produce a publishable E-R model such as the one above,  Mermaid  is a great option. Read more about how to use this tool to create diagrams  here ."
  },
  {
    "objectID": "session_07.html#merging-data",
    "href": "session_07.html#merging-data",
    "title": "7  Intro to Tidy Data",
    "section": "7.4 Merging Data",
    "text": "7.4 Merging Data\nFrequently, analysis of data will require merging these separately managed tables back together. There are multiple ways to join the observations in two tables, based on how the rows of one table are merged with the rows of the other. Regardless of the join we will perform, we need to start by identifying the primary key in each table and how these appear as foreign keys in other tables.\nWhen conceptualizing merges, one can think of two tables, one on the left and one on the right.\n\n\n7.4.1 Inner Join\nAn INNER JOIN is when you merge the subset of rows that have matches in both the left table and the right table.\n\n\n\n7.4.2 Left Join\nA LEFT JOIN takes all of the rows from the left table, and merges on the data from matching rows in the right table. Keys that don’t match from the left table are still provided with a missing value (na) from the right table.\n\n\n\n7.4.3 Right Join\nA RIGHT JOIN is the same as a left join, except that all of the rows from the right table are included with matching data from the left, or a missing value. Notice that left and right joins can ultimately be the same depending on the positions of the tables\n\n\n\n7.4.4 Full Outer Join\nFinally, a FULL OUTER JOIN includes all data from all rows in both tables, and includes missing values wherever necessary.\n\nSometimes people represent joins as Venn diagrams, showing which parts of the left and right tables are included in the results for each join. This representation is useful, however, they miss part of the story related to where the missing value comes from in each result.\n\n\n\nImage source: R for Data Science, Wickham & Grolemund.\n\n\nWe suggest reading the Relational Data chapter in the “R for Data Science” book  for more examples and best practices about joins."
  },
  {
    "objectID": "session_07.html#best-practices-summary",
    "href": "session_07.html#best-practices-summary",
    "title": "7  Intro to Tidy Data",
    "section": "7.5 Best Practices Summary",
    "text": "7.5 Best Practices Summary\nThis is a summary of what we have covered, and some extra advice!\nThe tidy data principles are:\n\nEvery column is a variable.\nEvery row is an observation.\nEvery cell is a single value.\n\nIn normalized data we organize data so that :\n\nWe have separate tables for each type of entity measured\nObservations (rows) are all unique\nEach column represents either an identifying variable or a measured variable\nEach table follows the tidy data principles\n\nCreating relational data models by assigning primary and foreign keys to each table allows us to maintain relationships between separate normalized tables. Choose the primary key for each table based on your understanding of the data and take efficiency into account. Once you choose a column as the primary key, make sure that all the values in that column are there!\nFor a big relational database, an Entity-Relationship model can be an effective way to explain how different tables and their keys are related to each other. If we need to merge tables we can do it using different types of joins."
  },
  {
    "objectID": "session_07.html#more-on-data-management",
    "href": "session_07.html#more-on-data-management",
    "title": "7  Intro to Tidy Data",
    "section": "7.6 More on Data Management",
    "text": "7.6 More on Data Management\nTidy data is one very important step to data management best practices. However there is more to consider. Here we provide some extra advice from a great paper called  ‘Some Simple Guidelines for Effective Data Management’.\n\nDesign tables to add rows, not columns\nUse a scripted program (like R!)\nNon-proprietary file formats are preferred (eg: csv, txt)\nKeep a raw version of data\nUse descriptive files and variable names (without spaces!)\nInclude a header line in your tabular data files\nUse plain ASCII text\n\nIn the Cleaning & Wrangling chapter we will cover more best practices for cleaning irregular and missing data and how to implement them using R."
  },
  {
    "objectID": "session_07.html#activity",
    "href": "session_07.html#activity",
    "title": "7  Intro to Tidy Data",
    "section": "7.7 Activity",
    "text": "7.7 Activity\nWe will work on an in-person, offline activity to practice identifying tidy data, normalizing data, draing E-R models, and performing joins. The data tables we will use have been adapted from the following dataset for teaching purposes:\nWarren, P.S., A. Kinzig, C.A. Martin, and L. Machabee. 2021. Ecological and social Interactions in urban parks: bird surveys in local parks in the central Arizona-Phoenix metropolitan area ver 10. Environmental Data Initiative.  https://doi.org/10.6073/pasta/f6f004bc7112ce266fde2b80fad19ff4  (Accessed 2023-06-28)."
  },
  {
    "objectID": "session_08.html",
    "href": "session_08.html",
    "title": "8  Accessing & Finding Data",
    "section": "",
    "text": "This lesson will be facilitated by the UCSB DREAM (Data, Research, Exploration, Access, Methods) Lab. The lead faciliators are Jon Jablonski, Director of DREAM Lab, and Seth Erickson, Data Services Librarian.\nThe slide deck can be accessed at this link."
  },
  {
    "objectID": "session_09.html#learning-objectives",
    "href": "session_09.html#learning-objectives",
    "title": "9  Intro to Git and GitHub",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nApply the principles of Git to track and manage changes of a project\nUtilize the Git workflow including pulling changes, staging modified files, committing changes, pulling again to incorporate remote changes, and pushing changes to a remote repository\nCreate and configure Git repositories using different workflows"
  },
  {
    "objectID": "session_09.html#introduction-to-version-control",
    "href": "session_09.html#introduction-to-version-control",
    "title": "9  Intro to Git and GitHub",
    "section": "9.1 Introduction to Version Control",
    "text": "9.1 Introduction to Version Control\n\n\n\n\n\nEvery file in the scientific process changes. Manuscripts are edited. Figures get revised. Code gets fixed when bugs are discovered. Sometimes those fixes lead to even more bugs, leading to more changes in the code base. Data files get combined together. Sometimes those same files are split and combined again. In just one research project, we can expect thousands of changes to occur.\nThese changes are important to track, and yet, we often use simplistic file names to do so. Many of us have experienced renaming a document or script multiple times with the ingenuine addition of “final” to the file name (like the comic above demonstrates).\nYou might think there is a better way, and you’d be right: version control. Version control provides an organized and transparent way to track changes in code and additional files. This practice was designed for software development, but is easily applicable to scientific programming.\nThere are many benefits to using a version control software including:\n\nMaintain a history of your research project’s development while keeping your workspace clean\nFacilitate collaboration and transparency when working on teams\nExplore bugs or new features without disrupting your team members’ work\nand more!\n\nThe version control system we’ll be diving into is Git, the most widely used modern version control system in the world."
  },
  {
    "objectID": "session_09.html#introduction-to-git-github",
    "href": "session_09.html#introduction-to-git-github",
    "title": "9  Intro to Git and GitHub",
    "section": "9.2 Introduction to Git + GitHub",
    "text": "9.2 Introduction to Git + GitHub\nBefore diving into the details of Git and how to use it, let’s start with a motivating example that’s representative of the types of problems Git can help us solve.\n\n9.2.1 A Motivating Example\nSay, for example, you’re working on an analysis in R and you’ve got it into a state you’re pretty happy with. We’ll call this version 1:\n\n\n\nYou come into the office the following day and you have an email from your boss, “Hey, you know what this model needs?”\n\n\n\nYou’re not entirely sure what she means but you figure there’s only one thing she could be talking about: more cowbell. So you add it to the model in order to really explore the space.\nBut you’re worried about losing track of the old model so, instead of editing the code in place, you comment out the old code and put as serious a warning as you can muster in a comment above it.\n\n\n\nCommenting out code you don’t want to lose is something probably all of us have done at one point or another but it’s really hard to understand why you did this when you come back years later or you when you send your script to a colleague. Luckily, there’s a better way: Version control. Instead of commenting out the old code, we can change the code in place and tell Git to commit our change. So now we have two distinct versions of our analysis and we can always see what the previous version(s) look like.\n\n\n\nYou may have noticed something else in the diagram above: Not only can we save a new version of our analysis, we can also write as much text as we like about the change in the commit message. In addition to the commit message, Git also tracks who, when, and where the change was made.\nImagine that some time has gone by and you’ve committed a third version of your analysis, version 3, and a colleague emails with an idea: What if you used machine learning instead?\n\n\n\nMaybe you’re not so sure the idea will work out and this is where a tool like Git shines. Without a tool like Git, we might copy analysis.R to another file called analysis-ml.R which might end up having mostly the same code except for a few lines. This isn’t particularly problematic until you want to make a change to a bit of shared code and now you have to make changes in two files, if you even remember to.\nInstead, with Git, we can start a branch. Branches allow us to confidently experiment on our code, all while leaving the old code in tact and recoverable.\n\n\n\nSo you’ve been working in a branch and have made a few commits on it and your boss emails again asking you to update the model in some way. If you weren’t using a tool like Git, you might panic at this point because you’ve rewritten much of your analysis to use a different method but your boss wants change to the old method.\n\n\n\nBut with Git and branches, we can continue developing our main analysis at the same time as we are working on any experimental branches. Branches are great for experiments but also great for organizing your work generally.\n\n\n\nAfter all that hard work on the machine learning experiment, you and your colleague could decide to scrap it. It’s perfectly fine to leave branches around and switch back to the main line of development but we can also delete them to tidy up.\n\n\n\nIf, instead, you and your colleague had decided you liked the machine learning experiment, you could also merge the branch with your main development line. Merging branches is analogous to accepting a change in Word’s Track Changes feature but way more powerful and useful.\n\n\n\nA key takeaway here is that Git can drastically increase your confidence and willingness to make changes to your code and help you avoid problems down the road. Analysis rarely follows a linear path and we need a tool that respects this.\n\n\n\nFinally, imagine that, years later, your colleague asks you to make sure the model you reported in a paper you published together was actually the one you used. Another really powerful feature of Git is tags which allow us to record a particular state of our analysis with a meaningful name. In this case, we are lucky because we tagged the version of our code we used to run the analysis. Even if we continued to develop beyond commit 5 (above) after we submitted our manuscript, we can always go back and run the analysis as it was in the past.\n\nWith Git we can enhance our workflow:\n\nEliminate the need for cryptic filenames and comments to track our work.\nProvide detailed descriptions of our changes through commits, making it easier to understand the reasons behind code modifications.\nWork on multiple branches simultaneously, allowing for parallel development, and optionally merge them together.\nUse commits to access and even execute older versions of our code.\nAssign meaningful tags to specific versions of our code.\nAdditionally, Git offers a powerful distributed feature. Multiple individuals can work on the same analysis concurrently on their own computers, with the ability to merge everyone’s changes together.\n\n\n\n\n9.2.2 What exactly are Git and GitHub?\n\nGit:\n\nan open-source distributed version control software\ndesigned to manage the versioning and tracking of source code files and project history\noperates locally on your computer, allowing you to create repositories, and track changes\nprovides features such as committing changes, branching and merging code, reverting to previous versions, and managing project history\nworks directly with the files on your computer and does not require a network connection to perform most operations\nprimarily used through the command-line interface (CLI, e.g. Terminal), but also has various GUI tools available (e.g. RStudio IDE)\n\n\n\n\n\n\nGitHub:\n\nonline platform and service built around Git\nprovides a centralized hosting platform for Git repositories\nallows us to store, manage, and collaborate on their Git repositories in the cloud\noffers additional features on top of Git, such as a web-based interface, issue tracking, project management tools, pull requests, code review, and collaboration features\nenables easy sharing of code with others, facilitating collaboration and contribution to open source projects\nprovides a social aspect, allowing users to follow projects, star repositories, and discover new code\n\n\n\n\n\n\n\n9.2.3 Understanding how local working files, Git, and GitHub all work together\nIt can be a bit daunting to understand all the moving parts of the Git / GitHub life cycle (i.e. how file changes are tracked locally within repositories, then stored for safe-keeping and collaboration on remote repositories, then brought back down to a local machine(s) for continued development). It gets easier with practice, but we’ll explain (first in words, then with an illustration) at a high-level how things work:\n\n9.2.3.1 What is the difference between a “normal” folder vs. a Git repository\nWhether you’re a Mac or a PC user, you’ll likely have created a folder at some point in time for organizing files. Let’s pretend that we create a folder, called myFolder/, and add two files: myData.csv and myAnalysis.R. The contents of this folder are not currently version controlled – meaning, for example, that if we make some changes to myAnalysis.R that don’t quite work out, we have no way of accessing or reverting back to a previous version of myAnalysis.R (without remembering/rewriting things, of course).\nGit allows you to turn any “normal” folder, like myFolder/, into a Git repository – you’ll often see/hear this referenced as “initializing a Git repository”. When you initialize a folder on your local computer as a Git repository, a hidden .git/ folder is created within that folder (e.g. myFolder/.git/) – this .git/ folder is the Git repository. As you use Git commands to capture versions or “snapshots” of your work, those versions (and their associated metadata) get stored within the .git/ folder. This allows you to access and/or recover any previous versions of your work. If you delete .git/, you delete your project’s history.\nHere is our example folder / Git repository represented visually:\n\n\n\n\n\n\n\n\n\n\n\n\n\n9.2.3.2 How do I actually tell Git to preserve versions of my local working files?\nGit was built as a command-line tool, meaning we can use Git commands in the command line (e.g. Terminal, Git Bash, etc.) to take “snapshots” of our local working files through time. Alternatively, RStudio provides buttons that help to easily execute these Git commands.\nGenerally, that workflow looks something like this:\n\nMake changes to a file(s) (e.g. myAnalysis.R) in your working directory.\nStage the file(s) using git add myAnalysis.R (or git add . to stage multiple changed files at once). This lets Git know that you’d like to include the file(s) in your next commit.\nCommit the file(s) using git commit -m \"a message describing my changes\". This records those changes (along with a descriptive message) as a “snapshot” or version in the local repository (i.e. the .git/ folder).\n\n\n\n9.2.3.3 My versioned work is on my local computer, but I want to send it to GitHub. How?\nThe last step is synchronizing the changes made to our local repository with a remote repository (oftentimes, this remote repository is stored on GitHub). The git push command is used to send local commits up to a remote repository. The git pull command is used to fetch changes from a remote repository and merge them into the local repository – pulling will become a regular part of your workflow when collaborating with others, or even when working alone but on different machines (e.g. a laptop at home and a desktop at the office).\nThe processes described in the above sections (i.e. making changes to local working files, recording “snapshots” of them to create a versioned history of changes in a local Git repository, and sending those versions from our local Git repository to a remote repository (which is oftentimes on GitHub)) is illustrated using islands, buildings, bunnies, and packages in the artwork, below:\nA basic git workflow represented as two islands, one with “local repo” and “working directory”, and another with “remote repo.” Bunnies move file boxes from the working directory to the staging area, then with Commit move them to the local repo. Bunnies in rowboats move changes from the local repo to the remote repo (labeled “PUSH”) and from the remote repo to the working directory (labeled “PULL”).\n\n\n\n\nArtwork by Allison Horst\n\n\n\n\n\n9.2.4 Let’s Look at a GitHub Repository\nThis screen shows the copy of a repository stored on GitHub, with its list of files, when the files and directories were last modified, and some information on who made the most recent changes.\n\n\n\nIf we drill into the “commits” for the repository, we can see the history of changes made to all of the files. Looks like kellijohnson was working on the project and fixing errors in December:\n\n\n\nAnd finally, if we drill into one of the changes made on December 20, we can see exactly what was changed in each file:\n\n\n\nTracking these changes, how they relate to released versions of software and files is exactly what Git and GitHub are good for. And we will show how they can really be effective for tracking versions of scientific code, figures, and manuscripts to accomplish a reproducible workflow.\n\n\n9.2.5 Git Vocabulary & Commands\nWe know the world of Git and GitHub can be daunting. Use these tables as references while you use Git and GitHub, and we encourage you to build upon this list as you become more comfortable with these tools.\nThis table contains essential terms and commands that complement intro to Git skills. They will get you far on personal and individual projects.\n\nEssential Git Commands\n\n\n\n\n\n\n\nTerm\nGit Command(s)\nDefinition\n\n\n\n\nAdd/Stage\ngit add [file]\nStaging marks a modified file in its current version to go into your next commit snapshot. You can also stage all modified files at the same time using git add .\n\n\nCommit\ngit commit\nRecords changes to the repository.\n\n\nCommit Message\ngit commit -m \"my commit message\"\nRecords changes to the repository and include a descriptive message (you should always include a commit message!).\n\n\nFetch\ngit fetch\nRetrieves changes from a remote repository but does not merge them into your local working file(s).\n\n\nPull\ngit pull\nRetrieves changes from a remote repository and merges them into your local working file(s).\n\n\nPush\ngit push\nSends local commits to a remote repository.\n\n\nStatus\ngit status\nShows the current status of the repository, including (un)staged files and branch information.\n\n\n\nThis table includes more advanced Git terms and commands that are commonly used in both individual and collaborative projects.\n\nAdvanced Git Commands\n\n\n\n\n\n\n\nTerm\nGit Command(s)\nDefinition\n\n\n\n\nBranch\ngit branch\nLists existing branches or creates a new branch.\n\n\nCheckout\ngit checkout [branch]\nSwitches to a different branch or restores files from a specific commit.\n\n\nClone\ngit clone [repository]\nCreates a local copy of a remote repository.\n\n\nDiff\ngit diff\nShows differences between files, commits, or branches.\n\n\nFork\n-\nCreates a personal copy of a repository under your GitHub account for independent development.\n\n\nLog\ngit log\nDisplays the commit history of the repository.\n\n\nMerge\ngit merge [branch]\nIntegrates changes from one branch into another branch.\n\n\nMerge Conflict\n-\nOccurs when Git cannot automatically merge changes from different branches, requiring manual resolution.\n\n\nPull Request (PR)\n-\nA request to merge changes from a branch into another branch, typically in a collaborative project.\n\n\nRebase\ngit rebase\nIntegrates changes from one branch onto another by modifying commit history.\n\n\nRemote\ngit remote\nManages remote repositories linked to the local repository.\n\n\nRepository\ngit init\nA directory where Git tracks and manages files and their versions.\n\n\nStash\ngit stash\nTemporarily saves changes that are not ready to be committed.\n\n\nTag\ngit tag\nAssigns a label or tag to a specific commit.\n\n\n\nGit has a rich set of commands and features, and there are many more terms beyond either table. Learn more by visiting the git documentation."
  },
  {
    "objectID": "session_09.html#exercise-1-create-a-remote-repository-on-github",
    "href": "session_09.html#exercise-1-create-a-remote-repository-on-github",
    "title": "9  Intro to Git and GitHub",
    "section": "9.3 Exercise 1: Create a remote repository on GitHub",
    "text": "9.3 Exercise 1: Create a remote repository on GitHub\n\n\n\n\n\n\nSetup\n\n\n\n\nLogin to GitHub\nClick the New repository button\nName it {FIRSTNAME}_test\nAdd a short description\nCheck the box to add a README.md file\nAdd a .gitignore file using the R template\nSet the LICENSE to Apache 2.0\n\n\n\nIf you were successful, it should look something like this:\n\n\n\n\n\n\nYou’ve now created your first repository! It has a couple of files that GitHub created for you: README.md, LICENSE, and .gitignore.\n\n\n\n\n\n\nREADME.md files are used to share important information about your repository\n\n\n\nYou should always add a README.md to the root directory of your repository – it is a markdown file that is rendered as HTML and displayed on the landing page of your repository. This is a common place to include any pertinent information about what your repository contains, how to use it, etc.\n\n\n\n\n\n\n\nFor simple changes to text files, such as the README.md, you can make edits directly in the GitHub web interface.\n\n\n\n\n\n\nChallenge\n\n\n\nNavigate to the README.md file in the file listing, and edit it by clicking on the pencil icon (top right of file). This is a regular Markdown file, so you can add markdown text. Add a new level-2 header called “Purpose” and add some bullet points describing the purpose of the repo. When done, add a commit message, and hit the Commit changes button.\n\n\n\n\n\n \n\nCongratulations, you’ve now authored your first versioned commit! If you navigate back to the GitHub page for the repository, you’ll see your commit listed there, as well as the rendered README.md file.\n\n\n\n \n\nThe GitHub repository landing page provides us with lots of useful information. To start, we see:\n\nall of the files in the remote repository\nwhen each file was last edited\nthe commit message that was included with each file’s most recent commit (which is why it’s important to write good, descriptive commit messages!)\n\nAdditionally, the header above the file listing shows the most recent commit, along with its commit message, and a unique ID (assigned by Git) called a SHA. The SHA (aka hash) identifies the specific changes made, when they were made, and by who. If you click on the SHA, it will display the set of changes made in that particular commit.\n\n\n\n\n\n\nWhat should I write in my commit message?\n\n\n\nWriting effective Git commit messages is essential for creating a meaningful and helpful version history in your repository. It is crucial to avoid skipping commit messages or resorting to generic phrases like “Updates.” When it comes to following best practices, there are several guidelines to enhance the readability and maintainability of the codebase.\nHere are some guidelines for writing effective Git commit messages:\n\nBe descriptive and concise: Provide a clear and concise summary of the changes made in the commit. Aim to convey the purpose and impact of the commit in a few words.\nUse imperative tense: Write commit messages in the imperative tense, as if giving a command. For example, use “Add feature” instead of “Added feature” or “Adding feature.” This convention aligns with other Git commands and makes the messages more actionable.\nSeparate subject and body: Start with a subject line, followed by a blank line, and then provide a more detailed explanation in the body if necessary. The subject line should be a short, one-line summary, while the body can provide additional context, motivation, or details about the changes.\nLimit the subject line length: Keep the subject line within 50 characters or less. This ensures that the commit messages are easily scannable and fit well in tools like Git logs.\nCapitalize and punctuate properly: Begin the subject line with a capital letter and use proper punctuation. This adds clarity and consistency to the commit messages.\nFocus on the “what” and “why”: Explain what changes were made and why they were made. Understanding the motivation behind a commit helps future researchers and collaborators (including you!) comprehend its purpose.\nUse present tense for subject, past tense for body: Write the subject line in present tense as it represents the current state of the codebase. Use past tense in the body to describe what has been done.\nReference relevant issues: If the commit is related to a specific issue or task, include a reference to it. For example, you can mention the issue number or use keywords like “Fixes,” “Closes,” or “Resolves” followed by the issue number."
  },
  {
    "objectID": "session_09.html#exercise-2-clone-your-repository-and-use-git-locally-in-rstudio",
    "href": "session_09.html#exercise-2-clone-your-repository-and-use-git-locally-in-rstudio",
    "title": "9  Intro to Git and GitHub",
    "section": "9.4 Exercise 2: clone your repository and use Git locally in RStudio",
    "text": "9.4 Exercise 2: clone your repository and use Git locally in RStudio\nCurrently, our repository just exists on GitHub as a remote repository. It’s easy enough to make changes to things like our README.md file (as demonstrated above), from the web browser, but that becomes a lot harder (and discouraged) for scripts and other code files. In this exercise, we’ll bring a copy of this remote repository down to our local computer (aka clone this repository) so that we can work comfortably in RStudio.\n\n\n\n\n\n\nAn important distinction\n\n\n\nWe refer to the remote copy of the repository that is on GitHub as the origin repository (the one that we cloned from), and the copy on our local computer as the local repository.\n\n\nStart by clicking the green Code button (top right of your file listing) and copying the URL to your clipboard (this URL represents the repository location):\n\n\n\n\n\n\n\n\nRStudio makes working with Git and version controlled files easy – to do so, you’ll need to be working within an R project folder. The following steps will look similar to those you followed when first creating an R Project (see Appendix), with a slight difference. Follow the instructions in the Setup box below to clone your remote repository to your local computer in RStudio:\n\n\n\n\n\n\nSetup\n\n\n\n\nClick File &gt; New Project\nSelect Version Control and paste the remote repository URL (which should be copied to your clipboard) in the Repository ULR field\nPress Tab, which will auto-fill the Project directory name field with the same name as that of your remote repo – while you can name the local copy of the repository anything, it’s typical (and highly recommended) to use the same name as the GitHub repository to maintain the correspondence\n\n\n\n\n\n\n\n\n\nOnce you click Create Project, a new RStudio window will open with all of the files from the remote repository copied locally. Depending on how your version of RStudio is configured, the location and size of the panes may differ, but they should all be present – you should see a Git tab, as well as the Files tab, where you can view all of the files copied from the remote repo to this local repo.\n\n\n\n\nYou’ll note that there is one new file sam_test.Rproj, and three files that we created earlier on GitHub (.gitignore, LICENSE, and README.md).\nIn the Git tab, you’ll note that the one new file, sam_test.Rproj, is listed. This Git tab is the status pane that shows the current modification status of all of the files in the repository. Here, we see sam_test.Rproj is preceded by a ?? symbol to indicate that the file is currently untracked by Git. This means that we have not yet committed this file using Git (i.e. Git knows nothing about the file; hang tight, we’ll commit this file soon so that it’s tracked by Git). As you make version control decisions in RStudio, these icons will change to reflect the current version status of each of the files.\nInspect the history. Click on the History button in the Git tab to show the log of changes that have occurred – these changes will be identical to what we viewed on GitHub. By clicking on each row of the history, you can see exactly what was added and changed in each of the two commits in this repository.\n\n\n\n\n\n\n\n\nChallenge\n\n\n\n\nMake a change to the README.md file – this time from RStudio – then commit the README.md change\nAdd a new section to your README.md called “Creator” using a level-2 header. Under it include some information about yourself. Bonus: Add some contact information and link your email using Markdown syntax.\n\n\n\nOnce you save, you’ll immediately see the README.md file show up in the Git tab, marked as a modification. Select the file in the Git tab, and click Diff to see the changes that you saved (but which are not yet committed to your local repository). Newly made changes are highlighted in green.\n\n\n\n\nCommit the changes. To commit the changes you made to the README.md file using RStudio’s GUI (Graphical User Interface), rather than the command line:\n\nStage (aka add) README.md by clicking the check box next to the file name – this tells Git which changes you want included in the commit and is analogous to using the git command, git add README.md, in the command line\nCommit README.md by clicking the Commit button and providing a descriptive commit message in the dialog box. Press the Commit button once you’re satisfied with your message. This is analogous to using the git command, git commit -m \"my commit message\", in the command line.\n\n\n\nA few notes about our local repository’s state:\n\nWe still have a file, sam_test.Rproj, that is listed as untracked (denoted by ?? in the Git tab).\nYou should see a message at the top of the Git tab that says, Your branch is ahead of ‘origin/main’ by 1 commit., which tells us that we have 1 commit in the local repository, but that commit has not yet been pushed up to the origin repository (aka remote repository on GitHub).\n\nCommit the remaining project file by staging/adding and committing it with an informative commit message.\n\n\nWhen finished, you’ll see that no changes remain in the Git tab, and the repository is clean.\nInspect the history. Note that under Changes, the message now says:\nYour branch is ahead of ‘origin/main’ by 2 commits.\nThese are the two commits that we just made, but have not yet been pushed to GitHub.\nClick on the History button to see a total of four commits in the local repository (the two we made directly to GitHub via the web browser and the two we made in RStudio).\n\n\nPush these changes to GitHub. Now that we’ve made and committed changes locally, we can push those changes to GitHub using the Push button. This sends your changes to the remote repository (on GitHub) leaving your repository in a totally clean and synchronized state (meaning your local repository and remote repository should look the same).\n\n\n\n\n\n\nIf you are prompted to provide your GitHub username and password when Pushing…\n\n\n\nit’s a good indicator that you did not set your GitHub Personal Access Token (PAT) correctly. You can redo the steps outlined in the GitHub Authentication section of the Appendix to (re)set your PAT, then Push again.\n\n\n\n\n\n\nIf you look at the History pane again, you’ll notice that the labels next to the most recent commit indicate that both the local repository (HEAD) and the remote repository (origin/HEAD) are pointing at the same version in the history. If we look at the commit history on GitHub, all the commits will be shown there as well.\n\n\n \n\n\n\n\n\n\nLast thing, some Git configuration to surpress warning messages\n\n\n\nGit version 2.27 includes a new feature that allows users to specify the default method for integrating changes from a remote repository into a local repository, without receiving a warning (this warning is informative, but can get annoying). To suppress this warning for this repository only we need to configure Git by running this line of code in the Terminal:\n\ngit config pull.rebase false\n\npull.rebase false is a default strategy for pulling where Git will first try to auto-merge the files. If auto-merging is not possible, it will indicate a merge conflict (more on resolving merge conflicts in Chapter 11).\nNote: Unlike when we first configured Git (see Appendix), we do not include the --global flag here (e.g. git config --global pull.rebase false). This sets this default strategy for this repository only (rather than globally for all your repositories). We do this because your chosen/default method of grabbing changes from a remote repository (e.g. pulling vs. rebasing) may change depending on collaborator/workflow preference."
  },
  {
    "objectID": "session_09.html#exercise-3-setting-up-git-on-an-existing-project",
    "href": "session_09.html#exercise-3-setting-up-git-on-an-existing-project",
    "title": "9  Intro to Git and GitHub",
    "section": "9.5 Exercise 3: Setting up Git on an existing project",
    "text": "9.5 Exercise 3: Setting up Git on an existing project\nThere are a number of different workflows for creating version-controlled repositories that are stored on GitHub. We started with Exercise 1 and Exercise 2 using one common approach: creating a remote repository on GitHub first, then cloning that repository to your local computer (you used your {FIRSTNAME}_test repo).\nHowever, you may find yourself in the situation where you have an existing directory (i.e. a “normal” folder) of code that you want to make a Git repository out of, and then send it to GitHub. In this last exercise, we will practice this workflow using your training_{USERNAME} project.\nFirst, switch to your training_{USERNAME} project using the RStudio project dropdown menu. The project drop down menu is in the upper right corner of your RStudio pane. Click the drop down next to your project name ({FIRSTNAME}_test), and then select the training_{USERNAME} project from the RECENT PROJECTS list.\n\n\n\n\n\n\nThere are a few approaches for turning an existing project folder into a Git repository, then sending it to GitHub – if you’re an R-user, the simplest way is to use the {usethis} package, which is built to automate tasks involved with project setup and development. However, you can also initialize a local git repository and set the remote repository from the command line (a language-agnostic workflow). Steps for both approaches are included below (demonstrated using your training_{USERNAME} project):\n\nUsing R & {usethis}Using the command line\n\n\n\nInstall the {usethis} package (if you haven’t done so already) by running the following in your Console:\n\n\ninstall.packages(\"usethis\")\n\n\nInitialize training_{USERNAME} as a Git repository by running usethis::use_git() in the Console. Choose yes when asked if it’s okay to commit any uncommitted files. Choose yes again if asked to restart R. Once complete, you should see the Git tab appear in your top left pane in RStudio and a .gitignore file appear in your Files tab.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.gitignore files allow you to specify which files/folders you don’t want Git to track\n\n\n\nA .gitignore file is automatically created in the root directory of your project when you initialize it as a Git repository. You’ll notice that there are already some R / R Project-specific files that have been added by default.\nWhy is this useful? For many reasons, but possibly the greatest use-case is adding large files (GitHub has a file size limit of 2 GB) or files with sensitive information (e.g. keys, tokens) that you don’t want to accidentally push to GitHub.\nHow do I do this? Let’s say I create a file with sensitive information that I don’t want to push to GitHub. I can add a line to my .gitignore file:\n\n# added by default when I initalized my RProj as a Git Repository\n.Rproj.user\n.Rhistory\n.Rdata\n.httr-oauth\n.DS_Store\n.quarto\n\n# add file so that it doesn't get pushed to the remote repo (on GitHub); \ncontains_sensitive_info.R\n\nIf this file is currently untracked by Git, it should appear in my Git tab. Once I add it to the .gitignore and save the modified .gitignore file, you should see contains_sensitive_info.R disappear from the Git tab, and a modified .gitignore (denoted by a blue M) appear. Stage/commit/push this modified .gitignore file.\n\n\n\nCreate an upstream remote repository on GitHub by running usethis::use_github() in the Console. Your web browser should open up to your new GitHub repository, with the same name as your local Git repo/R Project.\n\n\n\n\n\n\n\n\n\n\n\nEnsure that your default branch is named main rather than master by:\n\nrunning git branch in the Terminal to list all your branches (you should currently only have one, which is your default)\nif it’s named master, run the following line in the Console to update it\n\n\n\nusethis::git_default_branch_rename(from = \"master\", to = \"main\")\n\nYou can verify that your update worked by running git branch once more in the Terminal.\n\n\n\n\n\n\nWhy are we doing this?\n\n\n\nThe racist “master” terminology for git branches motivates us to update our default branch to “main” instead.\nThere is a push across platforms and software to update this historical default branch name from master to main. GitHub has already done so – you may have noticed that creating a remote repository first (like we did in Exercises 1 & 2) results in a default branch named main. Depending on your version of Git, however, you may need to set update the name manually when creating a local git repository first (as we’re doing here).\n\n\n\nYou’re now ready to edit, stage/add, commit, and push files to GitHub as practiced earlier!\n\n\n\n\n\n\n\nChallenge: add a README.md file to training_{USERNAME}\n\n\n\nGitHub provides a button on your repo’s landing page for quickly adding a README.md file. Click the Add a README button and use markdown syntax to create a README.md. Commit the changes to your repository.\nGo to your local repository (in RStudio) and pull the changes you made.\n\n\n\n\nWhile we’ll be using the RStudio Terminal here, you can use any command-line interface (e.g. Mac Terminal, Git Bash, etc.) that allows for git interactions (if you plan to use a command-line interface that is not the RStudio Terminal, make sure to navigate to your project directory (e.g. using cd file/path/to/project/directory) before initializing your repository.\n\nInitialize training_{USERNAME} as a Git repository by running git init in the Terminal. You should get a message that says something like:\n\n\nInitialized empty Git repository in /home/username/training_username/.git/\n\n\n\n\n\n\n\nYou may have to quit and reopen your RStudio session on the server for the Git tab to appear\n\n\n\nYou’ll likely need to help included-crab along in recognizing that this R Project has been initialized as a git repository – click Session &gt; Quit Session… &gt; New Session &gt; choose training_{USERNAME} to reopen your project.\n\n\nOnce complete, you should see the Git tab appear in your top left pane in RStudio and a .gitignore file appear in your Files tab.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.gitignore files allow you to specify which files/folders you don’t want Git to track\n\n\n\nA .gitignore file is automatically created in the root directory of your project when you initialize it as a Git repository. You’ll notice that there are already some R / R Project-specific files that have been added by default.\nWhy is this useful? For many reasons, but possibly the greatest use-case is adding large files (GitHub has a file size limit of 2 GB) or files with sensitive information (e.g. keys, tokens) that you don’t want to accidentally push to GitHub.\nHow do I do this? Let’s say I create a file with sensitive information that I don’t want to push to GitHub. I can add a line to my .gitignore file:\n\n# added by default when I initalized my RProj as a Git Repository\n.Rproj.user\n.Rhistory\n.Rdata\n.httr-oauth\n.DS_Store\n.quarto\n\n# add file so that it doesn't get pushed to the remote repo (on GitHub); \ncontains_sensitive_info.R\n\nIf this file is currently untracked by Git, it should appear in my Git tab. Once I add it to the .gitignore and save the modified .gitignore file, you should see contains_sensitive_info.R disappear from the Git tab, and a modified .gitignore (denoted by a blue M) appear. Stage/commit/push this modified .gitignore file.\n\n\n\nEnsure that your default branch is named main rather than master by:\n\nrunning git branch in the Terminal to list all your branches (you should currently only have one, which is your default)\nif it’s named master, run the following line in the Terminal to update it\n\n\n\n# for Git version 2.28+ (check by running `git --version`)\n# this sets the default branch name to `main` for any new repos moving forward\ngit config --global init.defaultBranch main\n\n# for older versions of Git\n# this sets the default branch name to `main` ONLY for this repo \ngit branch -m master main\n\nYou can verify that your update worked by running git branch once more in the Terminal.\n\n\n\n\n\n\nWhy are we doing this?\n\n\n\nThe racist “master” terminology for git branches motivates us to update our default branch to “main” instead.\nThere is a push across platforms and software to update this historical default branch name from master to main. GitHub has already done so – you may have noticed that creating a remote repository first (like we did in Exercises 1 & 2) results in a default branch named main. Depending on your version of Git, however, you may need to set update the name manually when creating a local git repository first (as we’re doing here).\n\n\n\nStage/Add your files. It’s helpful to first run git status to check the state of your local repository (particularly if you aren’t using RStudio / have access to a GUI with a Git tab-esque feature) – this will tell you which files have been modified or are untracked and that are currently unstaged (in red). What appears here should look just like what appears in the Git tab:\n\n\n\n\n\n\n\n\n\n\nRun git add . in the Terminal to stage all files at once (or git add {FILENAME} to stage individual files). Running git status again will show you which files have been staged (in green). You may have to refresh your Git tab to see the change in state reflected in the GUI.\n\n\n\n\n\n\n\n\n\n\nCommit your files by running git commit -m \"an informative commit message\" in the Terminal. Refreshing your Git tab will cause them to disappear (just as they do when you commit using RStudio’s GUI buttons). You can run git log in the Terminal to see a history of your past commits (currently, we only have this one).\n\n\n\n\n\n\n\n\n\n\n\nCreate an empty remote repository by logging into GitHub and creating a new repository, following the same steps as in Exercise 1. IMPORTANTLY, DO NOT initialize your remote repo with a README license, or .gitignore file – doing so now can lead to merge conflicts. We can add them after our local and remote repos are linked. Name your remote repository the same as your local repository (i.e. training_{USERNAME}).\nLink your remote (GitHub) repository to your local Git repository. Your empty GitHub repo conveniently includes instructions for doing so. Copy the code under push an existing repository from the command line to your clipboard, paste into your RStudio Terminal, and press return/enter.\n\n\n\n\n\n\n\n\n\n\nThese commands do three things:\n\nAdds the GitHub repository as the remote repository (i.e. links your local repo to the remote repo)\nRenames the default branch to main\nPushes the main branch to the remote GitHub repository\n\nHead back to your browser and refresh your GitHub repository page to see your files appear!\n\nYou’re now ready to edit, stage/add, commit, and push files to GitHub as practiced earlier!\n\n\n\n\n\n\n\nChallenge: add a README.md file to training_{USERNAME}\n\n\n\nGitHub provides a button on your repo’s landing page for quickly adding a README.md file. Click the Add a README button and use markdown syntax to create a README.md. Commit the changes to your repository.\nGo to your local repository (in RStudio) and pull the changes you made."
  },
  {
    "objectID": "session_09.html#go-further-with-git",
    "href": "session_09.html#go-further-with-git",
    "title": "9  Intro to Git and GitHub",
    "section": "9.6 Go further with Git",
    "text": "9.6 Go further with Git\nThere’s a lot we haven’t covered in this brief tutorial. There are some great and much longer tutorials that cover advanced topics, such as:\n\nUsing Git on the command line\nResolving conflicts\nBranching and merging\nPull requests versus direct contributions for collaboration\nUsing .gitignore to protect sensitive data\nGitHub Issues - how to use them for project management and collaboration\n\nand much, much more."
  },
  {
    "objectID": "session_09.html#git-resources",
    "href": "session_09.html#git-resources",
    "title": "9  Intro to Git and GitHub",
    "section": "9.7 Git resources",
    "text": "9.7 Git resources\n\nPro Git Book\nHappy Git and GitHub for the useR\nGitHub Documentation\nLearn Git Branching is an interactive tool to learn Git on the command line\nSoftware Carpentry Version Control with Git\nBitbucket’s tutorials on Git Workflows"
  },
  {
    "objectID": "session_10.html#learning-objectives",
    "href": "session_10.html#learning-objectives",
    "title": "10  Cleaning & Wrangling Data",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nIntroduce dplyr and tidyr functions to clean and wrangle data for analysis\nLearn about the Split-Apply-Combine strategy and how it applies to data wrangling\nDescribe the difference between wide vs. long table formats and how to convert between them"
  },
  {
    "objectID": "session_10.html#introduction",
    "href": "session_10.html#introduction",
    "title": "10  Cleaning & Wrangling Data",
    "section": "10.1 Introduction",
    "text": "10.1 Introduction\nThe data we get to work with are rarely, if ever, in the format we need to do our analyses. It’s often the case that one package requires data in one format, while another package requires the data to be in another format. To be efficient analysts, we should have good tools for reformatting data for our needs so we can do further work like making plots and fitting models. The dplyr and tidyr R packages provide a fairly complete and extremely powerful set of functions for us to do this reformatting quickly. Learning these tools well will greatly increase your efficiency as an analyst.\nLet’s look at two motivating examples.\n\n\n\n\n\n\nExample 1\n\n\n\nSuppose you have the following data.frame called length_data with data about salmon length and want to calculate the average length per year.\n\n\n\nyear\nlength_cm\n\n\n\n\n1990\n5.673318\n\n\n1991\n3.081224\n\n\n1991\n4.592696\n\n\n1992\n4.381523\n\n\n1992\n5.597777\n\n\n1992\n4.900052\n\n\n\nThe dplyr R library provides a fast and powerful way to do this calculation in a few lines of code:\n\nlength_data %&gt;% \n  group_by(year) %&gt;% \n  summarize(mean_length_cm = mean(length_cm))\n\n\n\n\n\n\n\n\n\nExample 2\n\n\n\nAnother process we often need to do is to “reshape” our data. Consider the following table that is in what we call “wide” format:\n\n\n\nsite\n1990\n1991\n…\n1993\n\n\n\n\ngold\n100\n118\n…\n112\n\n\nlake\n100\n118\n…\n112\n\n\n…\n…\n…\n…\n…\n\n\ndredge\n100\n118\n…\n112\n\n\n\nYou are probably familiar with data in the above format, where values of the variable being observed are spread out across columns. In this example we have a different column per year. This wide format works well for data entry and sometimes works well for analysis but we quickly outgrow it when using R (and know it is not tidy data!). For example, how would you fit a model with year as a predictor variable? In an ideal world, we’d be able to just run lm(length ~ year). But this won’t work on our wide data because lm() needs length and year to be columns in our table.\nThe tidyr package allows us to quickly switch between wide format and long format using the pivot_longer() function:\n\nsite_data %&gt;% \n  pivot_longer(-site, names_to = \"year\", values_to = \"length\")\n\n\n\n\nsite\nyear\nlength\n\n\n\n\ngold\n1990\n101\n\n\nlake\n1990\n104\n\n\ndredge\n1990\n144\n\n\n…\n…\n…\n\n\ndredge\n1993\n145\n\n\n\n\n\nThis lesson will cover examples to learn about the functions you’ll most commonly use from the dplyr and tidyr packages:\n\nCommon dplyr functions\n\n\n\n\n\n\nFunction name\nDescription\n\n\n\n\nmutate()\nCreates modify and deletes columns\n\n\ngroup_by()\nGroups data by one or more variables\n\n\nsummarise()\nSummaries each group down to one row\n\n\nselect()\nKeep or drop columns using their names\n\n\nfilter()\nKeeps rows that matches conditions\n\n\narrange()\norder rows using columns variable\n\n\nrename()\nRename a column\n\n\n\n\nCommon tidyr functions\n\n\n\n\n\n\nFunction name\nDescription\n\n\n\n\npivot_longer()\ntransforms data from a wide to a long format\n\n\npivot_wider()\ntransforms data from a long to a wide format\n\n\nunite()\nUnite multiple columns into one by pasting strings together\n\n\nseparate()\nSeparate a character column into multiple columns with a regular expression or numeric locations"
  },
  {
    "objectID": "session_10.html#data-cleaning-basics",
    "href": "session_10.html#data-cleaning-basics",
    "title": "10  Cleaning & Wrangling Data",
    "section": "10.2 Data cleaning basics",
    "text": "10.2 Data cleaning basics\nTo demonstrate, we’ll be working with a tidied up version of a data set from Alaska Department of Fish & Game containing commercial catch data from 1878-1997. The data set and reference to the original source can be found at its public archive.\n\n\n\n\n\n\nSetup\n\n\n\nFirst, open a new Quarto document. Delete everything below the setup chunk, and add a library chunk that calls dplyr, tidyr, and readr\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(readr)\n\n\n\n\n\n\n\n\n\nA note on loading packages\n\n\n\nYou may have noticed the following messages pop up when you ran your library chunk.\nAttaching package: ‘dplyr’\n\nThe following objects are masked from ‘package:stats’:\n\n    filter, lag\n\nThe following objects are masked from ‘package:base’:\n\n    intersect, setdiff, setequal, union\nThese are important messages. They are letting you know that certain functions from the stats and base packages (which are loaded by default when you start R) are masked by different functions with the same name in the dplyr package. It turns out, the order that you load the packages in matters. Since we loaded dplyr after stats, R will assume that if you call filter(), you mean the dplyr version unless you specify otherwise.\nBeing specific about which version of filter(), for example, you call is easy. To explicitly call a function by its unambiguous name, we use the syntax package_name::function_name(...). So, if we wanted to call the stats version of filter() in this Rmarkdown document, I would use the syntax stats::filter(...).\n\n\n\n\n\n\n\n\nNote\n\n\n\nMessages and warnings are important, but we might not want them in our final document. After you have read the packages in, adjust the chunk settings in your library chunk to suppress warnings and messages by adding #| message: false or #| warning: false. Both of these chunk options, when set to false, prevents messages or warnings from appearing in the rendered file.\n\n\nNow that we have introduced some data wrangling libraries, let’s get the data that we are going to use for this lesson.\n\n\n\n\n\n\nSetup\n\n\n\n\nGo to KNB Data Package Alaska commercial salmon catches by management region (1886- 1997)\nFind the data file byerlySalmonByRegion.csv. Right click the “Download” button and select “Copy Link Address”\nPaste the copied URL into the read_csv() function\n\nThe code chunk you use to read in the data should look something like this:\n\ncatch_original &lt;- read_csv(\"https://knb.ecoinformatics.org/knb/d1/mn/v2/object/df35b.302.1\")\n\nNote for Windows users: Keep in mind, if you want to replicate this workflow in your local computer you also need to use the url() function here with the argument method = \"libcurl\".\nIt would look like this:\n\ncatch_original &lt;- read.csv(url(\"https://knb.ecoinformatics.org/knb/d1/mn/v2/object/df35b.302.1\", method = \"libcurl\"))\n\n\n\nThis data set is relatively clean and easy to interpret as-is. While it may be clean, it’s in a shape that makes it hard to use for some types of analyses so we’ll want to fix that first.\n\n\n\n\n\n\nExercise\n\n\n\nBefore we get too much further, spend a minute or two outlining your RMarkdown document so that it includes the following sections and steps:\n\nData Sources\n\nRead in the data\nExplore data\n\nClean and Reshape data\n\nRemove unnecessary columns\nCheck column typing\nReshape data"
  },
  {
    "objectID": "session_10.html#data-exploration",
    "href": "session_10.html#data-exploration",
    "title": "10  Cleaning & Wrangling Data",
    "section": "10.3 Data exploration",
    "text": "10.3 Data exploration\nSimilar to what we did in our Intro to Literate Analysis lesson, it is good practice to skim through the data you just read in. Doing so is important to make sure the data is read as you were expecting and to familiarize yourself with the data.\nSome of the basic ways to explore your data are:\n\n## Prints the column names of my data frame\ncolnames(catch_original)\n\n## First 6 lines of the data frame\nhead(catch_original)\n\n## Summary of each column of data\nsummary(catch_original)\n\n## Prints unique values in a column (in this case, the region)\nunique(catch_original$Region)\n\n## Opens data frame in its own tab to see each row and column of the data\nView(catch_original)"
  },
  {
    "objectID": "session_10.html#about-the-pipe-operator",
    "href": "session_10.html#about-the-pipe-operator",
    "title": "10  Cleaning & Wrangling Data",
    "section": "10.4 About the pipe (%>%) operator",
    "text": "10.4 About the pipe (%&gt;%) operator\nBefore we jump into learning tidyr and dplyr, we first need to explain the pipeline operator %&gt;%.\nBoth the tidyr and the dplyr packages use the pipe operator (%&gt;%), which may look unfamiliar. The pipe is a powerful way to efficiently chain together operations. The pipe will take the output of a previous statement, and use it as the input to the next statement.\nSay you want to both filter() out rows of a data set, and select() certain columns.\nInstead of writing:\n\ndf_filtered &lt;- filter(df, ...)\ndf_selected &lt;- select(df_filtered, ...)\n\nYou can write:\n\ndf_cleaned &lt;- df %&gt;% \n    filter(...) %&gt;%\n    select(...)\n\nIf you think of the assignment operator (&lt;-) as reading like “gets”, then the pipe operator would read like “then”.\nSo you might think of the above chunk being translated as:\n\nThe cleaned data frame gets the original data, and then a filter (of the original data), and then a select (of the filtered data).\n\nThe benefits to using pipes are that you don’t have to keep track of (or overwrite) intermediate data frames. The drawbacks are that it can be more difficult to explain the reasoning behind each step, especially when many operations are chained together. It is good to strike a balance between writing efficient code (chaining operations), while ensuring that you are still clearly explaining, both to your future self and others, what you are doing and why you are doing it.\n\n\n\n\n\n\nQuick Tip\n\n\n\nRStudio has a keyboard shortcut for %&gt;%\n\nWindows: Ctrl + Shift + M\nMac: cmd + shift + M"
  },
  {
    "objectID": "session_10.html#selecting-or-removing-columns-using-select",
    "href": "session_10.html#selecting-or-removing-columns-using-select",
    "title": "10  Cleaning & Wrangling Data",
    "section": "10.5 Selecting or removing columns using select()",
    "text": "10.5 Selecting or removing columns using select()\nWe’re ready to go back to our salmon dataset. The first issue is the extra columns All and notesRegCode. Let’s select only the columns we want, and assign this to a variable called catch_data.\n\ncatch_data &lt;- catch_original %&gt;%\n    select(Region, Year, Chinook, Sockeye, Coho, Pink, Chum)\n\nhead(catch_data)\n\n# A tibble: 6 × 7\n  Region  Year Chinook Sockeye  Coho  Pink  Chum\n  &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 SSE     1886 0             5     0     0     0\n2 SSE     1887 0           155     0     0     0\n3 SSE     1888 0           224    16     0     0\n4 SSE     1889 0           182    11    92     0\n5 SSE     1890 0           251    42     0     0\n6 SSE     1891 0           274    24     0     0\n\n\nMuch better!\nThe select() function also allows you to say which columns you don’t want, by passing unquoted column names preceded by minus (-) signs:\n\ncatch_data &lt;- catch_original %&gt;%\n    select(-All,-notesRegCode)"
  },
  {
    "objectID": "session_10.html#quality-check",
    "href": "session_10.html#quality-check",
    "title": "10  Cleaning & Wrangling Data",
    "section": "10.6 Quality check",
    "text": "10.6 Quality check\nNow that we have the data we are interested in using, we should do a little quality check to see that everything seems as expected. One nice way of doing this is the glimpse() function.\n\ndplyr::glimpse(catch_data)\n\nRows: 1,708\nColumns: 7\n$ Region  &lt;chr&gt; \"SSE\", \"SSE\", \"SSE\", \"SSE\", \"SSE\", \"SSE\", \"SSE\", \"SSE\", \"SSE\",…\n$ Year    &lt;dbl&gt; 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 18…\n$ Chinook &lt;chr&gt; \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"3\", \"4\", \"5\", \"9…\n$ Sockeye &lt;dbl&gt; 5, 155, 224, 182, 251, 274, 207, 189, 253, 408, 989, 791, 708,…\n$ Coho    &lt;dbl&gt; 0, 0, 16, 11, 42, 24, 11, 1, 5, 8, 192, 161, 132, 139, 84, 107…\n$ Pink    &lt;dbl&gt; 0, 0, 0, 92, 0, 0, 8, 187, 529, 606, 996, 2218, 673, 1545, 204…\n$ Chum    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 1, 2, 0, 0, 0, 102, 343…\n\n\n\n\n\n\n\n\nExercise\n\n\n\nExamine the output of the glimpse() function call. Does anything seem amiss with this data set that might warrant fixing?\n\n\nAnswer:\n\nThe Chinook catch data are character class. Let’s fix it using the function mutate() before moving on."
  },
  {
    "objectID": "session_10.html#changing-column-content-using-mutate",
    "href": "session_10.html#changing-column-content-using-mutate",
    "title": "10  Cleaning & Wrangling Data",
    "section": "10.7 Changing column content using mutate()",
    "text": "10.7 Changing column content using mutate()\nWe can use the mutate() function to change a column, or to create a new column. First, let’s try to convert the Chinook catch values to numeric type using the as.numeric() function, and overwrite the old Chinook column.\n\ncatch_clean &lt;- catch_data %&gt;%\n    mutate(Chinook = as.numeric(Chinook))\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `Chinook = as.numeric(Chinook)`.\nCaused by warning:\n! NAs introduced by coercion\n\nhead(catch_clean)\n\n# A tibble: 6 × 7\n  Region  Year Chinook Sockeye  Coho  Pink  Chum\n  &lt;chr&gt;  &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 SSE     1886       0       5     0     0     0\n2 SSE     1887       0     155     0     0     0\n3 SSE     1888       0     224    16     0     0\n4 SSE     1889       0     182    11    92     0\n5 SSE     1890       0     251    42     0     0\n6 SSE     1891       0     274    24     0     0\n\n\nWe get a warning \"NAs introduced by coercion\" which is R telling us that it couldn’t convert every value to an integer and, for those values it couldn’t convert, it put an NA in its place. This is behavior we commonly experience when cleaning data sets and it’s important to have the skills to deal with it when it comes up.\nTo investigate, let’s isolate the issue. We can find out which values are NAs with a combination of is.na() and which(), and save that to a variable called i.\n\ni &lt;- which(is.na(catch_clean$Chinook))\ni\n\n[1] 401\n\n\nIt looks like there is only one problem row, lets have a look at it in the original data.\n\ncatch_data[i,]\n\n# A tibble: 1 × 7\n  Region  Year Chinook Sockeye  Coho  Pink  Chum\n  &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 GSE     1955 I            66     0     0     1\n\n\nWell that’s odd: The value in catch_thousands is the letter I. It turns out that this data set is from a PDF which was automatically converted into a csv and this value of I is actually a 1.\nLet’s fix it by incorporating the if_else() function to our mutate() call, which will change the value of the Chinook column to 1 if the value is equal to I, then will use as.numeric() to turn the character representations of numbers into numeric typed values.\n\ncatch_clean &lt;- catch_data %&gt;%\n    mutate(Chinook = if_else(condition = Chinook == \"I\", \n                             true = \"1\", \n                             false = Chinook),\n           Chinook = as.numeric(Chinook))\n\n##check\ncatch_clean[i, ]\n\n# A tibble: 1 × 7\n  Region  Year Chinook Sockeye  Coho  Pink  Chum\n  &lt;chr&gt;  &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 GSE     1955       1      66     0     0     1"
  },
  {
    "objectID": "session_10.html#changing-shape-using-pivot_longer-and-pivot_wider",
    "href": "session_10.html#changing-shape-using-pivot_longer-and-pivot_wider",
    "title": "10  Cleaning & Wrangling Data",
    "section": "10.8 Changing shape using pivot_longer() and pivot_wider()",
    "text": "10.8 Changing shape using pivot_longer() and pivot_wider()\nThe next issue is that the data are in a wide format and we want the data in a long format instead. The function pivot_longer() from the tidyr package helps us do this conversion. If you do not remember all the arguments that go into pivot_longer() you can always call the help page by typing ?pivot_longer in the console.\n\ncatch_long &lt;- catch_clean %&gt;% \n    #pivot longer all columns except Region and Year\n    pivot_longer(\n        cols = -c(Region, Year),\n        names_to = \"species\",\n        values_to = \"catch\"\n    )\n\nhead(catch_long)\n\n# A tibble: 6 × 4\n  Region  Year species catch\n  &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;\n1 SSE     1886 Chinook     0\n2 SSE     1886 Sockeye     5\n3 SSE     1886 Coho        0\n4 SSE     1886 Pink        0\n5 SSE     1886 Chum        0\n6 SSE     1887 Chinook     0\n\n\nThe syntax we used above for pivot_longer() might be a bit confusing so let’s walk though it.\n\nThe first argument to pivot_longer is the columns over which we are pivoting. You can select these by listing either the names of the columns you do want to pivot, or in this case, the names of the columns you are not pivoting over.\nThe names_to argument: this is the name of the column that you are creating from the column names of the columns you are pivoting over.\nThe values_to argument: the name of the column that you are creating from the values in the columns you are pivoting over.\n\nThe opposite of pivot_longer() is the pivot_wider() function. It works in a similar declarative fashion:\n\ncatch_wide &lt;- catch_long %&gt;%\n    pivot_wider(names_from = species,\n                values_from = catch)\n\nhead(catch_wide)\n\n# A tibble: 6 × 7\n  Region  Year Chinook Sockeye  Coho  Pink  Chum\n  &lt;chr&gt;  &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 SSE     1886       0       5     0     0     0\n2 SSE     1887       0     155     0     0     0\n3 SSE     1888       0     224    16     0     0\n4 SSE     1889       0     182    11    92     0\n5 SSE     1890       0     251    42     0     0\n6 SSE     1891       0     274    24     0     0\n\n\nSame than we did above we can pull up the documentation of the function to remind ourselves what goes in which argument. Type ?pivot_wider in the console."
  },
  {
    "objectID": "session_10.html#renaming-columns-with-rename",
    "href": "session_10.html#renaming-columns-with-rename",
    "title": "10  Cleaning & Wrangling Data",
    "section": "10.9 Renaming columns with rename()",
    "text": "10.9 Renaming columns with rename()\nIf you scan through the data, you may notice the values in the catch column are very small (these are supposed to be annual catches). If we look at the metadata we can see that the catch column is in thousands of fish, so let’s convert it before moving on.\nLet’s first rename the catch column to be called catch_thousands:\n\ncatch_long &lt;- catch_long %&gt;%\n    rename(catch_thousands = catch)\n\nhead(catch_long)\n\n# A tibble: 6 × 4\n  Region  Year species catch_thousands\n  &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;             &lt;dbl&gt;\n1 SSE     1886 Chinook               0\n2 SSE     1886 Sockeye               5\n3 SSE     1886 Coho                  0\n4 SSE     1886 Pink                  0\n5 SSE     1886 Chum                  0\n6 SSE     1887 Chinook               0\n\n\n\n\n\n\n\n\nnames() versus rename()\n\n\n\nMany people use the base R function names() to rename columns, often in combination with column indexing that relies on columns being in a particular order. Column indexing is often also used to select columns instead of the select() function from dplyr. Although these methods work just fine, they do have one major drawback: in most implementations they rely on you knowing exactly the column order your data is in.\nTo illustrate why your knowledge of column order isn’t reliable enough for these operations, considering the following scenario:\nYour colleague emails you letting you know that she has an updated version of the conductivity-temperature-depth data from this year’s research cruise, and sends it along. Excited, you re-run your scripts that use this data for your phytoplankton research. You run the script and suddenly all of your numbers seem off. You spend hours trying to figure out what is going on.\nUnbeknownst to you, your colleagues bought a new sensor this year that measures dissolved oxygen. Because of the new variables in the data set, the column order is different. Your script which previously renamed the fourth column, SAL_PSU to salinity now renames the fourth column, O2_MGpL to salinity. No wonder your results looked so weird, good thing you caught it!\nIf you had written your code so that it doesn’t rely on column order, but instead renames columns using the rename() function, the code would have run just fine (assuming the name of the original salinity column didn’t change, in which case the code would have thrown an error in an obvious way). This is an example of a defensive coding strategy, where you try to anticipate issues before they arise, and write your code in such a way as to keep the issues from happening."
  },
  {
    "objectID": "session_10.html#adding-columns-using-mutate",
    "href": "session_10.html#adding-columns-using-mutate",
    "title": "10  Cleaning & Wrangling Data",
    "section": "10.10 Adding columns using mutate()",
    "text": "10.10 Adding columns using mutate()\nNow let’s use mutate() again to create a new column called catch with units of fish (instead of thousands of fish).\n\ncatch_long &lt;- catch_long %&gt;%\n    mutate(catch = catch_thousands * 1000)\n\nhead(catch_long)\n\nLet’s remove the catch_thousands column for now since we don’t need it. Note that here we have added to the expression we wrote above by adding another function call (mutate) to our expression. This takes advantage of the pipe operator by grouping together a similar set of statements, which all aim to clean up the catch_clean data frame.\n\ncatch_long &lt;- catch_long %&gt;%\n    mutate(catch = catch_thousands * 1000) %&gt;%\n    select(-catch_thousands)\n\nhead(catch_long)\n\n# A tibble: 6 × 4\n  Region  Year species catch\n  &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;\n1 SSE     1886 Chinook     0\n2 SSE     1886 Sockeye  5000\n3 SSE     1886 Coho        0\n4 SSE     1886 Pink        0\n5 SSE     1886 Chum        0\n6 SSE     1887 Chinook     0\n\n\nWe’re now ready to start analyzing the data."
  },
  {
    "objectID": "session_10.html#summary-statistics-using-group_by-and-summarize",
    "href": "session_10.html#summary-statistics-using-group_by-and-summarize",
    "title": "10  Cleaning & Wrangling Data",
    "section": "10.11 Summary statistics using group_by() and summarize()",
    "text": "10.11 Summary statistics using group_by() and summarize()\nSuppose we are now interested in getting the average catch per region. In our initial data exploration we saw there are 18 regions, we can easily see their names again:\n\nunique(catch_original$Region)\n\n [1] \"SSE\" \"NSE\" \"YAK\" \"GSE\" \"BER\" \"COP\" \"PWS\" \"CKI\" \"BRB\" \"KSK\" \"YUK\" \"NRS\"\n[13] \"KTZ\" \"KOD\" \"CHG\" \"SOP\" \"ALU\" \"NOP\"\n\n\nThink about how we would calculate the average catch per region “by hand”. It would be something like this:\n\nWe start with our table and notice there are multiple regions in the “Regions” column.\nWe split our original table to group all observations from the same region together.\nWe calculate the average catch for each of the groups we form.\nThen we combine the values for average catch per region into a single table.\n\n\n\n\n\n\n\n\nAnalyses like this conform to what is known as the Split-Apply-Combine strategy. This strategy follows the three steps we explained above:\n\nSplit: Split the data into logical groups (e.g., region, species, etc.)\nApply: Calculate some summary statistic on each group (e.g. mean catch by year, number of individuals per species)\nCombine: Combine the statistic calculated on each group back together into a single table\n\nThe dplyr library lets us easily employ the Split-Apply-Combine strategy by using the group_by() and summarize() functions:\n\nmean_region &lt;- catch_long %&gt;%\n    group_by(Region) %&gt;%\n    summarize(mean_catch = mean(catch))\n\nhead(mean_region)\n\n# A tibble: 6 × 2\n  Region mean_catch\n  &lt;chr&gt;       &lt;dbl&gt;\n1 ALU        40384.\n2 BER        16373.\n3 BRB      2709796.\n4 CHG       315487.\n5 CKI       683571.\n6 COP       179223.\n\n\nLet’s see how the previous code implements the Split-Apply-Combine strategy:\n\ngroup_by(Region): this is telling R to split the dataframe and create a group for each different value in the column Region. R just keeps track of the groups, it doesn’t return separate dataframes per region.\nmean(catch): here mean is the function we want to apply to the column catch in each group.\nsummarize(catch = mean(catch)) the function summarize() is used to combine the results of mean(catch) in each group into a single table. The argument mean_catch = mean(catch) indicates that the column having the results of mean(catch) will be named mean_catch.\n\nAnother common use of group_by() followed by summarize() is to count the number of rows in each group. We have to use a special function from dplyr, n().\n\nn_region &lt;- catch_long %&gt;%\n    group_by(Region) %&gt;%\n    summarize(n = n())\n\nhead(n_region)\n\n# A tibble: 6 × 2\n  Region     n\n  &lt;chr&gt;  &lt;int&gt;\n1 ALU      435\n2 BER      510\n3 BRB      570\n4 CHG      550\n5 CKI      525\n6 COP      470\n\n\n\n\n\n\n\n\nTip\n\n\n\nIf you are finding that you are reaching for this combination of group_by(), summarize() and n() a lot, there is a helpful dplyr function count() that accomplishes this in one function!\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\nFind another grouping and statistic to calculate for each group.\nFind out if you can group by multiple variables.\n\n\n\n\n\nAnswer\n## for example:\ncatch_year_sp &lt;- catch_long %&gt;%\n    group_by(Year, species) %&gt;%\n    summarize(total_year = sum(catch, na.rm = T))"
  },
  {
    "objectID": "session_10.html#filtering-rows-using-filter",
    "href": "session_10.html#filtering-rows-using-filter",
    "title": "10  Cleaning & Wrangling Data",
    "section": "10.12 Filtering rows using filter()",
    "text": "10.12 Filtering rows using filter()\nWe use the filter() function to filter our data.frame to rows matching some condition. It’s similar to subset() from base R.\nLet’s go back to our original data.frame and do some filter()ing:\n\nsse_catch &lt;- catch_long %&gt;%\n    filter(Region == \"SSE\")\n\nhead(sse_catch)\n\n# A tibble: 6 × 4\n  Region  Year species catch\n  &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;\n1 SSE     1886 Chinook     0\n2 SSE     1886 Sockeye  5000\n3 SSE     1886 Coho        0\n4 SSE     1886 Pink        0\n5 SSE     1886 Chum        0\n6 SSE     1887 Chinook     0\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\nFilter to just catches of over one million fish\nFilter to just Chinook from the SSE region\n\n\n\n\n\nAnswer\n## Catches over a million fish\ncatch_million &lt;- catch_long %&gt;%\n    filter(catch &gt; 1000000)\n\n## Chinook from SSE data\nchinook_see &lt;- catch_long %&gt;%\n    filter(Region == \"SSE\",\n           species == \"Chinook\")\n\n## OR\nchinook_see &lt;- catch_long %&gt;%\n    filter(Region == \"SSE\" & species == \"Chinook\")"
  },
  {
    "objectID": "session_10.html#sorting-your-data-using-arrange",
    "href": "session_10.html#sorting-your-data-using-arrange",
    "title": "10  Cleaning & Wrangling Data",
    "section": "10.13 Sorting your data using arrange()",
    "text": "10.13 Sorting your data using arrange()\nThe arrange() function is used to sort the rows of a data.frame. Two common cases to use arrange() are:\n\nTo calculate a cumulative sum (with cumsum()) so row order matters\nTo display a table (like in an .qmd document) in sorted order\n\nLet’s re-calculate mean catch by region, and then arrange() the output by mean catch:\n\nmean_region &lt;- catch_long %&gt;%\n    group_by(Region) %&gt;%\n    summarize(mean_catch = mean(catch)) %&gt;%\n    arrange(mean_catch)\n\nhead(mean_region)\n\n# A tibble: 6 × 2\n  Region mean_catch\n  &lt;chr&gt;       &lt;dbl&gt;\n1 BER        16373.\n2 KTZ        18836.\n3 ALU        40384.\n4 NRS        51503.\n5 KSK        67642.\n6 YUK        68646.\n\n\nThe default sorting order of arrange() is to sort in ascending order. To reverse the sort order, wrap the column name inside the desc() function:\n\nmean_region &lt;- catch_long %&gt;%\n    group_by(Region) %&gt;%\n    summarize(mean_catch = mean(catch)) %&gt;%\n    arrange(desc(mean_catch))\n\nhead(mean_region)\n\n# A tibble: 6 × 2\n  Region mean_catch\n  &lt;chr&gt;       &lt;dbl&gt;\n1 SSE      3184661.\n2 BRB      2709796.\n3 NSE      1825021.\n4 KOD      1528350 \n5 PWS      1419237.\n6 SOP      1110942."
  },
  {
    "objectID": "session_10.html#splitting-a-column-using-separate-and-unite",
    "href": "session_10.html#splitting-a-column-using-separate-and-unite",
    "title": "10  Cleaning & Wrangling Data",
    "section": "10.14 Splitting a column using separate() and unite()",
    "text": "10.14 Splitting a column using separate() and unite()\nThe separate() function allow us to easily split a single column into numerous. Its complement, the unite() function, allows us to combine multiple columns into a single one.\nThis can come in really handy when we need to split a column into two pieces by a consistent separator (like a dash).\nLet’s make a new data.frame with fake data to illustrate this. Here we have a set of site identification codes with information about the island where the site is (the first 3 letters) and a site number (the 3 numbers). If we want to group and summarize by island, we need a column with just the island information.\n\nsites_df &lt;- data.frame(site = c(\"HAW-101\",\n                                \"HAW-103\",\n                                \"OAH-320\",\n                                \"OAH-219\",\n                                \"MAU-039\"))\n\nsites_df %&gt;%\n    separate(site, c(\"island\", \"site_number\"), \"-\")\n\n  island site_number\n1    HAW         101\n2    HAW         103\n3    OAH         320\n4    OAH         219\n5    MAU         039\n\n\n\n\n\n\n\n\nExercise\n\n\n\nSplit the city column in the data frame cities_df into city and state_code columns\n\n## create `cities_df`\ncities_df &lt;- data.frame(city = c(\"Juneau AK\",\n                                 \"Sitka AK\",\n                                 \"Anchorage AK\"))\n\n\n\n\n\nAnswer\ncolnames(cities_df)\n\ncities_clean &lt;- cities_df %&gt;%\n    separate(city, c(\"city\", \"state_code\"), \" \")\n\n\nThe unite() function does just the reverse of separate(). If we have a data.frame that contains columns for year, month, and day, we might want to unite these into a single date column.\n\ndates_df &lt;- data.frame(\n    year = c(\"1930\",\n             \"1930\",\n             \"1930\"),\n    month = c(\"12\",\n              \"12\",\n              \"12\"),\n    day = c(\"14\",\n            \"15\",\n            \"16\")\n)\n\ndates_df %&gt;%\n    unite(date, year, month, day, sep = \"-\")\n\n        date\n1 1930-12-14\n2 1930-12-15\n3 1930-12-16"
  },
  {
    "objectID": "session_10.html#now-all-together",
    "href": "session_10.html#now-all-together",
    "title": "10  Cleaning & Wrangling Data",
    "section": "10.15 Now, all together!",
    "text": "10.15 Now, all together!\nWe just ran through the various things we can do with dplyr and tidyr but if you’re wondering how this might look in a real analysis. Let’s look at that now:\n\ncatch_original &lt;- read_csv(url(\"https://knb.ecoinformatics.org/knb/d1/mn/v2/object/df35b.302.1\", \n                               method = \"libcurl\"))\n\nmean_region &lt;- catch_original %&gt;%\n  select(-All, -notesRegCode) %&gt;% \n  mutate(Chinook = ifelse(Chinook == \"I\", 1, Chinook)) %&gt;% \n  mutate(Chinook = as.numeric(Chinook)) %&gt;% \n  pivot_longer(-c(Region, Year), \n               names_to = \"species\", \n               values_to = \"catch\") %&gt;%\n  mutate(catch = catch*1000) %&gt;% \n  group_by(Region) %&gt;% \n  summarize(mean_catch = mean(catch)) %&gt;% \n  arrange(desc(mean_catch))\n\nhead(mean_region)\n\n# A tibble: 6 × 2\n  Region mean_catch\n  &lt;chr&gt;       &lt;dbl&gt;\n1 SSE      3184661.\n2 BRB      2709796.\n3 NSE      1825021.\n4 KOD      1528350 \n5 PWS      1419237.\n6 SOP      1110942.\n\n\nWe have completed our lesson on Cleaning and Wrangling data. Before we break, let’s practice our Git workflow.\n\n\n\n\n\n\nSteps\n\n\n\n\nSave the .qmd you have been working on for this lesson.\nRender the Quarto file. This is a way to test everything in your code is working.\nStage &gt; Commit &gt; Pull &gt; Push"
  },
  {
    "objectID": "session_11.html#learning-objectives",
    "href": "session_11.html#learning-objectives",
    "title": "11  Collaborating using Git & GitHub",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nApply the principles, features, and collaboration tools of Git and GitHub to effectively collaborate with colleagues on code\nAnalyze and evaluate common causes of conflicts that arise when collaborating on repositories\nDemonstrate the ability to resolve conflicts using Git conflict resolution techniques\nApply workflows and best practices that minimize conflicts on collaborative repositories"
  },
  {
    "objectID": "session_11.html#introduction-to-git-and-github-tools-for-collaboration",
    "href": "session_11.html#introduction-to-git-and-github-tools-for-collaboration",
    "title": "11  Collaborating using Git & GitHub",
    "section": "11.1 Introduction to Git and GitHub Tools for Collaboration",
    "text": "11.1 Introduction to Git and GitHub Tools for Collaboration\n\n\n\nArtwork by Allison Horst\n\n\nGit is not only a powerful tool for individual work but also an excellent choice for collaborating with friends and colleagues. Git ensures that after you’ve completed your contributions to a repository, you can confidently synchronize your changes with changes made by others.\nOne of the easiest and most effective ways to collaborate using Git is by utilizing a shared repository on a hosting service like GitHub. This shared repository acts as a central hub, enabling collaborators to effortlessly exchange and merge their changes. With Git and a shared repository, you can collaborate seamlessly and work confidently, knowing that your changes will be integrated smoothly with those of your collaborators.\n\nThere are many advanced techniques for synchronizing Git repositories, but let’s start with a simple example.\nIn this example, the Collaborator will clone a copy of the Owner’s repository from GitHub, and the Owner will grant them Collaborator status, enabling the Collaborator to directly pull and push from the Owner’s GitHub repository.\n\n\n\n\n\nWe’ll be practicing the above workflow in the next exercises – here, a respository (aka repo) owner controls permissions on their remote repo, which is hosted on GitHub. They can push commits from their local repo to the remote repo. Similarly, they can pull commits from the remote repo to their cloned local repo(s) (remember, you can clone your repo to mulitple machines e.g. your laptop and your desktop). The repository owner adds a colleague as a collaborator by sending them an invite from the remote repo on GitHub. This collaborator can now push their own changes from their local repo to the now-shared remote repo (and also pull the Owner’s changes). Git and GitHub provide the tools for both colleagues to create and merge their changes to the shared remote repository."
  },
  {
    "objectID": "session_11.html#collaborating-with-a-trusted-colleague-without-conflicts",
    "href": "session_11.html#collaborating-with-a-trusted-colleague-without-conflicts",
    "title": "11  Collaborating using Git & GitHub",
    "section": "11.2 Collaborating with a trusted colleague without conflicts",
    "text": "11.2 Collaborating with a trusted colleague without conflicts\nWe start our collaboration by giving a trusted colleague access to our repository on GitHub. In this example, we define the Owner as the individual who owns the repository, and the Collaborator as the person whom the Owner chooses to give permission to make changes to their repository.\nThe Collaborator will make changes to the repository and then push those changes to the shared repository on GitHub. The Owner will then use pull to retrieve the changes without encountering any conflicts. This is the most ideal workflow.\nThe instructors will demonstrate this process in the next section.\n\nStep 0: Owner adds a Collaborator to their repository on GitHub\nThe Owner must change the settings of the remote repository and give the Collaborator access to the repository by inviting them as a collaborator. Once the Collaborator accepts the owner’s invitation, they will have push access to the repository – meaning they can contribute their own changes/commits to the Owner’s repository.\nTo do this, the owner will navigate to their remote repository on GitHub, then choose Settings &gt; Collaborators &gt; Add people, to send an email invitation. The invitation will show as “Pending” until accepted.\n\n\n\n\n\n\n\n\nStep 1: Collaborator clones the remote repository\nIn order to contribute, the Collaborator must clone the repository from the Owner’s GitHub account (Note: as a Collaborator, you won’t see the repository appear under your profile’s Repositories page). To do this, the Collaborator should navigate to the Owner’s repository on GitHub, then copy the clone URL. In RStudio, the Collaborator will create a new project from version control by pasting this clone URL into the appropriate dialog box (see the earlier chapter introducing GitHub).\n\n\n\n\nINTERMEDIATE STEP: Collaborator communicates with Owner that they plan to make some changes\nFrequent communication is SO important when collaborating! Letting one another know that you’re about to make and push changes to the remote repo can help to prevent merge conflicts (and reduce headaches). The easiest way to avoid merge conflicts is to ensure that you and your collaborators aren’t working on the same file(s)/section(s) of code at the same time.\n\n\nStep 2: Collaborator edits files locally\nWith the repo cloned locally, the Collaborator can now make changes to the README.md file, adding a line or statement somewhere noticeable near the top. Save the changes.\n\n\nStep 3: Collaborator commits, pulls, and pushs\nIt’s recommended that all collaborators (including the repo Owner) follow this workflow when syncing changes between their local repo and the remote repo (in this example, the Collaborator is now following these steps):\n\nadd and commit your modified file(s) (e.g. the updated README.md)\npull to fetch and merge changes from the remote/origin repository (in an ideal situation, as we’re demonstrating here, any potential changes are merged seamlessly without conflict)\npush your changes to the remote/origin repository\n\n\n\n\n\n\n\nWhy do I need to add and commit files before pulling?\n\n\n\nRemember, git pull is a combination of git fetching remote changes to your local repo and git mergeing those changes from your local repo into your local working file(s).\nThe merge part of git pull will fail if you have uncommitted changes in your local working file(s) to avoid any potential overwriting of your own changes. Because of this, you should always, add/commit then pull, and finally push.\n\n\n\n\n\n\n\n\n\nINTERMEDIATE STEP: Collaborator communicates with Owner that they pushed their changes to GitHub\nRemember, communication is key! The Owner now knows that they can pull those changes down to their local repo.\n\n\nStep 4: Owner pulls new changes from the remote repo to their local repo\nThe Owner can now open their local working copy of the code in RStudio, and pull to fetch and merge those changes into their local copy.\nCongrats, the Owner now has your changes! Now, all three repositories – the remote/origin repository on GitHub, the Owner’s local repository, and the Collaborator’s local repository – should all be in the exact same state.\n\n\nINTERMEDIATE STEP: Owner communicates with Collaborator that they now plan to make some changes\nDid we mention that communication is important? :)\n\n\nStep 5: Owner edits, commits, pulls (just in case!) and pushes\nFollowing the same workflow as the Collaborator did earlier:\n\nadd and commit your modified file(s) (e.g. the updated README.md)\npull to fetch and merge changes from the remote/origin repository (in an ideal situation, as we’re demonstrating here, any potential changes are merged seamlessly without conflict)\npush your changes to the remote/origin repository\n\n\n\nINTERMEDIATE STEP: Owner communicates with Collaborator that they pushed their changes to GitHub\nYes, this seems silly to repeat, yet again – but it’s also easy to forget in practice!\n\n\nStep 6: Collaborator pulls new changes from the remote repo to their local repo\nThe Collaborator can now pull down those changes from the Owner, and all copies are once again fully synced. And just like that, you’ve successfully collaborated!"
  },
  {
    "objectID": "session_11.html#ex1-no-conflict",
    "href": "session_11.html#ex1-no-conflict",
    "title": "11  Collaborating using Git & GitHub",
    "section": "11.3 Exercise 1: With a partner collaborate in a repository without a merge conflict",
    "text": "11.3 Exercise 1: With a partner collaborate in a repository without a merge conflict\n\n\n\n\n\n\nSetup\n\n\n\n\nGet into pairs, then choose one person as the Owner and one as the Collaborator\nBoth login to GitHub\n\nThese next steps are for the Owner:\n\nNavigate to the {FIRSTNAME}_test repository\nGo to Settings and navigate to Collaborators in the Access section on the left-hand side\nUnder Manage Access click the button Add people and type the username of your Collaborator in the search box\nOnce you’ve found the correct username, click Add {Collaborator username} to this repository\n\n\nNow, the Collaborator will follow this step:\n\nCheck your email for an invitation to GitHub or check your notifications (likely under Your Organizations) on GitHub to accept the invite to collaborate.\n\n\n\n\n\n\n\n\n\nLast thing, some Git configuration to surpress warning messages\n\n\n\nGit version 2.27 includes a new feature that allows users to specify the default method for integrating changes from a remote repository into a local repository, without receiving a warning (this warning is informative, but can get annoying). To suppress this warning for this repository only we need to configure Git by running this line of code in the Terminal:\ngit config pull.rebase false\npull.rebase false is a default strategy for pulling where Git will first try to auto-merge the files. If auto-merging is not possible, it will indicate a merge conflict.\nNote: Unlike when we first configured Git (see Appendix), we do not include the --global flag here (e.g. git config --global pull.rebase false). This sets this default strategy for this repository only (rather than globally for all your repositories). We do this because your chosen/default method of grabbing changes from a remote repository (e.g. pulling vs. rebasing) may change depending on collaborator/workflow preference.\n\n\n\n\n\n\n\n\nInstructions\n\n\n\nYou will do the exercise twice, where each person will get to practice being both the Owner and the Collaborator roles.\n\nStep 0: Designate one person as the Owner and one as the Collaborator.\n\nRound One:\n\nStep 1: Owner adds Collaborator to {FIRSTNAME}_test repository (see Setup block above for detailed steps)\nStep 2: Collaborator clones the Owner’s {FIRSTNAME}_test repository\nStep 3: Collaborator edits the README file:\n\nCollaborator adds a new level 2 heading to README titled “Git Workflow”\n\nStep 4: Collaborator commits and pushes the README file with the new changes to GitHub\nStep 5: Owner pulls the changes that the Collaborator made\nStep 6: Owner edits the README file:\n\nUnder “Git Workflow”, Owner adds the steps of the Git workflow we’ve been practicing\n\nStep 7: Owner commits and pushes the README file with the new changes to GitHub\nStep 8: Collaborator pulls the Owners changes from GitHub\nStep 9: Go back to Step 0, switch roles, and then follow the steps in Round Two.\n\nRound Two:\n\nStep 1: Owner adds Collaborator to {FIRSTNAME}_test repository\nStep 2: Collaborator clones the Owner’s {FIRSTNAME}_test repository\nStep 3: Collaborator edits the README file:\n\nCollaborator adds a new level 2 heading to README titled “How to Create a Git Repository from an existing project” and adds the high level steps for this workflow\n\nStep 4: Collaborator commits and pushes the README file with the new changes to GitHub\nStep 5: Owner pulls the changes that the Collaborator made\nStep 6: Owner edits the README file:\n\nUnder “How to Create a Git Repository”, Owner adds the high level steps for this workflow\n\nStep 7: Owner commits and pushes the README file with the new changes to GitHub\nStep 8: Collaborator pulls the Owners changes from GitHub\n\nHint: If you don’t remember how to create a Git repository, refer to the chapter Intro to Git and GitHub where we created two Git repositories"
  },
  {
    "objectID": "session_11.html#a-note-on-advanced-collaboration-techniques",
    "href": "session_11.html#a-note-on-advanced-collaboration-techniques",
    "title": "11  Collaborating using Git & GitHub",
    "section": "11.4 A Note on Advanced Collaboration Techniques",
    "text": "11.4 A Note on Advanced Collaboration Techniques\nThere are many Git and GitHub collaboration techniques, some more advanced than others. We won’t be covering advanced strategies in this course. But here is a table for your reference on a few popular Git collaboration workflow strategies and tools.\n\n\n\n\n\n\n\n\n\nCollaboration Technique\nBenefits\nWhen to Use\nWhen Not to Use\n\n\n\n\nBranch Management Strategies\n1. Enables parallel development and experimentation2. Facilitates isolation of features or bug fixes3. Provides flexibility and control over project workflows\nWhen working on larger projects with multiple features or bug fixes simultaneously.When you want to maintain a stable main branch while developing new features or resolving issues on separate branches.When collaborating with teammates on different aspects of a project and later integrating their changes.\nWhen working on small projects with a single developer or limited codebase.When the project scope is simple and doesn’t require extensive branch management.When there is no need to isolate features or bug fixes.\n\n\nCode Review Practices\n1. Enhances code quality and correctness through feedback2. Promotes knowledge sharing and learning within the team3. Helps identify bugs, improve performance, and ensure adherence to coding standards\nWhen collaborating on a codebase with team members to ensure code quality and maintain best practices.When you want to receive feedback and suggestions on your code to improve its readability, efficiency, or functionality.When working on critical or complex code that requires an extra layer of scrutiny before merging it into the main branch.\nWhen working on personal projects or small codebases with no collaboration involved.When time constraints or project size make it impractical to conduct code reviews.When the codebase is less critical or has low complexity.\n\n\nForking\n1. Enables independent experimentation and development2. Provides a way to contribute to a project without direct access3. Allows for creating separate, standalone copies of a repository\nWhen you want to contribute to a project without having direct write access to the original repository.When you want to work on an independent variation or extension of an existing project.When experimenting with changes or modifications to a project while keeping the original repository intact.\nWhen collaborating on a project with direct write access to the original repository.When the project does not allow external contributions or forking.When the project size or complexity doesn’t justify the need for independent variations.\n\n\nPull Requests\n1. Facilitates code review and discussion2. Allows for collaboration and feedback from team members3. Enables better organization and tracking of proposed changes\nWhen working on a shared repository with a team and wanting to contribute changes in a controlled and collaborative manner.When you want to propose changes to a project managed by others and seek review and approval before merging them into the main codebase.\nWhen working on personal projects or individual coding tasks without the need for collaboration.When immediate changes or fixes are required without review processes.When working on projects with a small team or single developer with direct write access to the repository.\n\n\n\nThe “When Not to Use” column provides insights into situations where it may be less appropriate / unnecessary to use each collaboration technique, helping you make informed decisions based on the specific context and requirements of your project.\nThese techniques provide different benefits and are used in various collaboration scenarios, depending on the project’s needs and team dynamics."
  },
  {
    "objectID": "session_11.html#merge-conflicts",
    "href": "session_11.html#merge-conflicts",
    "title": "11  Collaborating using Git & GitHub",
    "section": "11.5 Merge conflicts",
    "text": "11.5 Merge conflicts\nMerge conflicts occur when both collaborators make conflicting changes to the same file. Resolving merge conflicts involves identifying the root of the problem and restoring the project to a normal state. Good communication, discussing file sections to work on, and avoiding overlaps can help prevent merge conflicts. However, if conflicts do arise, Git warns about potential issues and ensures that changes from different collaborators based on the same file version are not overwritten. To resolve conflicts, you need to explicitly specify whose changes should be used for each conflicting line in the file.\nIn this image, we see collaborators mbjones and metamattj have both made changes to the same line in the same README.md file. This is causing a merge conflict because Git doesn’t know whose changes came first. To resolve it, we need to tell Git whose changes to keep for that line, and whose changes to discard.\n\n\n11.5.1 Common ways to resolve a merge conflict\n1. Abort, abort, abort…\nSometimes you just made a mistake. When you get a merge conflict, the repository is placed in a “Merging” state until you resolve it. There’s a Terminal command to abort doing the merge altogether:\ngit merge --abort\nOf course, after doing that you still haven’t synced with your Collaborator’s changes, so things are still unresolved. But at least your repository is now usable on your local machine.\n2. Checkout\nThe simplest way to resolve a conflict, given that you know whose version of the file you want to keep, is to use the command line to tell Git to use either your changes (the person doing the merge), or their changes (the Collaborator).\n\nkeep your Collaborator’s file: git checkout --theirs conflicted_file.Rmd\nkeep your own file: git checkout --ours conflicted_file.Rmd\n\nOnce you have run that command, then run add (staging), commit, pull, and push the changes as normal.\n3. Pull and edit the file\nOption 2, above, requires the command line, however, we have a third option for resolving the merge conflict from RStudio. Using this approach will allow us to pick and choose some of our changes and some of our Collaborator’s changes by letting us manually edit and fix the conflicted file.\nWhen you pull a file with a conflict, Git will provide you with a warning modify the file so that it includes both your own changes and your Collaborator’s changes. The file will also appear in the Git tab with an orange U icon, which indicates that the file is Unmerged and therefore awaiting your help to resolve the conflict. It delimits these blocks of conflicted code with a series of less than and greater than signs, so they are easy to find:\n\n\n\n\n\nIn the above example, &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD marks the start of your changes. The ======= delimiter separates your changes from your Collaborator’s conflicting changes. &gt;&gt;&gt;&gt;&gt;&gt;&gt; mark the end of your Collaborator’s changes.\nTo resolve the conflicts, simply find all of these blocks, and edit them so that the file looks how you want (either pick your lines, your Collaborator’s lines, some combination, or something altogether new), and save. Be sure you removed the delimiter lines that started with\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;,\n=======,\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;.\n\nOnce you have made those changes, you simply add (staging), commit, and push the files to resolve the conflict."
  },
  {
    "objectID": "session_11.html#producing-and-resolving-merge-conflicts",
    "href": "session_11.html#producing-and-resolving-merge-conflicts",
    "title": "11  Collaborating using Git & GitHub",
    "section": "11.6 Producing and resolving merge conflicts",
    "text": "11.6 Producing and resolving merge conflicts\nTo illustrate this process, the instructors are going to carefully create a merge conflict step-by-step, show how to resolve it, and show how to see the results of the successful merge after it is complete. First, the instructors will walk through the exercise to demonstrate the issues. Then, participants will pair up and try the exercise.\n\nStep 1: Owner and Collaborator ensure that their local repos are synced with the remote repo\nPair with the same partner as in Exercise 1 and decide who will be the Owner and who will be the Collaborator. Begin the exercise by ensuring that both the Owner and Collaborator have all of the changes synced from the remote repo to their local repos. This includes doing a git pull to ensure that you have all changes locally, and ensuring that the Git tab in RStudio doesn’t show any changes that need to be committed.\n\n\nStep 2: Owner makes a change and commits locally\nFrom this clean slate, the Owner will first modify and commit a small change. The Owner should add their name on a specific line of the README.md file (we will change the title in line 1). Save and commit the change (but DO NOT push). The Owner should now have a local but unpushed commit that the Collaborator does not yet have access to.\n\n\nStep 3: Collaborator makes a change and commits on the same line\nNow, the Collaborator will modify and commit a small change. The Collaborator should add their name to the same line of the README.md file (we will again change the title in line 1). Save and commit the change (but DO NOT push). The Collaborator should now also have a local but unpushed commit that the Owner does not yet have access to.\nAt this point, both the Owner and Collaborator have committed local changes, but neither have tried to share their changes via GitHub.\n\n\nStep 4: Collaborator pushes the file to GitHub\nSharing starts when the Collaborator pushes their changes to the GitHub repo, which updates GitHub with their version of the file. The Owner is now one revision behind, but doesn’t know it yet.\n\n\nStep 5: Owner pushes their changes and gets an error\nAt this point, the Owner tries to push their change to the repository, which triggers an error from GitHub. While the error message is long, it tells you everything needed (that the Owner’s repository doesn’t reflect the changes on GitHub, and that they need to pull before they can push).\n\n\n\nStep 6: Owner pulls from GitHub to get Collaborator changes\nFollowing the error message, the Owner pulls the changes from GitHub, and gets another, different error message. Here, it indicates that there is a merge conflict because of the conflicting lines.\n\nIn the Git pane of RStudio, the file is also flagged with an orange U, which stands for an unresolved merge conflict.\n\n\n\nStep 7: Owner edits the file to resolve the conflict\nTo resolve the conflict, the Owner now needs to edit the file. Again, as indicated above, Git has flagged the locations in the file where a conflict occurred with &lt;&lt;&lt;&lt;&lt;&lt;&lt;, =======, and &gt;&gt;&gt;&gt;&gt;&gt;&gt;. The Owner should edit the file, merging whatever changes are appropriate until the conflicting lines read how they should, and eliminate all of the marker lines with &lt;&lt;&lt;&lt;&lt;&lt;&lt;, =======, and &gt;&gt;&gt;&gt;&gt;&gt;&gt;.\n\nOf course, for scripts and programs, resolving the changes means more than just merging the text – whoever is doing the merging should make sure that the code runs properly and that none of the logic of the program has been broken.\n\n\n\nStep 8: Owner commits the resolved changes\nFrom this point forward, things proceed as normal. The Owner first adds the file, which changes the orange U to a blue M for modified. Then, the Owner commits the changes locally. The Owner now has a resolved version of the file on their system.\n\n\n\nStep 9: Owner pushes the resolved changes to GitHub\nThe Owner can now push the changes, without error, to GitHub.\n\n\n\nStep 10: Collaborator pulls the resolved changes from GitHub\nFinally, the Collaborator can pull from GitHub to get the changes (which include the resolved conflicted lines of code) that the Owner made.\n\n\nStep 11: Both can view commit history\nBoth the Collaborator and the Owner can view the history, which includes information about the conflict, the associated branch, and the merged changes."
  },
  {
    "objectID": "session_11.html#exercise-2-with-a-partner-collaborate-in-a-repository-and-resolve-a-merge-conflict",
    "href": "session_11.html#exercise-2-with-a-partner-collaborate-in-a-repository-and-resolve-a-merge-conflict",
    "title": "11  Collaborating using Git & GitHub",
    "section": "11.7 Exercise 2: With a partner collaborate in a repository and resolve a merge conflict",
    "text": "11.7 Exercise 2: With a partner collaborate in a repository and resolve a merge conflict\nNote you will only need to complete the Setup and Git configuration steps again if you are working in a new repository. Return to Exercise 1 for Setup and Git configuration steps.\n\n\n\n\n\n\nInstructions\n\n\n\nNow it’s your turn. In pairs, intentionally create a merge conflict, and then go through the steps needed to resolve the issues and continue developing with the merged files. See the sections above for help with each of the steps below. You will do the exercise twice, where each person will get to practice being both the Owner and the Collaborator roles.\n\nStep 0: Designate one person as the Owner and one as the Collaborator.\n\nRound One:\n\nStep 1: Both Owner and Collaborator pull to ensure both have the most up-to-date changes\nStep 2: Owner edits the README file and makes a change to the title and commits do not push\nStep 3: On the same line, Collaborator edits the README file and makes a change to the title and commits\nStep 4: Collaborator pushes the file to GitHub\nStep 5: Owner pushes their changes and gets an error\nStep 6: Owner pulls from GitHub to get Collaborator changes\nStep 7: Owner edits the README file to resolve the conflict\nStep 8: Owner commits the resolved changes\nStep 9: Owner pushes the resolved changes to GitHub\nStep 10: Collaborator pulls the resolved changes from GitHub\nStep 11: Both view commit history\nStep 12: Go back to Step 0, switch roles, and then follow the steps in Round Two.\n\nRound Two:\n\nStep 1: Both Owner and Collaborator pull to ensure both have the most up-to-date changes\nStep 2: Owner edits the README file and makes a change to line 2 and commits do not push\nStep 3: On the same line, Collaborator edits the README file and makes a change to line 2 and commits\nStep 4: Collaborator pushes the file to GitHub\nStep 5: Owner pushes their changes and gets an error\nStep 6: Owner pulls from GitHub to get Collaborator changes\nStep 7: Owner edits the README file to resolve the conflict\nStep 8: Owner commits the resolved changes\nStep 9: Owner pushes the resolved changes to GitHub\nStep 10: Collaborator pulls the resolved changes from GitHub\nStep 11: Both view commit history"
  },
  {
    "objectID": "session_11.html#best-practices-to-avoid-merge-conflicts",
    "href": "session_11.html#best-practices-to-avoid-merge-conflicts",
    "title": "11  Collaborating using Git & GitHub",
    "section": "11.8 Best practices to avoid merge conflicts",
    "text": "11.8 Best practices to avoid merge conflicts\nSome basic rules of thumb can avoid the vast majority of merge conflicts, saving a lot of time and frustration. These are words our teams live by:\n\n\n\n\n\nXKCD 1597\n\n\n\nCommunicate often and set up effective communication channels\nTell each other what you are working on\nStart your working session with a pull\nPull immediately after you commit and before you push\nCommit often in small chunks (this helps you organize your work!)\nMake sure you and who you are collaborating with all fully understand the Git workflow you’re using (aka make sure you’re on the same page before you start)!\n\nA good workflow is encapsulated as follows:\nPull -&gt; Edit -&gt; Save -&gt; Add (stage) -&gt; Commit -&gt; Pull -&gt; (OPTIONAL) Fix any merge conflicts -&gt; Push\nIt may take a bit of practice to get comfortable with navigating merge conflicts, but like any other technical skill, they’ll become less intimidating with time. With careful communication and a consistent workflow, conflicts can be largely avoided or resolved when they do occur."
  },
  {
    "objectID": "session_12.html",
    "href": "session_12.html",
    "title": "12  Appendix",
    "section": "",
    "text": "RStudio Server Setup"
  },
  {
    "objectID": "session_12.html#learning-objectives",
    "href": "session_12.html#learning-objectives",
    "title": "12  Appendix",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nPractice creating an R Project\nOrganize an R Project for effective project management\nUnderstand how to move in an R Project using paths and working directories"
  },
  {
    "objectID": "session_12.html#logon-to-the-rstudio-server",
    "href": "session_12.html#logon-to-the-rstudio-server",
    "title": "12  Appendix",
    "section": "12.1 Logon to the RStudio Server",
    "text": "12.1 Logon to the RStudio Server\nTo prevent us from spending most of this lesson troubleshooting the myriad of issues that can arise when setting up the R, RStudio, and git environments, we have chosen to have everyone work on a remote server with all of the software you need installed. We will be using a special kind of RStudio just for servers called RStudio Server. If you have never worked on a remote server before, you can think of it like working on a different computer via the internet. Note that the server has no knowledge of the files on your local filesystem, but it is easy to transfer files from the server to your local computer, and vice-versa, using the RStudio server interface.\n\n\n\n\n\n\nServer Setup\n\n\n\nYou should have received an email prompting you to change your password for your server account. If you did not, please put up a post-it and someone will help you.\nAfter you have successfully changed your password log in at: https://included-crab.nceas.ucsb.edu/"
  },
  {
    "objectID": "session_12.html#create-an-r-project",
    "href": "session_12.html#create-an-r-project",
    "title": "12  Appendix",
    "section": "12.2 Create an R Project",
    "text": "12.2 Create an R Project\nIn this course, we are going to be using an R project to organize our work. An R project is tied to a directory on your local computer, and makes organizing your work and collaborating with others easier.\nThe Big Idea: using an R project is a reproducible research best practice because it bundles all your work within a working directory. Consider your current data analysis workflow. Where do you import you data? Where do you clean and wrangle it? Where do you create graphs, and ultimately, a final report? Are you going back and forth between multiple software tools like Microsoft Excel, JMP, and Google Docs? An R project and the tools in R that we will talk about today will consolidate this process because it can all be done (and updated) in using one software tool, RStudio, and within one R project.\n\n\n\n\n\n\nR Project Setup\n\n\n\n\nIn the “File” menu, select “New Project”\nClick “New Directory”\nClick “New Project”\nUnder “Directory name” type: training_{USERNAME} (i.e. training_do-linh)\nLeave “Create Project as subdirectory of:” set to ~\nClick “Create Project”\n\nRStudio should open your new project automatically after creating it. One way to check this is by looking at the top right corner and checking for the project name."
  },
  {
    "objectID": "session_12.html#organizing-an-r-project",
    "href": "session_12.html#organizing-an-r-project",
    "title": "12  Appendix",
    "section": "12.3 Organizing an R Project",
    "text": "12.3 Organizing an R Project\nWhen starting a new research project, one of the first things I do is create an R Project for it (just like we have here!). The next step is to then populate that project with relevant directories. There are many tools out there that can do this automatically. Some examples are rrtools or usethis::create_package(). The goal is to organize your project so that it is a compendium of your research. This means that the project has all of the digital parts needed to replicate your analysis, like code, figures, the manuscript, and data access.\nSome common directories are:\n\n\n\n\ndata: where we store our data (often contains subdirectories for raw, processed, and metadata data)\nR: contains scripts for cleaning or wrangling, etc. (some find this name misleading if their work has other scripts beyond the R programming language, in which case they call this directory scripts)\nplots or figs: generated plots, graphs, and figures\ndocs: summaries or reports of analysis or other relevant project information\n\nDirectory organization will vary from project to project, but the ultimate goal is to create a well organized project for both reproducibility and collaboration."
  },
  {
    "objectID": "session_12.html#moving-in-an-r-project-using-paths-working-directories",
    "href": "session_12.html#moving-in-an-r-project-using-paths-working-directories",
    "title": "12  Appendix",
    "section": "12.4 Moving in an R Project using Paths & Working Directories",
    "text": "12.4 Moving in an R Project using Paths & Working Directories\n\nNow that we have your project created (and notice we know it’s an R Project because we see a .Rproj file in our Files pane), let’s learn how to move in a project. We do this using paths.\nThere are two types of paths in computing: absolute paths and relative paths.\n\nAn absolute path always starts with the root of your file system and locates files from there. The absolute path to my project directory is: /home/do-linh/training_do-linh\nRelative paths start from some location in your file system that is below the root. Relative paths are combined with the path of that location to locate files on your system. R (and some other languages like MATLAB) refer to the location where the relative path starts as our working directory.\n\nRStudio projects automatically set the working directory to the directory of the project. This means that you can reference files from within the project without worrying about where the project directory itself is. If I want to read in a file from the data directory within my project, I can simply type read.csv(\"data/samples.csv\") as opposed to read.csv(\"/home/do-linh/training_do-linh/data/samples.csv\").\nThis is not only convenient for you, but also when working collaboratively. We will talk more about this later, but if Matt makes a copy of my R project that I have published on GitHub, and I am using relative paths, he can run my code exactly as I have written it, without going back and changing /home/do-linh/training_do-linh/data/samples.csv to /home/jones/training_jones/data/samples.csv.\nNote that once you start working in projects you should basically never need to run the setwd() command. If you are in the habit of doing this, stop and take a look at where and why you do it. Could leveraging the working directory concept of R projects eliminate this need? Almost definitely!\nSimilarly, think about how you work with absolute paths. Could you leverage the working directory of your R project to replace these with relative paths and make your code more portable? Probably!"
  },
  {
    "objectID": "session_12.html#rstudio-personal-setup",
    "href": "session_12.html#rstudio-personal-setup",
    "title": "12  Appendix",
    "section": "12.5 Setting up R and RStudio on your Computer",
    "text": "12.5 Setting up R and RStudio on your Computer\n\n12.5.1 Check your R Version\nFor this course, we used the R Version 4.2.2. To check the R Version of your personal computer run this in the Console: R.version$version.string. If you need to download R onto your personal computer or update it, you can do so from CRAN (The Comprehensive R Archive Network).\n\n\n12.5.2 Check your RStudio Version\nFor this course, we used the RStudio Version released in December 2022. To check the RStudio Version of your personal computer run this in the Console: RStudio.Version()$version. If you need to download RStudio onto your personal computer or update it, you can do so from Posit. Note you may need to update your computer’s software to download the newest version of RStudio.\nAnother way to check for RStudio updates is to click “Help” and then “Check for Updates”. Follow the prompts.\n\n\n12.5.3 Install Packages\nIn the code chunk below, we have listed out the packages we used for this course. You’re welcome to install each package one-by-one by calling the install.packages(\"package_name\") function. Or you can copy and paste this code chunk and run it which includes a for loop that will check if a package is installed on your personal computer and if not, it will install it. We have also included a line of code that will update our packages. Running this code chunk may take a few minutes.\n\ncourse_packages &lt;- c(\"dplyr\",\n                     \"DT\",\n                     \"forcats\",\n                     \"ggplot2\",\n                     \"ggmap\",\n                     \"knitr\",\n                     \"leaflet\",\n                     \"lubridate\",\n                     \"readr\",\n                     \"renv\",\n                     \"rrtools\",\n                     \"sf\",\n                     \"scales\",\n                     \"tidyr\",\n                     \"usethis\")\n\nfor (course_packages in course_packages) {\n    \n    if (!(course_packages %in% installed.packages())) { install.packages(course_packages) }\n    \n    }\n\nrm(course_packages) # remove object from Global Environment\n\n# update any out-of-date packages\nupdate.packages(ask=FALSE)"
  },
  {
    "objectID": "session_12.html#learning-objectives-1",
    "href": "session_12.html#learning-objectives-1",
    "title": "12  Appendix",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nSet global options in your .gitconfig file\nPractice how to set up GitHub Authentication using a Personal Access Token (PAT)"
  },
  {
    "objectID": "session_12.html#set-up-global-options-in-git",
    "href": "session_12.html#set-up-global-options-in-git",
    "title": "12  Appendix",
    "section": "12.6 Set up global options in Git",
    "text": "12.6 Set up global options in Git\nBefore using Git, you need to tell it who you are, also known as setting the global options. To do this, we will be setting the global options in the Terminal.\n\n\n\n\n\n\nWhat’s the Terminal?\n\n\n\nTechnically, the Terminal is an interface for the shell, a computer program. To put that simply, we use the Terminal to tell a computer what to do. This is different from the Console in RStudio, which interprets R code and returns a value.\n\n\nTo get started, let’s open a new Terminal window in RStudio. Do this by clicking Tools &gt; Terminal &gt; New Terminal.\nA Terminal tab should now be open where your Console usually is.\n\n\n\n\n\n\nDon’t be afraid to dip your toes in the Terminal\n\n\n\nMost of our git operations will be done in RStudio, but there are some situations where you must work in the Terminal and use command line. It may be daunting to code in the Terminal, but as your comfort increases over time, you might find you prefer it. Either way, it’s beneficial to learn enough command line and to feel comfortable in the Terminal.\n\n\nLet’s start by adding your user name to the global options. Type the following into the command prompt, with your exact GitHub username, and press enter:\ngit config --global user.name \"my_user_name\"\n\n\nNote that if it ran successfully, it will look like nothing happened. We will check at the end to make sure it worked.\nNext, enter the following line, with the email address you used when you created your account on github.com:\ngit config --global user.email \"my_email@nceas.ucsb.edu\"\n\n\n\n\n\n\nCase and spelling matters!\n\n\n\nWhen you add your username and email to the global options you must use the exact same spelling and case that you used on GitHub otherwise, Git won’t be able to sync to your account.\n\n\nNext, we will set our credentials to not time out for a very long time. This is related to how our server operating system handles credentials - not doing this will make your Personal Access Token (PAT, which we will set up in the next section) expire immediately on the system, even though it is actually valid for at least a month.\ngit config --global credential.helper 'cache --timeout=10000000'\nNext, we will set the default branch name to main for any new repositories that are created moving forward. Why are we doing this? Previously, the default branch name was master and this racist terminology for git branches motivates us to update our default branch to main instead.\ngit config --global init.defaultBranch main\nFinally, check to make sure everything looks correct by entering this command, which will return the global options you have set.\ngit config --global --list"
  },
  {
    "objectID": "session_12.html#github-authentication",
    "href": "session_12.html#github-authentication",
    "title": "12  Appendix",
    "section": "12.7 GitHub Authentication",
    "text": "12.7 GitHub Authentication\nGitHub recently deprecated password authentication for accessing repositories, so we need to set up a secure way to authenticate.\nThe book Happy Git and GitHub for the useR has a wealth of information related to working with Git in R, and these instructions are based off of Chapter 9 Personal access token for HTTPS.\nWe will be using a Personal Access Token (PAT) in this course. For better security and long term use, we recommend taking the extra steps to set up SSH keys (check out Chapter 10 Set up Keys for SSH).\n\n\n\n\n\n\nSetting up your PAT\n\n\n\n\nRun usethis::create_github_token() in the Console.\nA new browser window should open up to GitHub, showing all the scopes options. You can review the scopes, but you don’t need to worry about which ones to select this time. Using create_github_token() automatically pre-selects some recommended scopes. Go ahead and scroll to the bottom and click “Generate Token”.\nCopy the generated token.\nBack in RStudio, run gitcreds::gitcreds_set() in the Console.\nPaste your PAT when the prompt asks for it.\nLast thing, run usethis::git_sitrep() in the Console to check your Git configuration and that you’ve successful stored your PAT.\n\n\n\nCongrats! Now you’ve setup your authentication you should be able to work with GitHub in RStudio now."
  }
]