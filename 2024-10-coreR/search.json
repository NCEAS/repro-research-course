[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "NCEAS Learning Hub’s coreR Course",
    "section": "",
    "text": "Welcome!\ncoreR is a five-day immersion in R programming for environmental data science. Researchers will gain experience with essential data science tools and best practices to increase their capacity as collaborators, reproducible coders, and open scientists.",
    "crumbs": [
      "Welcome!"
    ]
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "NCEAS Learning Hub’s coreR Course",
    "section": "",
    "text": "Course Learning Objectives\n\nEffectively manage data using tidy data practices and developing quality metadata\nEstablish best practices and utilize tools like Git & GitHub, and Data Management Plans to optimize your collaboration\nBetter communicate scientific analyses and results using Markdown, GitHub webpages, and R packages like ggplot and leaflet\nIncrease your familiarity and confidence with data science tools\n\n\n\nWeek’s Schedule",
    "crumbs": [
      "Welcome!"
    ]
  },
  {
    "objectID": "index.html#nceas-expertise",
    "href": "index.html#nceas-expertise",
    "title": "NCEAS Learning Hub’s coreR Course",
    "section": "NCEAS Expertise",
    "text": "NCEAS Expertise\nThe National Center for Ecological Analysis and Synthesis (NCEAS), a research affiliate of UCSB, is a leading expert on interdisciplinary data science and works collaboratively to answer the world’s largest and most complex questions. The NCEAS approach leverages existing data and employs a team science philosophy to squeeze out all potential insights and solutions efficiently - this is called synthesis science.\nNCEAS has over 25 years of success with this model among working groups and environmental professionals. Together with the Delta Science Program and the Delta Stewardship Council we are excited to pass along skills, workflows, mindsets learn throughout the years.",
    "crumbs": [
      "Welcome!"
    ]
  },
  {
    "objectID": "index.html#code-of-conduct",
    "href": "index.html#code-of-conduct",
    "title": "NCEAS Learning Hub’s coreR Course",
    "section": "Code of Conduct",
    "text": "Code of Conduct\nBy participating in this activity you agree to abide by the NCEAS Code of Conduct.",
    "crumbs": [
      "Welcome!"
    ]
  },
  {
    "objectID": "index.html#about-this-book",
    "href": "index.html#about-this-book",
    "title": "NCEAS Learning Hub’s coreR Course",
    "section": "About this book",
    "text": "About this book\nThese written materials are the result of a continuous and collaborative effort at NCEAS to help researchers make their work more transparent and reproducible. This work began in the early 2000’s, and reflects the expertise and diligence of many, many individuals. The primary authors are listed in the citation below, with additional contributors recognized for their role in developing previous iterations of these or similar materials.\nThis work is licensed under a Creative Commons Attribution 4.0 International License.\nUPDATE Citation: Camila Vargas Poulsen & Angel Chen (2024), NCEAS coreR for Delta Science Program, June 2024, NCEAS Learning Hub. URL https://learning.nceas.ucsb.edu/2024-06-delta.\nAdditional contributors: Ben Bolker, Amber E. Budden, Julien Brun, Samantha Csik, Halina Do-Linh, Natasha Haycock-Chavez, S. Jeanette Clark, Julie Lowndes, Stephanie Hampton, Matt Jone, Samanta Katz, Erin McLean, Bryce Mecum, Deanna Pennington, Karthik Ram, Jim Regetz, Tracy Teal, Daphne Virlar-Knight, Leah Wasser.\nThis is a Quarto book. To learn more about Quarto books visit https://quarto.org/docs/books.",
    "crumbs": [
      "Welcome!"
    ]
  },
  {
    "objectID": "session_01.html",
    "href": "session_01.html",
    "title": "1  Welcome: Let’s Talk About Reproducibility",
    "section": "",
    "text": "Learning Objectives",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome: Let's Talk About Reproducibility</span>"
    ]
  },
  {
    "objectID": "session_01.html#learning-objectives",
    "href": "session_01.html#learning-objectives",
    "title": "1  Welcome: Let’s Talk About Reproducibility",
    "section": "",
    "text": "Introduce the concept of reproducibility\nUnderstand the benefits of setting a reproducible workflows\nDiscuss reproducibility best practices: File system structure, file organization, robust file paths.\n\n\n\n\n\n\n\n\nNote\n\n\n\nMaterial for this lesson can be found here.\n\n\n\n\n\n\nBy Allison Horst",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome: Let's Talk About Reproducibility</span>"
    ]
  },
  {
    "objectID": "session_01.html#introduction-to-reproducible-research",
    "href": "session_01.html#introduction-to-reproducible-research",
    "title": "1  Welcome: Let’s Talk About Reproducibility",
    "section": "1.1 Introduction to reproducible research",
    "text": "1.1 Introduction to reproducible research\nReproducibility is the hallmark of science, which is based on empirical observations coupled with explanatory models. And reproducible research is at the core of what we do at NCEAS, research synthesis.\nThe National Center for Ecological Analysis and Synthesis was funded over 25 years ago to bring together interdisciplinary researchers in exploration of grand challenge ecological questions through analysis of existing data. Such questions often require integration, analysis and synthesis of diverse data across broad temporal, spatial and geographic scales. Data that is not typically collected by a single individual or collaborative team. Synthesis science, leveraging previously collected data, was a novel concept at that time and the approach and success of NCEAS has been a model for other synthesis centers.\n During this course you will learn about some of the challenges that can be encountered when working with published data, but more importantly, how to apply best practices to data collection, documentation, analysis and management to mitigate these challenges in support of reproducible research.\n\nWhy is reproducible research important?\nWorking in a reproducible manner builds efficiencies into your own research practices. The ability to automate processes and rerun analyses as you collect more data, or share your full workflow (including data, code and products) with colleagues, will accelerate the pace of your research and collaborations. However, beyond these direct benefits, reproducible research builds trust in science with the public, policy makers and others.\n\nWhat data were used in this study? What methods applied? What were the parameter settings? What documentation or code are available to us to evaluate the results? Can we trust these data and methods?\nAre the results reproducible?\n\nIonnidis (2005) contends that “Most research findings are false for most research designs and for most fields”, and a study of replicability in psychology experiments found that “Most replication effects were smaller than the original results” (Open Science Collaboration, 2015).\n\nIn the case of ‘climategate’, it took three years, and over 300 personnel, to gather the necessary provenance information in order to document how results, figures and other outputs were derived from input sources. Time and effort that could have been significantly reduced with appropriate documentation and reproducible practices. Moving forward, through reproducible research training, practices, and infrastructure, the need to manually chase this information will be reduced enabling replication studies and great trust in science.\n\n\nComputational reproducibility\nWhile reproducibility encompasses the full science lifecycle, and includes issues such as methodological consistency and treatment of bias, in this course we will focus on computational reproducibility: the ability to document data, analyses, and models sufficiently for other researchers to be able to understand and ideally re-execute the computations that led to scientific results and conclusions.\nThe first step towards addressing these issues is to be able to evaluate the data, analyses, and models on which conclusions are drawn. Under current practice, this can be difficult because data are typically unavailable, the method sections of papers do not detail the computational approaches used, and analyses and models are often conducted in graphical programs, or, when scripted analyses are employed, the code is not available.\nAnd yet, this is easily remedied. Researchers can achieve computational reproducibility through open science approaches, including straightforward steps for archiving data and code openly along with the scientific workflows describing the provenance of scientific results (e.g., Hampton et al. (2015), Munafò et al. (2017)).\n\n\nConceptualizing workflows\nScientific workflows encapsulate all of the steps from data acquisition, cleaning, transformation, integration, analysis, and visualization.\n\nWorkflows can range in detail from simple flowcharts to fully executable scripts. R scripts and python scripts are a textual form of a workflow, and when researchers publish specific versions of the scripts and data used in an analysis, it becomes far easier to repeat their computations and understand the provenance of their conclusions.\n\n\n1.1.0.1 Summary\nComputational reproducibility provides:\n\ntransparency by capturing and communicating scientific workflows\nresearch to stand on the shoulders of giants (build on work that came before)\ncredit for secondary usage and supports easy attribution\nincreased trust in science\n\nPreserving computational workflows enables understanding, evaluation, and reuse for the benefit of future you and your collaborators and colleagues across disciplines.\nReproducibility means different things to different researchers. For our purposes, practical reproducibility looks like:\n\nPreserving the data\nPreserving the software workflow\nDocumenting what you did\nDescribing how to interpret it all\n\nDuring this course will outline best practices for how to make those four components happen.\n\n\n\n\nHampton, Stephanie E, Sean Anderson, Sarah C Bagby, Corinna Gries, Xueying Han, Edmund Hart, Matthew B Jones, et al. 2015. “The Tao of Open Science for Ecology.” Ecosphere 6 (July). https://doi.org/http://dx.doi.org/10.1890/ES14-00402.1.\n\n\nMunafò, Marcus R., Brian A. Nosek, Dorothy V. M. Bishop, Katherine S. Button, Christopher D. Chambers, Nathalie Percie du Sert, Uri Simonsohn, Eric-Jan Wagenmakers, Jennifer J. Ware, and John P. A. Ioannidis. 2017. “A Manifesto for Reproducible Science.” Nature Human Behaviour 1 (1): 0021. https://doi.org/10.1038/s41562-016-0021.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome: Let's Talk About Reproducibility</span>"
    ]
  },
  {
    "objectID": "session_02.html",
    "href": "session_02.html",
    "title": "2  RStudio Server Setup",
    "section": "",
    "text": "Learning Objectives",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>RStudio Server Setup</span>"
    ]
  },
  {
    "objectID": "session_02.html#learning-objectives",
    "href": "session_02.html#learning-objectives",
    "title": "2  RStudio Server Setup",
    "section": "",
    "text": "Practice creating an R Project\nOrganize an R Project for effective project management\nUnderstand how to move in an R Project using paths and working directories",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>RStudio Server Setup</span>"
    ]
  },
  {
    "objectID": "session_02.html#logon-to-the-rstudio-server",
    "href": "session_02.html#logon-to-the-rstudio-server",
    "title": "2  RStudio Server Setup",
    "section": "2.1 Logon to the RStudio Server",
    "text": "2.1 Logon to the RStudio Server\nTo prevent us from spending most of this lesson troubleshooting the myriad of issues that can arise when setting up the R, RStudio, and git environments, we have chosen to have everyone work on a remote server with all of the software you need installed. We will be using a special kind of RStudio just for servers called RStudio Server. If you have never worked on a remote server before, you can think of it like working on a different computer via the internet. Note that the server has no knowledge of the files on your local filesystem, but it is easy to transfer files from the server to your local computer, and vice-versa, using the RStudio server interface.\n\n\n\n\n\n\nServer Setup\n\n\n\nYou should have received an email prompting you to change your password for your server account. If you did not, please put up a post-it and someone will help you.\nAfter you have successfully changed your password log in at: https://included-crab.nceas.ucsb.edu/",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>RStudio Server Setup</span>"
    ]
  },
  {
    "objectID": "session_02.html#create-an-r-project",
    "href": "session_02.html#create-an-r-project",
    "title": "2  RStudio Server Setup",
    "section": "2.2 Create an R Project",
    "text": "2.2 Create an R Project\nIn this course, we are going to be using an R project to organize our work. An R project is tied to a directory on your local computer, and makes organizing your work and collaborating with others easier.\nThe Big Idea: using an R project is a reproducible research best practice because it bundles all your work within a working directory. Consider your current data analysis workflow. Where do you import you data? Where do you clean and wrangle it? Where do you create graphs, and ultimately, a final report? Are you going back and forth between multiple software tools like Microsoft Excel, JMP, and Google Docs? An R project and the tools in R that we will talk about today will consolidate this process because it can all be done (and updated) in using one software tool, RStudio, and within one R project.\n\n\n\n\n\n\nR Project Setup\n\n\n\n\nIn the “File” menu, select “New Project”\nClick “New Directory”\nClick “New Project”\nUnder “Directory name” type: training_{USERNAME} (i.e. training_vargas)\nLeave “Create Project as subdirectory of:” set to ~\nClick “Create Project”\n\nRStudio should open your new project automatically after creating it. One way to check this is by looking at the top right corner and checking for the project name.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>RStudio Server Setup</span>"
    ]
  },
  {
    "objectID": "session_02.html#organizing-an-r-project",
    "href": "session_02.html#organizing-an-r-project",
    "title": "2  RStudio Server Setup",
    "section": "2.3 Organizing an R Project",
    "text": "2.3 Organizing an R Project\nWhen starting a new research project, one of the first things I do is create an R Project for it (just like we have here!). The next step is to then populate that project with relevant directories. There are many tools out there that can do this automatically. Some examples are rrtools or usethis::create_package(). The goal is to organize your project so that it is a compendium of your research. This means that the project has all of the digital parts needed to replicate your analysis, like code, figures, the manuscript, and data access.\nSome common directories are:\n\n\n\ndata: where we store our data (often contains subdirectories for raw, processed, and metadata data)\nR: contains scripts for cleaning or wrangling, etc. (some find this name misleading if their work has other scripts beyond the R programming language, in which case they call this directory scripts)\nplots or figs: generated plots, graphs, and figures\ndocs: summaries or reports of analysis or other relevant project information\n\nDirectory organization will vary from project to project, but the ultimate goal is to create a well organized project for both reproducibility and collaboration.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>RStudio Server Setup</span>"
    ]
  },
  {
    "objectID": "session_02.html#moving-in-an-r-project-using-paths-working-directories",
    "href": "session_02.html#moving-in-an-r-project-using-paths-working-directories",
    "title": "2  RStudio Server Setup",
    "section": "2.4 Moving in an R Project using Paths & Working Directories",
    "text": "2.4 Moving in an R Project using Paths & Working Directories\n\nNow that we have your project created (and notice we know it’s an R Project because we see a .Rproj file in our Files pane), let’s learn how to move in a project. We do this using paths.\nThere are two types of paths in computing: absolute paths and relative paths.\n\nAn absolute path always starts with the root of your file system and locates files from there. The absolute path to my project directory is: /home/vargas-poulsen/training_vargas\nRelative paths start from some location in your file system that is below the root. Relative paths are combined with the path of that location to locate files on your system. R (and some other languages like MATLAB) refer to the location where the relative path starts as our working directory.\n\nRStudio projects automatically set the working directory to the directory of the project. This means that you can reference files from within the project without worrying about where the project directory itself is. If I want to read in a file from the data directory within my project, I can simply type read.csv(\"data/samples.csv\") as opposed to read.csv(\"/home/vargas-poulsen/training_vargas/data/samples.csv\").\nThis is not only convenient for you, but also when working collaboratively. We will talk more about this later, but if Matt makes a copy of my R project that I have published on GitHub, and I am using relative paths, he can run my code exactly as I have written it, without going back and changing /home/vargas-poulsen/training_vargas/data/samples.csv to /home/jones/training_jones/data/samples.csv.\nNote that once you start working in projects you should basically never need to run the setwd() command. If you are in the habit of doing this, stop and take a look at where and why you do it. Could leveraging the working directory concept of R projects eliminate this need? Almost definitely!\nSimilarly, think about how you work with absolute paths. Could you leverage the working directory of your R project to replace these with relative paths and make your code more portable? Probably!",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>RStudio Server Setup</span>"
    ]
  },
  {
    "objectID": "session_03.html",
    "href": "session_03.html",
    "title": "3  Git and GitHub Setup",
    "section": "",
    "text": "Learning Objectives",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Git and GitHub Setup</span>"
    ]
  },
  {
    "objectID": "session_03.html#learning-objectives",
    "href": "session_03.html#learning-objectives",
    "title": "3  Git and GitHub Setup",
    "section": "",
    "text": "Set global options in your .gitconfig file\nPractice how to set up GitHub Authentication using a Personal Access Token (PAT)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Git and GitHub Setup</span>"
    ]
  },
  {
    "objectID": "session_03.html#set-up-global-options-in-git",
    "href": "session_03.html#set-up-global-options-in-git",
    "title": "3  Git and GitHub Setup",
    "section": "3.1 Set up global options in Git",
    "text": "3.1 Set up global options in Git\nBefore using Git, you need to tell it who you are, also known as setting the global options. You can do this either on the terminal using git command or in the console using the R package usethis. For this lesson we will use the usethis package. However, you can also find the git commands to reference in the future.\n\n\n\n\n\n\nWhat’s the Terminal?\n\n\n\nTechnically, the Terminal is an interface for the shell, a computer program. To put that simply, we use the Terminal to tell a computer what to do. This is different from the Console in RStudio, which interprets R code and returns a value.\nYou can access the terminal through RStudio by clicking Tools &gt; Terminal &gt; New Terminal.\nA Terminal tab should now be open right next to the Console tab.\n\n\n\n\n\n\n\n\nDon’t be afraid to dip your toes in the Terminal\n\n\n\nMost of our Git operations will be done in RStudio, but there are some situations where you must work in the Terminal and use command line. It may be daunting to code in the Terminal, but as your comfort increases over time, you might find you prefer it. Either way, it’s beneficial to learn enough command line and to feel comfortable in the Terminal.\n\n\nTo introduce ourselves to git we are going to use the function usethis::use_git_config(), followed by usethis::git_default_branch_configure(). This will update our global options with our GitHub user name and email information.\nBelow you will find code to do this in the console using functions from the usethis package and the terminal using git commands.\nMake sure to type your exact GitHub username and email associated to your GitHub account.\n\nConsoleTerminal\n\n\nStep 1: set the user’s global user.name and user.email and define integrate changes from one branch into another branch for all repositories.\n\n1usethis::use_git_config(user.name = \"my_user_name\",\n2                        user.email = \"my_email@nceas.ucsb.edu\",\n3                        pull.rebase = \"false\")\n\n\n1\n\nAdd you exact same GitHub user name. Case and spelling matters!\n\n2\n\nSet up your email address associated to you GitHub account.\n\n3\n\nSetting “merge” as the default strategy to integrate changes from one branch into another branch (for all repos). Check the note at the end of this chapter for more details.\n\n\n\n\nStep 2: define the name of the branch that gets created when you make the first commit in a new Git repo\n\nusethis::git_default_branch_configure(name = \"main\")\n\nStep 3: check to make sure everything looks correct\n\nusethis::git_sitrep()\n\n\n\nStep 1: set the user’s global user.name and user.email and define merge strategy for all repositories.\ngit config --global user.name \"my_user_name\"\nPress enter/return.\nNote that if the code ran successfully, it will look like nothing happened. We will check at the end to make sure it worked.\nThen run:\ngit config --global user.email \"my_email@nceas.ucsb.edu\"\nPress enter/return.\nThen run:\ngit config --global pull.rebase false\nStep 2: define the name of the branch that gets created when you make the first commit in a new Git repo.\ngit config --global init.defaultBranch main\nStep 3: check to make sure everything looks correct.\nThe following command return the global options you have set.\ngit config --global --list\n\n\n\n\n\n\n\n\n\n\nCase and spelling matters!\n\n\n\nWhen you add your username and email to the global options you must use the exact same spelling and case that you used on GitHub otherwise, Git won’t be able to sync to your account.\n\n\n\n\n\n\n\n\nWhy set the default branch name to main?\n\n\n\nPreviously, the default branch name was master and this racist terminology for Git branches motivates us to update our default branch to main instead.\n\n\n\nSet a long timeout for the git cache\nFinally, we will run a step that is only necessary when working on a server. We need to set our credentials to not time out for a very long time. This is related to how our server operating system handles credentials - not doing this will make your Personal Access Token (PAT, which we will set up in the next section) expire after 15 min on the system, even though it is actually valid for at least a month. We will do this configuration in the terminal.\nYou can access the terminal through RStudio by clicking Tools &gt; Terminal &gt; New Terminal.\n\n\n\n\n\n\nIMPORTANT!!\n\n\n\nDO NOT RUN THE NEXT LINE when setting up Git and GitHub on your Personal Computer\n\n\nBy running the following command we are asking git to store our credential information in the cache for 10 million seconds (almost 4 months).\ngit config --global credential.helper 'cache --timeout=10000000'",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Git and GitHub Setup</span>"
    ]
  },
  {
    "objectID": "session_03.html#github-authentication",
    "href": "session_03.html#github-authentication",
    "title": "3  Git and GitHub Setup",
    "section": "3.2 GitHub Authentication",
    "text": "3.2 GitHub Authentication\nGitHub recently deprecated password authentication for accessing repositories, so we need to set up a secure way to authenticate.\nThe book Happy Git and GitHub for the useR has a wealth of information related to working with Git in R, and these instructions are based off of Chapter 9 Personal access token for HTTPS.\nWe will be using a Personal Access Token (PAT) in this course. For better security and long term use, we recommend taking the extra steps to set up SSH keys (check out Chapter 10 Set up Keys for SSH).\n\n\n\n\n\n\nSetting up your PAT\n\n\n\n\nRun usethis::create_github_token() in the Console.\nA new browser window should open up to GitHub, showing all the scopes options. You can review the scopes, but you don’t need to worry about which ones to select this time. The previous function automatically pre-selects some recommended scopes. Go ahead and scroll to the bottom and click “Generate Token”.\nCopy the generated token.\nBack in RStudio, run gitcreds::gitcreds_set() in the Console.\nPaste your PAT when the prompt asks for it.\nLast thing, run usethis::git_sitrep() in the Console to check your Git configuration and that you’ve successful stored your PAT. Note: look for Personal access token for 'https://github.com': '&lt;discovered&gt;'\n\nIf you see &lt;unset&gt; instead of &lt;discovered&gt; means your PAT is not correctly set. You need to troubleshoot.\n\n\nCongrats! Now you’ve setup your authentication you should be able to work with GitHub in RStudio now.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Git and GitHub Setup</span>"
    ]
  },
  {
    "objectID": "session_03.html#strategy-to-integrate-changes-from-one-branch-into-another",
    "href": "session_03.html#strategy-to-integrate-changes-from-one-branch-into-another",
    "title": "3  Git and GitHub Setup",
    "section": "3.3 Strategy to integrate changes from one branch into another",
    "text": "3.3 Strategy to integrate changes from one branch into another\nAbove we configured our global options for all the repositories you create in your server session to use pull.rebase = \"false\" as the strategy to integrate changes from two branches. With this we are saying to merge changes (as opposed to rebasing).\nIt is important to highlight that this configuration can be repo specific. This mean, you can configure how you want git to reconciling two branches at a repository level and not “for all repositories”. Allowing you to control on how git weaves things in when collaborating with others.\nIf you don’t define pull.rebase = \"false\" when setting the global configurations, you will have to define this for each repository you create. You will likely see the following message after you pull, meaning you have not define how to reconciling two branches in your repository.\n\nTo solve this issues you have to run either of the two suggested strategies on the terminal.\ngit config pull.rebase false\nor\ngit config pull.rebase true",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Git and GitHub Setup</span>"
    ]
  },
  {
    "objectID": "session_04.html",
    "href": "session_04.html",
    "title": "4  Introduction to R & RStudio",
    "section": "",
    "text": "Learning Objectives",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to R & RStudio</span>"
    ]
  },
  {
    "objectID": "session_04.html#learning-objectives",
    "href": "session_04.html#learning-objectives",
    "title": "4  Introduction to R & RStudio",
    "section": "",
    "text": "Get oriented with the RStudio interface\nRun code and basic arithmetic in the Console\nPractice writing code in an R Script\nBe introduced to built-in R functions\nUse the Help pages to look up function documentation\n\n\nThis lesson is a combination of excellent lessons by others. Huge thanks to Julie Lowndes for writing most of this content and letting us build on her material, which in turn was built on Jenny Bryan’s materials. We highly recommend reading through the original lessons and using them as reference (see in the resources section below).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to R & RStudio</span>"
    ]
  },
  {
    "objectID": "session_04.html#welcome-to-r-programming",
    "href": "session_04.html#welcome-to-r-programming",
    "title": "4  Introduction to R & RStudio",
    "section": "4.1 Welcome to R Programming",
    "text": "4.1 Welcome to R Programming\n\n\n\nArtwork by Allison Horst\n\n\nThere is a vibrant community out there that is collectively developing increasingly easy to use and powerful open source programming tools. The changing landscape of programming is making learning how to code easier than it ever has been. Incorporating programming into analysis workflows not only makes science more efficient, but also more computationally reproducible. In this course, we will use the programming language R, and the accompanying integrated development environment (IDE) RStudio. R is a great language to learn for data-oriented programming because it is widely adopted, user-friendly, and (most importantly) open source!\nSo what is the difference between R and RStudio? Here is an analogy to start us off. If you were a chef, R is a knife. You have food to prepare, and the knife is one of the tools that you’ll use to accomplish your task.\nAnd if R were a knife, RStudio is the kitchen. RStudio provides a place to do your work! Other tools, communication, community, it makes your life as a chef easier. RStudio makes your life as a researcher easier by bringing together other tools you need to do your work efficiently - like a file browser, data viewer, help pages, terminal, community, support, the list goes on. So it’s not just the infrastructure (the user interface or IDE), although it is a great way to learn and interact with your variables, files, and interact directly with git. It’s also data science philosophy, R packages, community, and more. Although you can prepare food without a kitchen and we could learn R without RStudio, that’s not what we’re going to do. We are going to take advantage of the great RStudio support, and learn R and RStudio together.\nSomething else to start us off is to mention that you are learning a new language here. It’s an ongoing process, it takes time, you’ll make mistakes, it can be frustrating, but it will be overwhelmingly awesome in the long run. We all speak at least one language; it’s a similar process, really. And no matter how fluent you are, you’ll always be learning, you’ll be trying things in new contexts, learning words that mean the same as others, etc, just like everybody else. And just like any form of communication, there will be miscommunication that can be frustrating, but hands down we are all better off because of it.\nWhile language is a familiar concept, programming languages are in a different context from spoken languages and you will understand this context with time. For example: you have a concept that there is a first meal of the day, and there is a name for that: in English it’s “breakfast.” So if you’re learning Spanish, you could expect there is a word for this concept of a first meal. (And you’d be right: “desayuno”). We will get you to expect that programming languages also have words (called functions in R) for concepts as well. You’ll soon expect that there is a way to order values numerically. Or alphabetically. Or search for patterns in text. Or calculate the median. Or reorganize columns to rows. Or subset exactly what you want. We will get you to increase your expectations and learn to ask and find what you’re looking for.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to R & RStudio</span>"
    ]
  },
  {
    "objectID": "session_04.html#rstudio-ide",
    "href": "session_04.html#rstudio-ide",
    "title": "4  Introduction to R & RStudio",
    "section": "4.2 RStudio IDE",
    "text": "4.2 RStudio IDE\nLet’s take a tour of the RStudio interface.\n\nNotice the default panes:\n\nConsole (entire left)\nEnvironment/History (tabbed in upper right)\nFiles/Plots/Packages/Help (tabbed in lower right)\n\n\n\n\n\n\n\nQuick Tip\n\n\n\nYou can change the default location of the panes, among many other things, see Customizing RStudio.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to R & RStudio</span>"
    ]
  },
  {
    "objectID": "session_04.html#coding-in-the-console",
    "href": "session_04.html#coding-in-the-console",
    "title": "4  Introduction to R & RStudio",
    "section": "4.3 Coding in the Console",
    "text": "4.3 Coding in the Console\n\n\n\n\n\n\nBut first, an important first question: where are we?\n\n\n\nIf you’ve just opened RStudio for the first time, you’ll be in your Home directory. This is noted by the ~/ at the top of the console. You can see too that the Files pane in the lower right shows what is in the Home directory where you are. You can navigate around within that Files pane and explore, but note that you won’t change where you are: even as you click through you’ll still be Home: ~/.\n\n\n\n\n\n\n\nWe can run code in a couple of places in RStudio, including the Console, let’s start there.\nAt it’s most basic, we can use R as a calculator, let’s try a couple of examples in the console.\n\n# run in the console\n# really basic examples\n3*4\n3+4\n3-4\n3/4\n\nWhile there are many cases where it makes sense to type code directly in to the the console, it is not a great place to write most of your code since you can’t save what you ran. A better way is to create an R Script, and write your code there. Then when you run your code from the script, you can save it when you are done. We’re going to continue writing code in the Console for now, but we’ll code in an R Script later in this lesson\n\n\n\n\n\n\nQuick Tip\n\n\n\nWhen you’re in the console you’ll see a greater than sign (&gt;) at the start of a line. This is called the “prompt” and when we see it, it means R is ready to accept commands. If you see a plus sign (+) in the Console, it means R is waiting on additional information before running. You can always press escape (esc) to return to the prompt. Try practicing this by running 3* (or any incomplete expression) in the console.\n\n\n\n4.3.1 Objects in R\nLet’s say the value of 12 that we got from running 3*4 is a really important value we need to keep. To keep information in R, we need to create an object. The way information is stored in R is through objects.\nWe can assign a value of a mathematical operation (and more!) to an object in R using the assignment operator, &lt;- (greater than sign and minus sign). All objects in R are created using the assignment operator, following this form: object_name &lt;- value.\n\n\n\n\n\n\nExercise: Create an object\n\n\n\nAssign 3*4 to an object called important_value and then inspect the object you just created.\n\n\n\n# think of this code as someone saying \"important_value gets 12\".\nimportant_value &lt;- 3*4\n\nNotice how after creating the object, R doesn’t print anything. However, we know our code worked because we see the object, and the value we wanted to store is now visible in our Global Environment. We can force R to print the value of the object by calling the object name (aka typing it out) or by using parentheses.\n\n\n\n\n\n\nQuick Tip\n\n\n\nWhen you begin typing an object name RStudio will automatically show suggested completions for you that you can select by hitting tab, then press return.\n\n\n\n# printing the object by calling the object name\nimportant_value\n\n[1] 12\n\n# printing the object by wrapping the assignment syntax in parentheses\n(important_value &lt;- 3*4)\n\n[1] 12\n\n\n\n\n\n\n\n\nQuick Tip\n\n\n\nWhen you’re in the Console use the up and down arrow keys to call your command history, with the most recent commands being shown first.\n\n\n\n\n4.3.2 Naming Conventions\nBefore we run more calculations, let’s talk about naming objects. For the object, important_value we used an underscore to separate the object name. This naming convention is called snake case. There are other naming conventions including, but not limited to:\n\nwe_used_snake_case\nsomeUseCamelCase\nSomeUseUpperCamelCaseAlsoCalledPascalCase\n\nChoosing a naming convention is a personal preference, but once you choose one - be consistent! A consistent naming convention will increase the readability of your code for others and your future self.\n\n\n\n\n\n\nQuick Tip\n\n\n\nObject names cannot start with a digit and cannot contain certain characters such as a comma or a space.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to R & RStudio</span>"
    ]
  },
  {
    "objectID": "session_04.html#running-code-in-an-r-script",
    "href": "session_04.html#running-code-in-an-r-script",
    "title": "4  Introduction to R & RStudio",
    "section": "4.4 Running code in an R Script",
    "text": "4.4 Running code in an R Script\nSo far we’ve been running code in the Console, let’s try running code in an R Script. An R Script is a simple text file. RStudio uses an R Script by copying R commands from text in the file and pastes them into the Console as if you were manually entering commands yourself.\n\n\n\n\n\n\nCreating an R Script\n\n\n\n\nFrom the “File” menu, select “New File”\nClick “R Script” from the list of options\n\nRStudio should open your R Script automatically after creating it. Notice a new pane appears above the Console. This is called the Source pane and is where we write and edit R code and documents. This pane is only present if there are files open in the editor.\n\nSave the R Script as intro-to-programming.R\n\n\n\n\n4.4.1 How to run code in an R Script\nRunning code in an R Script is different than running code in the Console (aka you can’t just press return / enter). To interpret and run the code you’ve written, R needs you to send the code from the script (or editor) to the Console. Some common ways to run code in an R Script include:\n\nPlace your cursor on the line of code you want to run and use the shortcut command + return or click the Run button in the top right of the Source pane.\nHighlight the code you want to run, then use the shortcut command + return or click the Run button.\n\n\n\n4.4.2 R calculations with objects\nSo we know that objects are how R stores information, and we know we create objects using the assignment operator &lt;-. Let’s build upon that and learn how to use an object in calculations.\nImagine we have the weight of a dog in kilograms. Create the object weight_kg and assign it a value of 55.\n\n# weight of a dog in kilograms\nweight_kg &lt;- 55 \n\nNow that R has weight_kg saved in the Global Environment, we can run calculations with it.\n\n\n\n\n\n\nExercise: Using weight_kg run a simple calculation\n\n\n\nLet’s convert the weight into pounds. Weight in pounds is 2.2 times the weight in kg.\n\n\n\n# converting weight from kilograms to pounds\n2.2 * weight_kg\n\n[1] 121\n\n\nYou can also store more than one value in a single object. Storing a series of weights in a single object is a convenient way to perform the same operation on multiple values at the same time. One way to create such an object is with the function c(), which stands for combine or concatenate.\nFirst let’s create a vector of weights in kilograms using c() (we’ll talk more about vectors in the next section, Data structures in R).\n\n# create a vector of weights in kilograms\nweight_kg &lt;- c(55, 25, 12)\n# call the object to inspect\nweight_kg\n\n[1] 55 25 12\n\n\nNow convert the vector weight_kg to pounds.\n\n# covert `weight_kg` to pounds \nweight_kg * 2.2\n\n[1] 121.0  55.0  26.4\n\n\nWouldn’t it be helpful if we could save these new weight values we just converted? This might be important information we may need for a future calculation. How would you save these new weights in pounds?\n\n# create a new object \nweight_lb &lt;- weight_kg * 2.2\n# call `weight_lb` to check if the information you expect is there\nweight_lb\n\n[1] 121.0  55.0  26.4\n\n\n\n\n\n\n\n\nQuick Tip\n\n\n\nYou will make many objects and the assignment operator &lt;- can be tedious to type over and over. Instead, use RStudio’s keyboard shortcut: option + - (the minus sign).\nNotice that RStudio automatically surrounds &lt;- with spaces, which demonstrates a useful code formatting practice. Code is miserable to read on a good day. Give your eyes a break and use spaces.\nRStudio offers many handy keyboard shortcuts. Also, option+Shift+K brings up a keyboard shortcut reference card.\nFor more RStudio tips, check out Master of Environmental Data Science (MEDS) workshop: IDE Tips & Tricks.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to R & RStudio</span>"
    ]
  },
  {
    "objectID": "session_04.html#data-types-in-r",
    "href": "session_04.html#data-types-in-r",
    "title": "4  Introduction to R & RStudio",
    "section": "4.5 Data types in R",
    "text": "4.5 Data types in R\n\nCommon data types in R\n\n\n\n\n\n\nData Type\nDefinition\n\n\n\n\nboolean (also called logical)\nData take on the value of either TRUE, FALSE, or NA. NA is used to represent missing values.\n\n\ncharacter\nData are string values. You can think of character strings as something like a word (or multiple words). A special type of character string is a factor, which is a string but with additional attributes (like levels or an order).\n\n\ninteger\nData are whole numbers (those numbers without a decimal point). To explicitly create an integer data type, use the suffix L (e.g. 2L).\n\n\nnumeric (also called double)\nData are numbers that contain a decimal.\n\n\n\n\nLess common data types (we won’t be going into these data types this course)\n\n\n\n\n\n\nData Type\nDefinition\n\n\n\n\ncomplex\nData are complex numbers with real and imaginary parts.\n\n\nraw\nData are raw bytes.\n\n\n\nWe’ve been using primarily integer or numeric data types so far. Let’s create an object that has a string value or a character data type.\n\nscience_rocks &lt;- \"yes it does!\"\n\n“yes it does!” is a string, and R knows it’s a word and not a number because it has quotes \" \". You can work with strings in your data in R easily thanks to the stringr and tidytext packages.\nThis lead us to an important concept in programming: As we now know, there are different “classes” or types of objects in R. The operations you can do with an object will depend on what type of object it is because each object has their own specialized format, designed for a specific purpose. This makes sense! Just like you wouldn’t do certain things with your car (like use it to eat soup), you won’t do certain operations with character objects (strings).\nAlso, everything in R is an object. An object is a variable, function, data structure, or method that you have written to your environment.\nTry running the following line in your script:\n\n\"Hello world!\" * 3\n\nWhat happened? What do you see in the Console? Why?\n\n\n\n\n\n\nQuick Tip\n\n\n\nYou can see what data type or class an object is using the class() function, or you can use a logical test such as: is.numeric(), is.character(), is.logical(), and so on.\n\nclass(science_rocks) # returns character\nis.numeric(science_rocks) # returns FALSE\nis.character(science_rocks) # returns TRUE",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to R & RStudio</span>"
    ]
  },
  {
    "objectID": "session_04.html#data_structures",
    "href": "session_04.html#data_structures",
    "title": "4  Introduction to R & RStudio",
    "section": "4.6 Data structures in R",
    "text": "4.6 Data structures in R\nOkay, now let’s talk about vectors.\nA vector is the most common and most basic data structure in R. Vectors can be thought of as a way R stores a collection of values or elements. Think back to our weight_lb vector. That was a vector of three elements each with a data type or class of numeric.\nWhat we’re describing is a specific type of vector called atomic vectors. To put it simply, atomic vectors only contain elements of the same data type. Atomic vectors are very common.\nVectors are foundational for other data structures in R, including data frames, and while we won’t go into detail about other data structures there are great resources online that do. We recommend the chapter Vectors from the online book Advanced R by Hadley Wickham.\n\n# atomic vector examples #\n# character vector\nchr_atomic_vector &lt;- c(\"hello\", \"good bye\", \"see you later\")\n# numeric vector\nnumeric_atomic_vector &lt;- c(5, 1.3, 10)\n# logical vector\nboolean_atomic_vector &lt;- c(TRUE, FALSE, TRUE)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to R & RStudio</span>"
    ]
  },
  {
    "objectID": "session_04.html#r-functions",
    "href": "session_04.html#r-functions",
    "title": "4  Introduction to R & RStudio",
    "section": "4.7 R Functions",
    "text": "4.7 R Functions\nSo far we’ve learned some of the basic syntax and concepts of R programming, and how to navigate RStudio, but we haven’t done any complicated or interesting programming processes yet. This is where functions come in!\nA function is a way to group a set of commands together to undertake a task in a reusable way. When a function is executed, it produces a return value. We often say that we are “calling” a function when it is executed. Functions can be user defined and saved to an object using the assignment operator, so you can write whatever functions you need, but R also has a mind-blowing collection of built-in functions ready to use. To start, we will be using some built in R functions.\nAll functions are called using the same syntax: function name with parentheses around what the function needs in order to do what it was built to do. These “needs” are pieces of information called arguments, and are required to return an expected value.\n\n\n\n\n\n\nSyntax of a function will look something like:\n\n\n\nresult_value &lt;- function_name(argument1 = value1, argument2 = value2, ...)\n\n\nBefore we use a function, let’s talk about Help pages.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to R & RStudio</span>"
    ]
  },
  {
    "objectID": "session_04.html#getting-help-using-help-pages",
    "href": "session_04.html#getting-help-using-help-pages",
    "title": "4  Introduction to R & RStudio",
    "section": "4.8 Getting help using help pages",
    "text": "4.8 Getting help using help pages\nWhat if you know the name of the function that you want to use, but don’t know exactly how to use it? Thankfully RStudio provides an easy way to access the help documentation for functions.\nThe next function we’re about to use is the mean() function.\nTo access the help page for mean(), enter the following into your console:\n\n?mean\n\nThe Help pane will show up in the lower right hand corner of your RStudio.\nThe Help page is broken down into sections:\n\nDescription: An extended description of what the function does.\nUsage: The arguments of the function(s) and their default values.\nArguments: An explanation of the data each argument is expecting.\nDetails: Any important details to be aware of.\nValue: The data the function returns.\nSee Also: Any related functions you might find useful.\nExamples: Some examples for how to use the function.\n\nAnd there’s also help for when you only sort of remember the function name: double-question mark:\n\n??install \n\n\n\n\n\n\n\nNot all functions have (or require) arguments\n\n\n\nCheck out the documentation or Help page for date().\n\n?date()",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to R & RStudio</span>"
    ]
  },
  {
    "objectID": "session_04.html#examples-using-built-in-r-functions-mean-and-read.csv",
    "href": "session_04.html#examples-using-built-in-r-functions-mean-and-read.csv",
    "title": "4  Introduction to R & RStudio",
    "section": "4.9 Examples using built-in R functions mean() and read.csv()",
    "text": "4.9 Examples using built-in R functions mean() and read.csv()\n\n4.9.1 Use the mean() function to run a more complex calculation\nLet’s override our weight object with some new values, and this time we’ll assign it three dog weights in pounds:\n\nweight_lb &lt;- c(55, 25, 12)\n\n\n\n\n\n\n\nExercise: Use the mean() function to calculate the mean weight.\n\n\n\nFrom the its Help page, we learned this function will take the mean of a set of numbers. Very convenient!\nWe also learned that mean() only has one argument we need to supply a value to (x). The rest of the arguments have default values.\n\n\n\n\nCode\nmean(x = weight_lb)\n\n\n[1] 30.66667\n\n\n\n\n\n\n\n\nExercise: Save the mean to an object called mean_weight_lb\n\n\n\nHint: What operator do we use to save values to an object?\n\n\n\n\nCode\n# saving the mean using the assignment operator `&lt;-`\nmean_weight_lb &lt;- mean(x = weight_lb)\n\n\n\n\n\n\n\n\nExercise: Update weight_lb\n\n\n\nLet’s say each of the dogs gained 5 pounds and we need to update our vector, so let’s change our object’s value by assigning it new values.\n\n\n\n\nCode\nweight_lb &lt;- c(60, 30, 17)\n\n\nCall mean_weight_lb in the console or take a look at your Global Environment. Is that the value you expected? Why or why not?\nIt wasn’t the value we expected because mean_weight_lb did not change. This demonstrates an important R programming concept: Assigning a value to one object does not change the values of other objects in R.\nNow that we understand why the object’s value hasn’t changed - how do we update the value of mean_weight_lb? How is an R Script useful for this?\nThis lead us to another important programming concept, specifically for R Scripts: An R Script runs top to bottom.\nThis order of operations is important because if you are running code line by line, the values in object may be unexpected. When you are done writing your code in an R Script, it’s good practice to clear your Global Environment and use the Run button and select “Run all” to test that your R Script successfully runs top to bottom.\n\n\n4.9.2 Use the read.csv() function to read a file into R\nSo far we have learned how to assign values to objects in R, and what a function is, but we haven’t quite put it all together yet with real data yet. To do this, we will introduce the function read.csv(), which will be in the first lines of many of your future scripts. It does exactly what it says, it reads in a csv file to R.\nSince this is our first time using this function, first access the help page for read.csv(). This has a lot of information in it, as this function has a lot of arguments, and the first one is especially important - we have to tell it what file to look for. Let’s get a file!\n\n\n\n\n\n\nDownload a file from the Arctic Data Center\n\n\n\n\nNavigate to this dataset by Craig Tweedie that is published on the Arctic Data Center. Craig Tweedie. 2009. North Pole Environmental Observatory Bottle Chemistry. Arctic Data Center. doi:10.18739/A25T3FZ8X.\nDownload the first csv file called BGchem2008data.csv by clicking the “download” button next to the file.\nMove this file from your Downloads folder into the data directory we created in our R Project training_{USERNAME}.\n\n\n\nNow we have to tell read.csv() how to find the file. We do this using the file argument which you can see in the usage section in the help page. In R, you can either use absolute paths (which will start with your home directory ~/) or paths relative to your current working directory. RStudio has some great auto-complete capabilities when using relative paths, so we will go that route.\nAssuming you have moved your file to a folder within training_{USERNAME} called data, and your working directory is your project directory (training_{USERNAME}) your read.csv() call will look like this:\n\n# reading in data using relative paths\nbg_chem_dat &lt;- read.csv(file = \"data/BGchem2008data.csv\")\n\nYou should now have an object of the class data.frame in your environment called bg_chem_dat. Check your environment pane to ensure this is true. Or you can check the class using the function class() in the console.\n\n\n\n\n\n\nOptional Arguments\n\n\n\nNotice that in the Help page there are many arguments that we didn’t use in the call above. Some of the arguments in function calls are optional, and some are required.\nOptional arguments will be shown in the usage section with a name = value pair, with the default value shown. If you do not specify a name = value pair for that argument in your function call, the function will assume the default value (example: header = TRUE for read.csv()).\nRequired arguments will only show the name of the argument, without a value. Note that the only required argument for read.csv() is file.\n\n\nYou can always specify arguments in name = value form. But if you do not, R attempts to resolve by position. So above, it is assumed that we want file = \"data/BGchem2008data.csv\", since file is the first argument.\nIf we explicitly called the file argument our code would like this:\n\nbg_chem_dat &lt;- read.csv(file = \"data/BGchem2008data.csv\")\n\nIf we wanted to add another argument, say stringsAsFactors, we need to specify it explicitly using the name = value pair, since the second argument is header.\nMany R users (including myself) will set the stringsAsFactors argument using the following call:\n\n# relative file path\nbg_chem_dat &lt;- read.csv(\"data/BGchem2008data.csv\", stringsAsFactors = FALSE)\n\n\n\n\n\n\n\nQuick Tip\n\n\n\nFor functions that are used often, you’ll see many programmers will write code that does not explicitly call the first or second argument of a function.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to R & RStudio</span>"
    ]
  },
  {
    "objectID": "session_04.html#working-with-data-frames-in-r-using-the-subset-operator",
    "href": "session_04.html#working-with-data-frames-in-r-using-the-subset-operator",
    "title": "4  Introduction to R & RStudio",
    "section": "4.10 Working with data frames in R using the Subset Operator $",
    "text": "4.10 Working with data frames in R using the Subset Operator $\nA data.frame is a list data structure in R that can represent tables and spreadsheets – we can think of it as a table. It is a collection of rows and columns of data, where each column has a name and represents a variable, and each row represents an observation containing a measurement of that variable. When we ran read.csv(), the object bg_chem_dat that we created was a data.frame. The columns in a data.frame might represent measured numeric response values (e.g., weight_kg), classifier variables (e.g., site_name), or categorical response variables (e.g., course_satisfaction). There are many ways R and RStudio help you explore data frames. Here are a few, give them each a try:\n\nClick on the word bg_chem_dat in the environment pane\nClick on the arrow next to bg_chem_dat in the environment pane\nExecute head(bg_chem_dat) in the Console\nExecute View(bg_chem_dat) in the Console\n\nUsually we will want to run functions on individual columns in a data.frame. To call a specific column, we use the list subset operator $.\nSay you want to look at the first few rows of the Date column only:\n\nhead(bg_chem_dat$Date)\n\nYou can also use the subset operator $ calculations. For example, let’s calculated the mean temperature of all the CTD samples.\n\nmean(bg_chem_dat$CTD_Temperature)\n\nYou can also save this calculation to an object that was created using the subset operator $.\n\nmean_temp &lt;- mean(bg_chem_dat$CTD_Temperature)\n\n\n\n\n\n\n\nOther ways to load tablular data\n\n\n\nWhile the base R package provides read.csv as a common way to load tabular data from text files, there are many other ways that can be convenient and will also produce a data.frame as output. Here are a few:\n\nUse the readr::read_csv() function from the Tidyverse to load the data file. The readr package has a bunch of convenient helpers and handles CSV files in typically expected ways, like properly typing dates and time columns. bg_chem_dat &lt;- readr::read_csv(\"data/BGchem2008data.csv\")\nLoad tabular data from Excel spreadsheets using the readxl::read_excel() function.\nLoad tabular data from Google Sheets using the googlesheets4::read_sheet() function.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to R & RStudio</span>"
    ]
  },
  {
    "objectID": "session_04.html#error-messages-are-your-friends",
    "href": "session_04.html#error-messages-are-your-friends",
    "title": "4  Introduction to R & RStudio",
    "section": "4.11 Error messages are your friends",
    "text": "4.11 Error messages are your friends\nThere is an implicit contract with the computer/scripting language: Computer will do tedious computation for you. In return, you will be completely precise in your instructions. Typos matter. Case matters. Pay attention to how you type.\nRemember that this is a language, not dissimilar to English! There are times you aren’t understood – it’s going to happen. There are different ways this can happen. Sometimes you’ll get an error. This is like someone saying ‘What?’ or ‘Pardon’? Error messages can also be more useful, like when they say ‘I didn’t understand this specific part of what you said, I was expecting something else’. That is a great type of error message. Error messages are your friend. Google them (copy-and-paste!) to figure out what they mean. Note that knowing how to Google is a skill and takes practice - use our Masters of Environmental Data Science (MEDS) program workshop Teach Me How to Google as a guide.\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnd also know that there are errors that can creep in more subtly, without an error message right away, when you are giving information that is understood, but not in the way you meant. Like if I’m telling a story about tables and you’re picturing where you eat breakfast and I’m talking about data. This can leave me thinking I’ve gotten something across that the listener (or R) interpreted very differently. And as I continue telling my story you get more and more confused… So write clean code and check your work as you go to minimize these circumstances!",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to R & RStudio</span>"
    ]
  },
  {
    "objectID": "session_04.html#r-packages",
    "href": "session_04.html#r-packages",
    "title": "4  Introduction to R & RStudio",
    "section": "4.12 R Packages",
    "text": "4.12 R Packages\n\n\n\nArtwork by Allison Horst\n\n\nR packages are the building blocks of computational reproducibility in R. Each package contains a set of related functions that enable you to more easily do a task or set of tasks in R. There are thousands of community-maintained packages out there for just about every imaginable use of R - including many that you have probably never thought of!\nTo install a package, we use the syntax install.packages(\"packge_name\"). A package only needs to be installed once, so this code can be run directly in the console if needed. Generally, you don’t want to save your install package calls in a script, because when you run the script it will re-install the package, which you only need to do once, or if you need to update the package.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to R & RStudio</span>"
    ]
  },
  {
    "objectID": "session_04.html#r-resources",
    "href": "session_04.html#r-resources",
    "title": "4  Introduction to R & RStudio",
    "section": "4.13 R Resources",
    "text": "4.13 R Resources\n\nAwesome R Resources to Check out\n\n\n\n\n\n\nLearning R Resources\n\nIntroduction to R lesson in Data Carpentry’s R for data analysis course\nJenny Bryan’s Stat 545 course materials\nJulie Lowndes’ Data Science Training for the Ocean Health Index\nLearn R in the console with swirl\nProgramming in R\nR, RStudio, RMarkdown\n\n\n\nCommunity Resources\n\nNCEAS’ EcoDataScience\nR-Ladies\nrOpenSci\nMinorities in R (MiR)\nTwitter - there is a lot here but some hashtags to start with are:\n\n#rstats\n#TidyTuesday\n#dataviz\n\n\n\n\nCheatsheets\n\nBase R Cheatsheet\nLaTeX Equation Formatting\nMATLAB/R Translation Cheatsheet",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to R & RStudio</span>"
    ]
  },
  {
    "objectID": "session_04.html#bonus-content",
    "href": "session_04.html#bonus-content",
    "title": "4  Introduction to R & RStudio",
    "section": "4.14 Bonus Content",
    "text": "4.14 Bonus Content\n\n4.14.1 Clearing the environment\nTake a look at the objects in your Environment (Workspace) in the upper right pane. The Workspace is where user-defined objects accumulate. There are a few useful commands for getting information about your Environment, which make it easier for you to reference your objects when your Environment gets filled with many, many objects.\n\nYou can get a listing of these objects with a couple of different R functions:\n\nobjects()\n\n[1] \"boolean_atomic_vector\" \"chr_atomic_vector\"     \"important_value\"      \n[4] \"mean_weight_lb\"        \"numeric_atomic_vector\" \"science_rocks\"        \n[7] \"weight_kg\"             \"weight_lb\"            \n\nls()\n\n[1] \"boolean_atomic_vector\" \"chr_atomic_vector\"     \"important_value\"      \n[4] \"mean_weight_lb\"        \"numeric_atomic_vector\" \"science_rocks\"        \n[7] \"weight_kg\"             \"weight_lb\"            \n\n\nIf you want to remove the object named weight_kg, you can do this:\n\nrm(weight_kg)\n\nTo remove everything (or click the Broom icon in the Environment pane):\n\nrm(list = ls())\n\n\n\n\n\n\n\nQuick Tip\n\n\n\nIt’s good practice to clear your environment. Over time your Global Environmental will fill up with many objects, and this can result in unexpected errors or objects being overridden with unexpected values. Also it’s difficult to read / reference your environment when it’s cluttered!\n\n\n\n\n4.14.2 Logical operators and expressions\nWe can ask questions about an object using logical operators and expressions. Let’s ask some “questions” about the weight_lb object we made.\n\n== means ‘is equal to’\n!= means ‘is not equal to’\n&lt; means ‘is less than’\n&gt; means ‘is greater than’\n&lt;= means ‘is less than or equal to’\n&gt;= means ‘is greater than or equal to’\n\n\n# examples using logical operators and expressions\nweight_lb == 2\nweight_lb &gt;= 30\nweight_lb != 5",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to R & RStudio</span>"
    ]
  },
  {
    "objectID": "session_05.html",
    "href": "session_05.html",
    "title": "5  Literate Analysis with Quarto",
    "section": "",
    "text": "Learning Objectives",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Literate Analysis with Quarto</span>"
    ]
  },
  {
    "objectID": "session_05.html#learning-objectives",
    "href": "session_05.html#learning-objectives",
    "title": "5  Literate Analysis with Quarto",
    "section": "",
    "text": "Introduce literate analysis using Quarto (an extension of RMarkdown’s features)\nLearn markdown syntax and run R code using Quarto\nBuild and render an example analysis",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Literate Analysis with Quarto</span>"
    ]
  },
  {
    "objectID": "session_05.html#introduction-to-literate-programming",
    "href": "session_05.html#introduction-to-literate-programming",
    "title": "5  Literate Analysis with Quarto",
    "section": "5.1 Introduction to Literate Programming",
    "text": "5.1 Introduction to Literate Programming\nAll too often, computational methods are written in such a way as to be borderline incomprehensible even to the person who originally wrote the code! The reason for this is obvious, computers interpret information very differently than people do. In 1984, Donald Knuth proposed a reversal of the programming paradigm by introducing the concept of Literate Programming (Knuth 1984).\n\n“Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do.”\n\nIf our aim is to make scientific research more transparent, the appeal of this paradigm reversal is immediately apparent. By switching to a literate analysis model, you help enable human understanding of what the computer is doing. As Knuth describes, in the literate analysis model, the author is an “essayist” who chooses variable names carefully, explains what they mean, and introduces concepts in the analysis in a way that facilitates understanding.\nQuarto and RMarkdown are an excellent way to generate literate analysis, and a reproducible workflow. These types of files, combine R the programming language, and markdown, a set of text formatting directives.\nIn an R script, the language assumes that you are writing R code, unless you specify that you are writing prose (using a comment, designated by #). The paradigm shift of literate analysis comes in the switch to RMarkdown or Quarto, where instead of assuming you are writing code, they assume that you are writing prose unless you specify that you are writing code. This, along with the formatting provided by markdown, encourages the “essayist” to write understandable prose to accompany the code that explains to the human-beings reading the document what the author told the computer to do. This is in contrast to writing just R code, where the author telling to the computer what to do with maybe a smattering of terse comments explaining the code to a reader.\nBefore we dive in deeper, let’s look at an example of what a rendered literate analysis can look like using a real example. Here is an example of an analysis workflow written using RMarkdown. Note that if this analysis would be in Quarto, the render version it would be similar, except for formatting and layout (eg: the default font in Quarto is different).\nThere are a few things to notice about this document, which assembles a set of similar data sources on salmon brood tables with different formatting into a single data source.\n\nIt introduces the data sources using in-line images, links, interactive tables, and interactive maps.\nAn example of data formatting from one source using R is shown.\nThe document executes a set of formatting scripts in a directory to generate a single merged file.\nSome simple quality checks are performed (and their output shown) on the merged data.\nSimple analysis and plots are shown.\n\nIn addition to achieving literate analysis, this document also represents a reproducible analysis. Because the entire merging and quality control of the data is done using the R code in the Quarto file, if a new data source and formatting script are added, the document can be run all at once with a single click to re-generate the quality control, plots, and analysis of the updated data.\n\n\n\n\n\n\nA note on reproducibility\n\n\n\nReproducible analysis allow you to automatize how the figures and the statistics in your analysis are generated. This process also helps your collaborators, your readers and your future self to follow your code trail the leads to the original data, increasing the transparency of your science.\nLiterate analysis help reduce the mistakes from copying and pasting across software, keeps results and models in sync, and allows you to provide interested readers with more information about the different approaches and analyses you tried before coming up with the final results (British Ecological Society (2017)).",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Literate Analysis with Quarto</span>"
    ]
  },
  {
    "objectID": "session_05.html#rmarkdown-and-quarto",
    "href": "session_05.html#rmarkdown-and-quarto",
    "title": "5  Literate Analysis with Quarto",
    "section": "5.2 RMarkdown and Quarto",
    "text": "5.2 RMarkdown and Quarto\nYou can identify a Quarto file with the .qmd extension. On the other hand, an RMarkdown file has a .Rmd extension. Both have similar structures and both combine prose with code.Quarto provides a rich support to languages other than R such as Python, Observable, and Julia. It also excels in formatting and layout. Allowing users to customize in details the looks of the rendered documents. On the other hand, RMarkdown is compatible with some languages that Quarto is not, for example bash. Quarto and Rmarkdown are amazing tools to use for collaborative research. During this course e will spend some time learning and using the basics of Quarto and provide some comparisons to RMarkdown.\n\nNow, let’s take a look at the structure of each of these files. The both look for the most part the same with minor differences.\n\n\nFinally, lets compare each of these files when knitted/rendered.\n\n\nAgain, we see similar outcomes, with minor differences mainly in formatting (font, style of showing code chunks, etc.)\nBoth type of documents have three main components:\n\nYAML metadata to guide the document’s build process\nCode chunks to run\nProse (Text to display)\n\nToday we are going to use Quarto to run some analysis on data. We are specifically going to focus on the code chunk and text components. We will discuss more about the how the YAML works in an Quarto later in the course.\n\n\n\n\n\n\nThe YAML\n\n\n\nIs the document’s metadata which sets guidelines on how your want the output of your document to look like. It is located at the top of your file, delineated by three dashes (---) at the top and at the bottom of it. It can be used to specify:\n\nCharacteristics of your documents such at title, author, date of creation.\nArgument to pass on the building process to control the format of the output.\nAdd additional information such as the bibliography file (and formatting of the references)\nSpecific parameters for your report (eg: just used a subset of the data).",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Literate Analysis with Quarto</span>"
    ]
  },
  {
    "objectID": "session_05.html#a-quarto-document",
    "href": "session_05.html#a-quarto-document",
    "title": "5  Literate Analysis with Quarto",
    "section": "5.3 A Quarto Document",
    "text": "5.3 A Quarto Document\nLet’s open an Quarto file following the instructions below.\n\n\n\n\n\n\nSetup\n\n\n\n\nOpen a new Quarto file using the following prompts: File &gt; New File &gt; Quarto Document\nA popup window will appear.\nGive your file a new title, e.g “Introduction to Quarto”.\nLeave the output format as HTML and Engine set to Knitr.\nThen click the “Create” button.\n\n\n\nThe first thing to notice is that by opening a file, we see the fourth pane of the RStudio pops up. This is our Quarto document which is essentially a text editor. We also see in the upper left side that we are looking at the document under the “Visual editor”. This is probably a familiar way of looking at a text document. To introduce the markdown syntax, we re going to move to the source editor and then come back to the visual editor. In the upper left corner, click on Source. See how the formatting changed? In the Source editor we are looking at the same text, but in markdown syntax. The visual editor on the other hand, allows us to see how markdown is rendered, therefore how is it going to look in our output document.\nLet’s have a look at this file — As we saw in the examples above, it looks a little different than a R script. It’s not blank; there is some initial text already provided for you. Lets identify the three main components we introduces before. We have the YAML a the top, in between the two sets of dashed lines. Then we also see white and grey sections. The gray sections are R code chunks and the white sections are plain text.\nLet’s go ahead and render this file by clicking the “Render” button, next to the blue arrow at the top of the Quarto file. When you first click this button, RStudio will prompt you to save this file. Save it in the top level of your home directory on the server, and name it something that you will remember (like quarto-intro.Rmd).\n\n\n\nWhat do you notice between the two?\nFirst, the render process produced a second file (an HTML file) that popped up in a second window in the browser. You’ll also see this file in your directory with the same name as your qmd, but with the .html extension. In it’s simplest format, Quarto files come in pairs (same than RMarkdown files) the Quarto document, and its rendered version. In this case, we are rendering, the file into HTML. You can also knit to PDF or Word files and others.\nNotice how the grey R code chunks are surrounded by 3 back-ticks and {r LABEL}. The first chunk, in this case 1+1, is evaluated and return the output number (2). Notice the line in the second chunk that says #| echo: false? This is a code chunk option that indicates not to print the code. In the rendered version, we can see the outcome of 2*2 but not the executed code that created the outcome.\nThe table below show some of the options available to customizing outputs (Quarto.org).\n\nCode chunk options\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\n#| eval:\nEvaluate the code chunk (if false, just echos the code into the output).\n\n\n#| echo:\nInclude the source code in output\n\n\n#| warning:\nInclude warnings in the output.\n\n\n#| error:\nInclude warnings in the output.\n\n\n#| include:\nCatch all for preventing any output (code or results) from being included (e.g.include: false suppresses all output from the code block).\n\n\n\nNote that you can also combine these options by adding more than one to a code chunk.\n\n\n\n\n\n\nImportant\n\n\n\nOne important difference between Quarto documents and RMarkdown documents is that in Quarto, chunk options are written in special comment format (#|) at the top of code chunks rather than within the wiggly brackets next to ```{r} at the begging of the chunk. For example:\n\nQuarto code options syntax\n\n\n\nRMarkdown code options syntax\n\n\n\n\nIt is important to emphasize one more time that in an Quarto (and RMarkdown) document, the gray areas of the document are code, in this case R code because that is what it is indicated in the ```{r} syntax at the start of this gray area. And the white areas of a qmd are in markdown language.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Literate Analysis with Quarto</span>"
    ]
  },
  {
    "objectID": "session_05.html#markdown-syntax",
    "href": "session_05.html#markdown-syntax",
    "title": "5  Literate Analysis with Quarto",
    "section": "5.4 Markdown Syntax",
    "text": "5.4 Markdown Syntax\nLet’s start by talking about markdown. Markdown is a formatting language for plain text, and there are only around 15 rules to know.\nNotice the syntax in the document we just knitted:\n\nHeaders get rendered at multiple levels: #, ##\nBold: **word**\n\nThere are some good cheatsheets to get you started, and here is one built into RStudio: Go to Help &gt; Markdown Quick Reference.\n\n\n\n\n\n\nImportant\n\n\n\nThe hash symbol # is used differently in markdown and in R\n\nIn an R script or inside an R code chunk, a hash indicates a comment that will not be evaluated. You can use as many as you want: # is equivalent to ######. It’s just a matter of style.\nIn markdown, a hash indicates a level of a header. And the number you use matters: # is a “level one header”, meaning the biggest font and the top of the hierarchy. ### is a level three header, and will show up nested below the # and ## headers.\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\nIn markdown, Write some italic text, make a numbered list, and add a few sub-headers. Use the Markdown Quick Reference (in the menu bar: Help &gt; Markdown Quick Reference).\nRe-knit your html file and observe your edits.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Literate Analysis with Quarto</span>"
    ]
  },
  {
    "objectID": "session_05.html#the-visual-editor",
    "href": "session_05.html#the-visual-editor",
    "title": "5  Literate Analysis with Quarto",
    "section": "5.5 The Visual Editor",
    "text": "5.5 The Visual Editor\nQuarto has a “what you see is what you mean” (WYSIWYM) editor or Visual editor, which can be a nice way to write markdown without remembering all of the markdown rules. Since there aren’t many rules for markdown, we recommend just learning them especially since markdown is used in many, many other contexts besides Quarto and RMarkdown. For example, formatting GitHub comments and README files.\nTo access the editor, click the Visual button in the upper left hand corner of your editor pane. You’ll notice that your document is now formatted as you type, and you can change elements of the formatting using the row of icons in the top of the editor pane. Although we don’t really recommend doing all of your markdown composition in the Visual editor, there are two features to this editor that we believe are immensely helpful, adding citations, and adding tables.\n\n5.5.1 Adding citations\nTo add a citation, go to the visual editor and in the insert drop down, select “Citation.” In the window that appears, there are several options in the left hand panel for the source of your citation. If you have a citation manager, such as Zotero, installed, this would be included in that list. For now, select “From DOI”, and in the search bar enter a DOI of your choice (e.g.: 10.1038/s41467-020-17726-z), then select “Insert.”\n\nAfter selecting insert, a couple of things happen. First, the citation reference is inserted into your markdown text as [@oke2020]. Second, a file called references.bib containing the BibTex format of the citation is created. Third, that file is added to the YAML header of your Quarto document (bibliography: references.bib). Adding another citation will automatically update your references.bib file. So easy!\n\n\n5.5.2 Adding table in markdown\nThe second task that the visual editor is convenient for is generating tables. Markdown tables are a bit finicky and annoying to type, and there are a number of formatting options that are difficult to remember if you don’t use them often. In the top icon bar, the “Table” drop down gives several options for inserting, editing, and formatting tables. Experiment with this menu to insert a small table.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Literate Analysis with Quarto</span>"
    ]
  },
  {
    "objectID": "session_05.html#code-chunks-in-quarto",
    "href": "session_05.html#code-chunks-in-quarto",
    "title": "5  Literate Analysis with Quarto",
    "section": "5.6 Code Chunks in Quarto",
    "text": "5.6 Code Chunks in Quarto\nEvery time when opening a new Quarto document we should start by deleting all template text (everything except for the YAML). Then we save the document into the most convenient folder of our project. Now we are ready to start our work.\nYou can create a new chunk in your Quarto in one of these ways:\n\nGo to Code in the top menu bar, click “Insert Chunk”\nType by hand {r}\nUse the keyboard shortcut\n\nMac:command + option + i\nWindows: Ctrl + Alt + i\n\n\n\n\n\n\n\n\nAbout code chunks\n\n\n\nEach code chunk needs to have an opening syntax ```{r} and a closing syntax ```. Everything in between these lines will be identified as R code.\n\n\nIf I want to write some R code, this is how it would look like.\n\nx &lt;- 4 * 8\n\nhights_ft &lt;- c(5.2, 6.0, 5.7)\n\ncoef &lt;- 3.14\n\nHitting return does not execute this command; remember, it’s just a text file. To execute it, we need to get what we typed in the the R chunk (the grey R code) down into the console. How do we do it? There are several ways (let’s do each of them):\n\nCopy-paste this line into the console (generally not recommended as a primary method)\nSelect the line (or simply put the cursor there), and click “Run”. This is available from:\n\nthe bar above the file (green arrow)\nthe menu bar: Code &gt; Run Selected Line(s)\nkeyboard shortcut: command-return\n\nClick the green arrow at the right of the code chunk",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Literate Analysis with Quarto</span>"
    ]
  },
  {
    "objectID": "session_05.html#practice-literate-analysis-with-ocean-water-samples",
    "href": "session_05.html#practice-literate-analysis-with-ocean-water-samples",
    "title": "5  Literate Analysis with Quarto",
    "section": "5.7 Practice: Literate Analysis with ocean water samples",
    "text": "5.7 Practice: Literate Analysis with ocean water samples\nNow that we have gone over the basics, let’s go a little deeper by building a simple, Quarto document that represents a literate analysis using real data. We are going to work with the seawater chemistry data. We are going to download a file named BGchem2008data.csv from the Arctic Data Center repository. Please follow the steps below to download the data and then upload to your RStudio Server data folder.\n\n5.7.1 Getting Started\n\n\n\n\n\n\nSet up\n\n\n\n\nNavigate to this dataset by Craig Tweedie that is published on the Arctic Data Center. Craig Tweedie. 2009. North Pole Environmental Observatory Bottle Chemistry. Arctic Data Center. doi:10.18739/A25T3FZ8X.\nDownload the first csv file called BGchem2008data.csv by clicking the “download” button next to the file.\nClick the “Upload” button in your RStudio server file browser.\nIn the dialog box, make sure the destination directory is the data directory in your R project, click “Choose File,” and locate the BGchem2008data.csv file. Press “OK” to upload the file.\nCheck your file was successfully uploaded by navigating into your data folder in the Files pane.\n\n\n\n:::\nExperienced R users who have never used Quarto (or RMarkdown) often struggle a bit in the transition to developing analysis in Prose+Code format — which makes sense! It is switching the code paradigm to a new way of thinking.\nRather than starting an R chunk and putting all of your code in that single chunk, below we describe what we think is a better way.\n\nOpen a document and block out the high-level sections you know you’ll need to include using top level headers.\nAdd bullet points for some high level pseudo-code steps you know you’ll need to take.\nStart filling in under each bullet point the code that accomplishes each step. As you write your code, transform your bullet points into prose, and add new bullet points or sections as needed.\n\nFor this mini-analysis, we will have the following sections and code steps:\n\nIntroduction\n\nAbout the data\nSetup\nRead in data\n\nAnalysis\n\nCalculate summary statistics\nCalculate mean Redfield ratio\nPlot Redfield ratio\n\nConclusion\n\n\n\n\n\n\n\nExercise\n\n\n\nUnder “About the data”, write a sentence saying where the data set came from, including a hyperlink ti the data. Also mention when was the data downloaded.\nHint: Navigate to Help &gt; Markdown Quick Reference to look-up the hyperlink syntax.\n\n\n\n\n5.7.2 Read in the data\nNow that we have outlined our document, we can start writing code! To read the data into our environment, we will use a function from the readr package.\nTo use a package in our analysis, we need to first make sure it is installed (you can install a package by running install.package(\"name-of-package\")). Once installed you need to load it into our environment using library(package_name). Even though we have installed it, we haven’t yet told our R session to access it. Because there are so many packages (many with conflicting namespaces) R cannot automatically load every single package you have installed. Instead, you load only the ones you need for a particular analysis. Loading the package is a key part of the reproducible aspect of our literate analysis, so we will include it as an R chunk as part of our Setup.\n\n\n\n\n\n\nBest Practice\n\n\n\nIt is generally good practice to include all of your library() calls in a single, dedicated R chunk near the top of your document. This lets collaborators know what packages they might need to install before they start running your code.\n\n\nThe server should have already installed the two packages we need for now: readr and here. Let’s add a new R chunk below your Setup header that calls these libraries, and run it.\nIt should look like this:\n\nlibrary(readr)\nlibrary(here)\n\n\n\n\n\n\n\nQuarto file path and the here() function\n\n\n\nQuarto has a special way of handling relative paths that can be very handy. When working in an Quarto document, R will set all paths relative to the location of the Quarto file. This can make things easier to read in data if your Quarto document is stored in the same directory or “near” by. However, more often that not, your .qmd file will be stored in a a folder (e.g scripts) and your data in a data folder, (both folder in the main project directory).\nThe here() function helps navigate this file path mix up in a straight forward and reproducible way. This function sets the file path to the project’s directory and builds the rest of the file path from there. Making it easier to find files inside different folders in a project. In this case, because the .qmd file lives in the script folder, here() makes is easy to navigate back into the project’s directory and then into the data folder to read in our file.\n\n\nNow, under “Read data”, add a code chunk that uses the read_csv() with the here() function to read in your data file.\n\n\nRows: 70 Columns: 19\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (1): Station\ndbl  (16): Latitude, Longitude, Target_Depth, CTD_Depth, CTD_Salinity, CTD_T...\ndttm  (1): Time\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nbg_chem &lt;- read_csv(here::here(\"data/BGchem2008data.csv\"))\n\n\n\nWhy read_csv() over read.csv()?\nWe chose to show read_csv() from the readr package to introduce the concept of packages, to show you how to load packages, and read_csv() has several advantages over read.csv() from base R, including:\n\nMore reasonable function defaults (no stringsAsFactors!)\nSmarter column type parsing, especially for dates\nread_csv() is much faster than read.csv(), which is helpful for large files\n\nOnce you run this line in your document, you should see the bg_chem object populate in your environment pane. It also spits out lots of text explaining what types the function parsed each column into. This text is important, and should be examined, but we might not want it in our final document.\n\n\n\n\n\n\nExercise\n\n\n\nHow would you suppress the warnings (so they don’t show in our output file) form a specific code chunk?\nHint: Code chunk options\n\n\n\n\n5.7.3 Calculate Summary Statistics\nAs our “analysis” we are going to calculate some very simple summary statistics and generate a single plot. Using water samples from the Arctic Ocean, we will examine the ratio of nitrogen to phosphate to see how closely the data match the Redfield ratio, which is the consistent 16:1 ratio of nitrogen to phosphorous atoms found in marine phytoplankton.\nLet’s start by exploring the data we just read. Every time we read a new data set, it is important to familiarize yourself with it and make sure that the data looks as expected. Below some useful functions for exploring your data.\nLet’s start by creating a new R chunk and run the following functions. Because this just an exploration and we do not want this chunk to be part of our report, we will indicate that by adding #|eval: false and #| echo: false in the setup of the chunk, that way, the code in this chunk will not run and not be displayed when I knit the final document.\n\n## Prints the column names of my data frame\ncolnames(bg_chem)\n\n## General structure of the data frame - shows class of each column\nstr(bg_chem)\n\n## First 6 lines of the data frame\nhead(bg_chem)\n\n## Summary of each column of data\nsummary(bg_chem)\n\n## Prints unique values in a column (in this case Date)\nunique(bg_chem$Date)\n\nTo peek out data frame, we can type View(bg_chem) in the console. This will open a tab with our data frame in a tabular format.\nNow that we know a more about the data set we are working with lets do some analyses. Under the appropriate bullet point in your analysis section, create a new R chunk, and use it to calculate the mean nitrate (NO3), nitrite (NO2), ammonium (NH4), and phosphorous (P) measured.\nSave these mean values as new variables with easily understandable names, and write a (brief) description of your operation using markdown above the chunk. Remember that the $ (aka the subset operator) indicates which column of your data to look into.\n\nnitrate &lt;- mean(bg_chem$NO3)\nnitrite &lt;- mean(bg_chem$NO2)\namm &lt;- mean(bg_chem$NH4)\nphos &lt;- mean(bg_chem$P)\n\nIn another chunk, use those variables to calculate the nitrogen: phosphate ratio (Redfield ratio).\n\nratio &lt;- (nitrate + nitrite + amm)/phos\n\nYou can access this variable in your markdown text by using R in-line in your text. The syntax to call R in-line (as opposed to as a chunk) is a single back tick `, followed by the letter “r”, then whatever your simple R command is — here we will use round(ratio) to print the calculated ratio, and finally a closing back tick `. This allows us to access the value stored in this variable in our explanatory text without resorting to the evaluate-copy-paste method so commonly used for this type of task.\nSo, the text in you Quarto document should look like this:\nThe Redfield ratio for this dataset is approximately: `r round(ratio)`\nAnd the rendered text like this:\nThe Redfield ratio for this dataset is approximately 6.\nFinally, create a simple plot using base R that plots the ratio of the individual measurements, as opposed to looking at mean ratio.\n\nplot(bg_chem$P, bg_chem$NO2 + bg_chem$NO3 + bg_chem$NH4)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nDecide whether or not you want the plotting code above to show up in your knitted document along with the plot, and implement your decision as a chunk option.\nRender your Quarto document (by pressing the Render button) and observe the results.\n\n\n\n\n\n\n\n\nHow do I decide when to make a new code chunk?\n\n\n\nLike many of life’s great questions, there is no clear cut answer. A rule of thumb is to have one chunk per functional unit of analysis. This functional unit could be 50 lines of code or it could be 1 line, but typically it only does one “thing.” This could be reading in data, making a plot, or defining a function. It could also mean calculating a series of related summary statistics (as we’ll see below). Ultimately, the choice is one related to personal preference and style, but generally you should ensure that code is divided up such that it is easily explainable in a literate analysis as the code is run.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Literate Analysis with Quarto</span>"
    ]
  },
  {
    "objectID": "session_05.html#quarto-and-environments",
    "href": "session_05.html#quarto-and-environments",
    "title": "5  Literate Analysis with Quarto",
    "section": "5.8 Quarto and Environments",
    "text": "5.8 Quarto and Environments\nLet’s walk through an exercise with the document we just created to demonstrate how Quarto handles environments. We will be deliberately inducing some errors here for demonstration purposes.\nFirst, follow these steps:\n\n\n\n\n\n\nSetup\n\n\n\n\nRestart your R session (Session &gt; Restart R)\nRun the last chunk in your Quarto document by pressing the play button on the chunk\n\n\n\nPerhaps not surprisingly, we get an error:\nError in plot(bg_chem$P, bg_chem$NO2 + bg_chem$NO3 + bg_chem$NH4) : \n  object 'bg_chem' not found\nThis is because we have not run the chunk of code that reads in the bg_chem data. The R part of Quarto works just like a regular R script. You have to execute the code, and the order that you run it in matters. It is relatively easy to get mixed up in a large Quarto document — running chunks out of order, or forgetting to run chunks.\nTo resolve this, follow the next step:\n\n\n\n\n\n\nSetup continued\n\n\n\n\nSelect from the “Run” menu (top right of the editor pane) “Run All.”\nObserve the bg_chem variable in your environment\n\n\n\nThis is a great way to reset and re-run code when things seem to have gone sideways. It is great practice to do periodically since it helps ensure you are writing code that actually runs and it’s reproducible.\n\n\n\n\n\n\nFor the next exercise:\n\n\n\n\nClean your environment by clicking the broom in the environment pane\nRestart your R session (Session &gt; Restart R)\nPress “Render” to run all of the code in your document\nObserve the state of your environment pane\n\nAssuming your document rendered and produced an html page, your code ran. Yet, the environment pane is empty. What happened?\n\n\nThe Render button is rather special — it doesn’t just run all of the code in your document. It actually spins up a fresh R environment separate from the one you have been working in, runs all of the code in your document, generates the output, and then closes the environment. This is one of the best ways Quarto (or RMarkdown) helps ensure you have built a reproducible workflow. If, while you were developing your code, you ran a line in the console as opposed to adding it to your Quarto document, the code you develop while working actively in your environment will still work. However, when you knit your document, the environment RStudio spins up doesn’t know anything about that working environment you were in. Thus, your code may error because it doesn’t have that extra piece of information. Commonly, library() calls are the source of this kind of frustration when the author runs it in the console, but forgets to add it to the script.\nTo further clarify the point on environments, perform the following steps:\n\n\n\n\n\n\nSetup continued\n\n\n\n\nSelect from the “Run” menu (top right of editor pane) “Run All”\nObserve all of the variables in your environment\n\n\n\n\n\n\n\n\n\nWhat about all my R Scripts?\n\n\n\nSome pieces of R code are better suited for R scripts than Quarto or RMarkdown. A function you wrote yourself that you use in many different analyses is probably better to define in an R script than repeated across many Quarto or RMarkdown documents. Some analyses have mundane or repetitive tasks that don’t need to be explained very much. For example, in the document shown in the beginning of this lesson, 15 different excel files needed to be reformatted in slightly different, mundane ways, like renaming columns and removing header text. Instead of including these tasks in the primary Quarto document, the authors chose to write one R script per file and stored them all in a directory. Then, took the contents of one script and included it in the literate analysis, using it as an example to explain what the scripts did, and then used the source() function to run them all from within the Quarto document.\nSo, just because you know Quarto now, doesn’t mean you won’t be using R scripts anymore. Both .R and .qmd have their roles to play in analysis. With practice, it will become more clear what works well in Quarto or RMarkdown, and what belongs in a regular R script.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Literate Analysis with Quarto</span>"
    ]
  },
  {
    "objectID": "session_05.html#additional-quarto-resources",
    "href": "session_05.html#additional-quarto-resources",
    "title": "5  Literate Analysis with Quarto",
    "section": "5.9 Additional Quarto Resources",
    "text": "5.9 Additional Quarto Resources\n\nPosit (the organization that developed Quarto) has great documentation, check out Quarto.org\nR for Data Science (2e) (Wickham et al, 2023), this is an awesome book for all R related things. Chapter 29 and 30 are specific to Quarto.\nQuarto Gallery: Example of different outputs created using Quarto\nHello Quarto: share, collaborate, teach, reimagine. A talk by Julia Stewart Lowndes and Mine Cetinkaya-Runde.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Literate Analysis with Quarto</span>"
    ]
  },
  {
    "objectID": "session_05.html#troubleshooting-my-rmarkdownquarto-doc-wont-knit-to-pdf",
    "href": "session_05.html#troubleshooting-my-rmarkdownquarto-doc-wont-knit-to-pdf",
    "title": "5  Literate Analysis with Quarto",
    "section": "5.10 Troubleshooting: My RMarkdown/Quarto doc Won’t Knit to PDF",
    "text": "5.10 Troubleshooting: My RMarkdown/Quarto doc Won’t Knit to PDF\nIf you get an error when trying to knit to PDF that says your computer doesn’t have a LaTeX installation, one of two things is likely happening:\n\nYour computer doesn’t have LaTeX installed\nYou have an installation of LaTeX but RStudio cannot find it (it is not on the path)\n\nIf you already use LaTeX (like to write papers), you fall in the second category. Solving this requires directing RStudio to your installation - and isn’t covered here.\nIf you fall in the first category - you are sure you don’t have LaTeX installed - can use the R package tinytex to easily get an installation recognized by RStudio, as long as you have administrative rights to your computer.\nTo install tinytex run:\n\ninstall.packages(\"tinytex\")\ntinytex::install_tinytex()\n\nIf you get an error that looks like destination /usr/local/bin not writable, you need to give yourself permission to write to this directory (again, only possible if you have administrative rights). To do this, run this command in the terminal:\nsudo chown -R `whoami`:admin /usr/local/bin\nand then try the above install instructions again. Learn more about tinytex from Yihui Xie’s online book TinyTeX. ````\n\n\n\n\nBritish Ecological Society, Mike, Croucher. 2017. “A Guide to Reproducible Code in Ecology and Evolution.” British Ecological Society. https://www.britishecologicalsociety.org/wp-content/uploads/2017/12/guide-to-reproducible-code.pdf.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Literate Analysis with Quarto</span>"
    ]
  },
  {
    "objectID": "session_07.html",
    "href": "session_07.html",
    "title": "7  Introduction to Git and GtiHub",
    "section": "",
    "text": "Learning Objectives",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Git and GtiHub</span>"
    ]
  },
  {
    "objectID": "session_07.html#learning-objectives",
    "href": "session_07.html#learning-objectives",
    "title": "7  Introduction to Git and GtiHub",
    "section": "",
    "text": "Apply the principles of Git to track and manage changes of a project\nUtilize the Git workflow including pulling changes, staging modified files, committing changes, pulling again to incorporate remote changes, and pushing changes to a remote repository\nCreate and configure Git repositories using different workflows",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Git and GtiHub</span>"
    ]
  },
  {
    "objectID": "session_07.html#introduction-to-version-control",
    "href": "session_07.html#introduction-to-version-control",
    "title": "7  Introduction to Git and GtiHub",
    "section": "7.1 Introduction to Version Control",
    "text": "7.1 Introduction to Version Control\n\n\n\n\n\nEvery file in the scientific process changes. Manuscripts are edited. Figures get revised. Code gets fixed when bugs are discovered. Sometimes those fixes lead to even more bugs, leading to more changes in the code base. Data files get combined together. Sometimes those same files are split and combined again. In just one research project, we can expect thousands of changes to occur.\nThese changes are important to track, and yet, we often use simplistic file names to do so. Many of us have experienced renaming a document or script multiple times with the disingenuous addition of “final” to the file name (like the comic above demonstrates).\nYou might think there is a better way, and you’d be right: version control. Version control provides an organized and transparent way to track changes in code and additional files. This practice was designed for software development, but is easily applicable to scientific programming.\nThere are many benefits to using a version control software including:\n\nMaintain a history of your research project’s development while keeping your workspace clean\nFacilitate collaboration and transparency when working on teams\nExplore bugs or new features without disrupting your team members’ work\nand more!\n\nThe version control system we’ll be diving into is Git, the most widely used modern version control system in the world.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Git and GtiHub</span>"
    ]
  },
  {
    "objectID": "session_07.html#introduction-to-git-github",
    "href": "session_07.html#introduction-to-git-github",
    "title": "7  Introduction to Git and GtiHub",
    "section": "7.2 Introduction to Git + GitHub",
    "text": "7.2 Introduction to Git + GitHub\nBefore diving into the details of Git and how to use it, let’s start with a motivating example that’s representative of the types of problems Git can help us solve.\n\n7.2.1 A Motivating Example\nSay, for example, you’re working on an analysis in R and you’ve got it into a state you’re pretty happy with. We’ll call this version 1:\n\n\n\nYou come into the office the following day and you have an email from your boss, “Hey, you know what this model needs?”\n\n\n\nYou’re not entirely sure what she means but you figure there’s only one thing she could be talking about: more cowbell. So you add it to the model in order to really explore the space.\nBut you’re worried about losing track of the old model so, instead of editing the code in place, you comment out the old code and put as serious a warning as you can muster in a comment above it.\n\n\n\nCommenting out code you don’t want to lose is something probably all of us have done at one point or another but it’s really hard to understand why you did this when you come back years later or you when you send your script to a colleague. Luckily, there’s a better way: Version control. Instead of commenting out the old code, we can change the code in place and tell Git to commit our change. So now we have two distinct versions of our analysis and we can always see what the previous version(s) look like.\n\n\n\nYou may have noticed something else in the diagram above: Not only can we save a new version of our analysis, we can also write as much text as we like about the change in the commit message. In addition to the commit message, Git also tracks who, when, and where the change was made.\nImagine that some time has gone by and you’ve committed a third version of your analysis, version 3, and a colleague emails with an idea: What if you used machine learning instead?\n\n\n\nMaybe you’re not so sure the idea will work out and this is where a tool like Git shines. Without a tool like Git, we might copy analysis.R to another file called analysis-ml.R which might end up having mostly the same code except for a few lines. This isn’t particularly problematic until you want to make a change to a bit of shared code and now you have to make changes in two files, if you even remember to.\nInstead, with Git, we can start a branch. Branches allow us to confidently experiment on our code, all while leaving the old code in tact and recoverable.\n\n\n\nSo you’ve been working in a branch and have made a few commits on it and your boss emails again asking you to update the model in some way. If you weren’t using a tool like Git, you might panic at this point because you’ve rewritten much of your analysis to use a different method but your boss wants change to the old method.\n\n\n\nBut with Git and branches, we can continue developing our main analysis at the same time as we are working on any experimental branches. Branches are great for experiments but also great for organizing your work generally.\n\n\n\nAfter all that hard work on the machine learning experiment, you and your colleague could decide to scrap it. It’s perfectly fine to leave branches around and switch back to the main line of development but we can also delete them to tidy up.\n\n\n\nIf, instead, you and your colleague had decided you liked the machine learning experiment, you could also merge the branch with your main development line. Merging branches is analogous to accepting a change in Word’s Track Changes feature but way more powerful and useful.\n\n\n\nA key takeaway here is that Git can drastically increase your confidence and willingness to make changes to your code and help you avoid problems down the road. Analysis rarely follows a linear path and we need a tool that respects this.\n\n\n\nFinally, imagine that, years later, your colleague asks you to make sure the model you reported in a paper you published together was actually the one you used. Another really powerful feature of Git is tags which allow us to record a particular state of our analysis with a meaningful name. In this case, we are lucky because we tagged the version of our code we used to run the analysis. Even if we continued to develop beyond commit 5 (above) after we submitted our manuscript, we can always go back and run the analysis as it was in the past.\n\nWith Git we can enhance our workflow:\n\nEliminate the need for cryptic filenames and comments to track our work.\nProvide detailed descriptions of our changes through commits, making it easier to understand the reasons behind code modifications.\nWork on multiple branches simultaneously, allowing for parallel development, and optionally merge them together.\nUse commits to access and even execute older versions of our code.\nAssign meaningful tags to specific versions of our code.\nAdditionally, Git offers a powerful distributed feature. Multiple individuals can work on the same analysis concurrently on their own computers, with the ability to merge everyone’s changes together.\n\n\n\n\n7.2.2 What exactly are Git and GitHub?\n\nGit:\n\nan open-source distributed version control software\ndesigned to manage the versioning and tracking of source code files and project history\noperates locally on your computer, allowing you to create repositories, and track changes\nprovides features such as committing changes, branching and merging code, reverting to previous versions, and managing project history\nworks directly with the files on your computer and does not require a network connection to perform most operations\nprimarily used through the command-line interface (CLI, e.g. Terminal), but also has various GUI tools available (e.g. RStudio IDE)\n\n\n\n\n\n\nGitHub:\n\nonline platform and service built around Git\nprovides a centralized hosting platform for Git repositories\nallows us to store, manage, and collaborate on their Git repositories in the cloud\noffers additional features on top of Git, such as a web-based interface, issue tracking, project management tools, pull requests, code review, and collaboration features\nenables easy sharing of code with others, facilitating collaboration and contribution to open source projects\nprovides a social aspect, allowing users to follow projects, star repositories, and discover new code\n\n\n\n\n\n\n\n7.2.3 Understanding how local working files, Git, and GitHub all work together\nIt can be a bit daunting to understand all the moving parts of the Git / GitHub life cycle (i.e. how file changes are tracked locally within repositories, then stored for safe-keeping and collaboration on remote repositories, then brought back down to a local machine(s) for continued development). It gets easier with practice, but we’ll explain (first in words, then with an illustration) at a high-level how things work:\n\n7.2.3.1 What is the difference between a “normal” folder vs. a Git repository\nWhether you’re a Mac or a PC user, you’ll likely have created a folder at some point in time for organizing files. Let’s pretend that we create a folder, called myFolder/, and add two files: myData.csv and myAnalysis.R. The contents of this folder are not currently version controlled – meaning, for example, that if we make some changes to myAnalysis.R that don’t quite work out, we have no way of accessing or reverting back to a previous version of myAnalysis.R (without remembering/rewriting things, of course).\nGit allows you to turn any “normal” folder, like myFolder/, into a Git repository – you’ll often see/hear this referenced as “initializing a Git repository”. When you initialize a folder on your local computer as a Git repository, a hidden .git/ folder is created within that folder (e.g. myFolder/.git/) – this .git/ folder is the Git repository. As you use Git commands to capture versions or “snapshots” of your work, those versions (and their associated metadata) get stored within the .git/ folder. This allows you to access and/or recover any previous versions of your work. If you delete .git/, you delete your project’s history.\nHere is our example folder / Git repository represented visually:\n\n\n\n\n\n\n\n\n\n\n\n\n\n7.2.3.2 How do I actually tell Git to preserve versions of my local working files?\nGit was built as a command-line tool, meaning we can use Git commands in the command line (e.g. Terminal, Git Bash, etc.) to take “snapshots” of our local working files through time. Alternatively, RStudio provides buttons that help to easily execute these Git commands.\nGenerally, that workflow looks something like this:\n\nMake changes to a file(s) (e.g. myAnalysis.R) in your working directory.\nStage the file(s) using git add myAnalysis.R (or git add . to stage multiple changed files at once). This lets Git know that you’d like to include the file(s) in your next commit.\nCommit the file(s) using git commit -m \"a message describing my changes\". This records those changes (along with a descriptive message) as a “snapshot” or version in the local repository (i.e. the .git/ folder).\n\n\n\n7.2.3.3 My versioned work is on my local computer, but I want to send it to GitHub. How?\nThe last step is synchronizing the changes made to our local repository with a remote repository (oftentimes, this remote repository is stored on GitHub). The git push command is used to send local commits up to a remote repository. The git pull command is used to fetch changes from a remote repository and merge them into the local repository – pulling will become a regular part of your workflow when collaborating with others, or even when working alone but on different machines (e.g. a laptop at home and a desktop at the office).\nThe processes described in the above sections (i.e. making changes to local working files, recording “snapshots” of them to create a versioned history of changes in a local Git repository, and sending those versions from our local Git repository to a remote repository (which is oftentimes on GitHub)) is illustrated using islands, buildings, bunnies, and packages in the artwork, below:\nA basic git workflow represented as two islands, one with “local repo” and “working directory”, and another with “remote repo.” Bunnies move file boxes from the working directory to the staging area, then with Commit move them to the local repo. Bunnies in rowboats move changes from the local repo to the remote repo (labeled “PUSH”) and from the remote repo to the working directory (labeled “PULL”).\n\n\n\n\nArtwork by Allison Horst\n\n\n\n\n\n7.2.4 Let’s Look at a GitHub Repository\nThis screen shows the copy of a repository stored on GitHub, with its list of files, when the files and directories were last modified, and some information on who made the most recent changes.\n\n\n\nIf we drill into the “commits” for the repository, we can see the history of changes made to all of the files. Looks like kellijohnson was working on the project and fixing errors in December:\n\n\n\nAnd finally, if we drill into one of the changes made on December 20, we can see exactly what was changed in each file:\n\n\n\nTracking these changes, how they relate to released versions of software and files is exactly what Git and GitHub are good for. And we will show how they can really be effective for tracking versions of scientific code, figures, and manuscripts to accomplish a reproducible workflow.\n\n\n7.2.5 Git Vocabulary & Commands\nWe know the world of Git and GitHub can be daunting. Use these tables as references while you use Git and GitHub, and we encourage you to build upon this list as you become more comfortable with these tools.\nThis table contains essential terms and commands that complement intro to Git skills. They will get you far on personal and individual projects.\n\nEssential Git Commands\n\n\n\n\n\n\n\nTerm\nGit Command(s)\nDefinition\n\n\n\n\nAdd/Stage\ngit add [file]\nStaging marks a modified file in its current version to go into your next commit snapshot. You can also stage all modified files at the same time using git add .\n\n\nCommit\ngit commit\nRecords changes to the repository.\n\n\nCommit Message\ngit commit -m \"my commit message\"\nRecords changes to the repository and include a descriptive message (you should always include a commit message!).\n\n\nFetch\ngit fetch\nRetrieves changes from a remote repository but does not merge them into your local working file(s).\n\n\nPull\ngit pull\nRetrieves changes from a remote repository and merges them into your local working file(s).\n\n\nPush\ngit push\nSends local commits to a remote repository.\n\n\nStatus\ngit status\nShows the current status of the repository, including (un)staged files and branch information.\n\n\n\nThis table includes more advanced Git terms and commands that are commonly used in both individual and collaborative projects.\n\nAdvanced Git Commands\n\n\n\n\n\n\n\nTerm\nGit Command(s)\nDefinition\n\n\n\n\nBranch\ngit branch\nLists existing branches or creates a new branch.\n\n\nCheckout\ngit checkout [branch]\nSwitches to a different branch or restores files from a specific commit.\n\n\nClone\ngit clone [repository]\nCreates a local copy of a remote repository.\n\n\nDiff\ngit diff\nShows differences between files, commits, or branches.\n\n\nFork\n-\nCreates a personal copy of a repository under your GitHub account for independent development.\n\n\nLog\ngit log\nDisplays the commit history of the repository.\n\n\nMerge\ngit merge [branch]\nIntegrates changes from one branch into another branch.\n\n\nMerge Conflict\n-\nOccurs when Git cannot automatically merge changes from different branches, requiring manual resolution.\n\n\nPull Request (PR)\n-\nA request to merge changes from a branch into another branch, typically in a collaborative project.\n\n\nRebase\ngit rebase\nIntegrates changes from one branch onto another by modifying commit history.\n\n\nRemote\ngit remote\nManages remote repositories linked to the local repository.\n\n\nRepository\ngit init\nA directory where Git tracks and manages files and their versions.\n\n\nStash\ngit stash\nTemporarily saves changes that are not ready to be committed.\n\n\nTag\ngit tag\nAssigns a label or tag to a specific commit.\n\n\n\nGit has a rich set of commands and features, and there are many more terms beyond either table. Learn more by visiting the git documentation.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Git and GtiHub</span>"
    ]
  },
  {
    "objectID": "session_07.html#exercise-1-create-a-remote-repository-on-github",
    "href": "session_07.html#exercise-1-create-a-remote-repository-on-github",
    "title": "7  Introduction to Git and GtiHub",
    "section": "7.3 Exercise 1: Create a remote repository on GitHub",
    "text": "7.3 Exercise 1: Create a remote repository on GitHub\n\n\n\n\n\n\nSetup\n\n\n\n\nLogin to GitHub\nClick the New repository button\nName it {FIRSTNAME}_test\nAdd a short description\nCheck the box to add a README.md file\nAdd a .gitignore file using the R template\nSet the LICENSE to Apache 2.0\n\n\n\nIf you were successful, it should look something like this:\n\n\n\n\n\nYou’ve now created your first repository! It has a couple of files that GitHub created for you: README.md, LICENSE, and .gitignore.\n\n\n\n\n\n\nREADME.md files are used to share important information about your repository\n\n\n\nYou should always add a README.md to the root directory of your repository – it is a markdown file that is rendered as HTML and displayed on the landing page of your repository. This is a common place to include any pertinent information about what your repository contains, how to use it, etc.\n\n\n\n\n \n\nFor simple changes to text files, such as the README.md, you can make edits directly in the GitHub web interface.\n\n\n\n\n\n\nChallenge\n\n\n\nNavigate to the README.md file in the file listing, and edit it by clicking on the pencil icon (top right of file). This is a regular Markdown file, so you can add markdown text. Add a new level-2 header called “Purpose” and add some bullet points describing the purpose of the repo. When done, add a commit message, and hit the Commit changes button.\n\n\n\n\n\n\n\nCongratulations, you’ve now authored your first versioned commit! If you navigate back to the GitHub page for the repository, you’ll see your commit listed there, as well as the rendered README.md file.\n\n\n\n\n\nThe GitHub repository landing page provides us with lots of useful information. To start, we see:\n\nall of the files in the remote repository\nwhen each file was last edited\nthe commit message that was included with each file’s most recent commit (which is why it’s important to write good, descriptive commit messages!)\n\nAdditionally, the header above the file listing shows the most recent commit, along with its commit message, and a unique ID (assigned by Git) called a SHA. The SHA (aka hash) identifies the specific changes made, when they were made, and by who. If you click on the SHA, it will display the set of changes made in that particular commit.\n\n\n\n\n\n\nWhat should I write in my commit message?\n\n\n\nWriting effective Git commit messages is essential for creating a meaningful and helpful version history in your repository. It is crucial to avoid skipping commit messages or resorting to generic phrases like “Updates.” When it comes to following best practices, there are several guidelines to enhance the readability and maintainability of the codebase.\nHere are some guidelines for writing effective Git commit messages:\n\nBe descriptive and concise: Provide a clear and concise summary of the changes made in the commit. Aim to convey the purpose and impact of the commit in a few words.\nUse imperative tense: Write commit messages in the imperative tense, as if giving a command. For example, use “Add feature” instead of “Added feature” or “Adding feature.” This convention aligns with other Git commands and makes the messages more actionable.\nSeparate subject and body: Start with a subject line, followed by a blank line, and then provide a more detailed explanation in the body if necessary. The subject line should be a short, one-line summary, while the body can provide additional context, motivation, or details about the changes.\nLimit the subject line length: Keep the subject line within 50 characters or less. This ensures that the commit messages are easily scannable and fit well in tools like Git logs.\nCapitalize and punctuate properly: Begin the subject line with a capital letter and use proper punctuation. This adds clarity and consistency to the commit messages.\nFocus on the “what” and “why”: Explain what changes were made and why they were made. Understanding the motivation behind a commit helps future researchers and collaborators (including you!) comprehend its purpose.\nUse present tense for subject, past tense for body: Write the subject line in present tense as it represents the current state of the codebase. Use past tense in the body to describe what has been done.\nReference relevant issues: If the commit is related to a specific issue or task, include a reference to it. For example, you can mention the issue number or use keywords like “Fixes,” “Closes,” or “Resolves” followed by the issue number.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Git and GtiHub</span>"
    ]
  },
  {
    "objectID": "session_07.html#exercise-2-clone-your-repository-and-use-git-locally-in-rstudio",
    "href": "session_07.html#exercise-2-clone-your-repository-and-use-git-locally-in-rstudio",
    "title": "7  Introduction to Git and GtiHub",
    "section": "7.4 Exercise 2: clone your repository and use Git locally in RStudio",
    "text": "7.4 Exercise 2: clone your repository and use Git locally in RStudio\nCurrently, our repository just exists on GitHub as a remote repository. It’s easy enough to make changes to things like our README.md file (as demonstrated above), from the web browser, but that becomes a lot harder (and discouraged) for scripts and other code files. In this exercise, we’ll bring a copy of this remote repository down to our local computer (aka clone this repository) so that we can work comfortably in RStudio.\n\n\n\n\n\n\nAn important distinction\n\n\n\nWe refer to the remote copy of the repository that is on GitHub as the origin repository (the one that we cloned from), and the copy on our local computer as the local repository.\n\n\nStart by clicking the green Code button (top right of your file listing) and copying the URL to your clipboard (this URL represents the repository location):\n\n\n\n\n\n\n\nRStudio makes working with Git and version controlled files easy – to do so, you’ll need to be working within an R project folder. The following steps will look similar to those you followed when first creating an R Project, with a slight difference. Follow the instructions in the Setup box below to clone your remote repository to your local computer in RStudio:\n\n\n\n\n\n\nSetup\n\n\n\n\nClick File &gt; New Project\nSelect Version Control and paste the remote repository URL (which should be copied to your clipboard) in the Repository URL field\nPress Tab, which will auto-fill the Project directory name field with the same name as that of your remote repo – while you can name the local copy of the repository anything, it’s typical (and highly recommended) to use the same name as the GitHub repository to maintain the correspondence\n\n\n\n\n\n\n\n\n\nOnce you click Create Project, a new RStudio window will open with all of the files from the remote repository copied locally. Depending on how your version of RStudio is configured, the location and size of the panes may differ, but they should all be present – you should see a Git tab, as well as the Files tab, where you can view all of the files copied from the remote repo to this local repo.\n\n\n\n\nYou’ll note that there is one new file sam_test.Rproj, and three files that we created earlier on GitHub (.gitignore, LICENSE, and README.md).\nIn the Git tab, you’ll note that the one new file, sam_test.Rproj, is listed. This Git tab is the status pane that shows the current modification status of all of the files in the repository. Here, we see sam_test.Rproj is preceded by a ?? symbol to indicate that the file is currently untracked by Git. This means that we have not yet committed this file using Git (i.e. Git knows nothing about the file; hang tight, we’ll commit this file soon so that it’s tracked by Git). As you make version control decisions in RStudio, these icons will change to reflect the current version status of each of the files.\nInspect the history. Click on the History button in the Git tab to show the log of changes that have occurred – these changes will be identical to what we viewed on GitHub. By clicking on each row of the history, you can see exactly what was added and changed in each of the two commits in this repository.\n\n\n\n\n\n\n\n\nChallenge\n\n\n\n\nMake a change to the README.md file – this time from RStudio – then commit the README.md change\nAdd a new section to your README.md called “Creator” using a level-2 header. Under it include some information about yourself. Bonus: Add some contact information and link your email using Markdown syntax.\n\n\n\nOnce you save, you’ll immediately see the README.md file show up in the Git tab, marked as a modification. Select the file in the Git tab, and click Diff to see the changes that you saved (but which are not yet committed to your local repository). Newly made changes are highlighted in green.\n\n\n\n\nCommit the changes. To commit the changes you made to the README.md file using RStudio’s GUI (Graphical User Interface), rather than the command line:\n\nStage (aka add) README.md by clicking the check box next to the file name – this tells Git which changes you want included in the commit and is analogous to using the git command, git add README.md, in the command line\nCommit README.md by clicking the Commit button and providing a descriptive commit message in the dialog box. Press the Commit button once you’re satisfied with your message. This is analogous to using the git command, git commit -m \"my commit message\", in the command line.\n\n\nA few notes about our local repository’s state:\n\nWe still have a file, sam_test.Rproj, that is listed as untracked (denoted by ?? in the Git tab).\nYou should see a message at the top of the Git tab that says, Your branch is ahead of ‘origin/main’ by 1 commit., which tells us that we have 1 commit in the local repository, but that commit has not yet been pushed up to the origin repository (aka remote repository on GitHub).\n\nCommit the remaining project file by staging/adding and committing it with an informative commit message.\n\nWhen finished, you’ll see that no changes remain in the Git tab, and the repository is clean.\nInspect the history. Note that under Changes, the message now says:\nYour branch is ahead of ‘origin/main’ by 2 commits.\nThese are the two commits that we just made, but have not yet been pushed to GitHub.\nClick on the History button to see a total of four commits in the local repository (the two we made directly to GitHub via the web browser and the two we made in RStudio).\nPush these changes to GitHub. Now that we’ve made and committed changes locally, we can push those changes to GitHub using the Push button. This sends your changes to the remote repository (on GitHub) leaving your repository in a totally clean and synchronized state (meaning your local repository and remote repository should look the same).\n\n\n\n\n\n\nIf you are prompted to provide your GitHub username and password when Pushing…\n\n\n\nit’s a good indicator that you did not set your GitHub Personal Access Token (PAT) correctly. You can redo the steps outlined in the GitHub Authentication section to (re)set your PAT, then Push again.\n\n\n\n &lt;––&gt;\n\nIf you look at the History pane again, you’ll notice that the labels next to the most recent commit indicate that both the local repository (HEAD) and the remote repository (origin/HEAD) are pointing at the same version in the history. If we look at the commit history on GitHub, all the commits will be shown there as well.\n\n\n\n7.4.1 Defining Merge Method\n\n\n\n\n\n\nSome Git configuration to surpress warning messages\n\n\n\nGit version 2.27 includes a new feature that allows users to specify the default method for integrating changes from a remote repository into a local repository, without receiving a warning (this warning is informative, but can get annoying). To suppress this warning for this repository only we need to configure Git by running this line of code in the Terminal:\n\ngit config pull.rebase false\n\npull.rebase false is a default strategy for pulling where Git will first try to auto-merge the files. If auto-merging is not possible, it will indicate a merge conflict (more on resolving merge conflicts in Collaborating with Git and GitHub).\nNote: Unlike when we first configured Git, we do not include the --global flag here (e.g. git config --global pull.rebase false). This sets this default strategy for this repository only (rather than globally for all your repositories). We do this because your chosen/default method of grabbing changes from a remote repository (e.g. pulling vs. rebasing) may change depending on collaborator/workflow preference.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Git and GtiHub</span>"
    ]
  },
  {
    "objectID": "session_07.html#exercise-3-setting-up-git-on-an-existing-project",
    "href": "session_07.html#exercise-3-setting-up-git-on-an-existing-project",
    "title": "7  Introduction to Git and GtiHub",
    "section": "7.5 Exercise 3: Setting up Git on an existing project",
    "text": "7.5 Exercise 3: Setting up Git on an existing project\nThere are a number of different workflows for creating version-controlled repositories that are stored on GitHub. We started with Exercise 1 and Exercise 2 using one common approach: creating a remote repository on GitHub first, then cloning that repository to your local computer (you used your {FIRSTNAME}_test repo).\nHowever, you may find yourself in the situation where you have an existing directory (i.e. a “normal” folder) of code that you want to make a Git repository out of, and then send it to GitHub. In this last exercise, we will practice this workflow using your training_{USERNAME} project.\nFirst, switch to your training_{USERNAME} project using the RStudio project dropdown menu. The project drop down menu is in the upper right corner of your RStudio pane. Click the drop down next to your project name ({FIRSTNAME}_test), and then select the training_{USERNAME} project from the RECENT PROJECTS list.\nThere are a few approaches for turning an existing project folder into a Git repository, then sending it to GitHub – if you’re an R-user, the simplest way is to use the {usethis} package, which is built to automate tasks involved with project setup and development. However, you can also initialize a local git repository and set the remote repository from the command line (a language-agnostic workflow). Steps for both approaches are included below (demonstrated using your training_{USERNAME} project):\n\nUsing R & {usethis}Using the command line\n\n\n\nInstall the {usethis} package (if you haven’t done so already) by running the following in your Console:\n\n\ninstall.packages(\"usethis\")\n\n\nInitialize training_{USERNAME} as a Git repository by running usethis::use_git() in the Console. Choose yes when asked if it’s okay to commit any uncommitted files. Choose yes again if asked to restart R. Once complete, you should see the Git tab appear in your top left pane in RStudio and a .gitignore file appear in your Files tab.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.gitignore files allow you to specify which files/folders you don’t want Git to track\n\n\n\nA .gitignore file is automatically created in the root directory of your project when you initialize it as a Git repository. You’ll notice that there are already some R / R Project-specific files that have been added by default.\nWhy is this useful? For many reasons, but possibly the greatest use-case is adding large files (GitHub has a file size limit of 2 GB) or files with sensitive information (e.g. keys, tokens) that you don’t want to accidentally push to GitHub.\nHow do I do this? Let’s say I create a file with sensitive information that I don’t want to push to GitHub. I can add a line to my .gitignore file:\n\n# added by default when I initalized my RProj as a Git Repository\n.Rproj.user\n.Rhistory\n.Rdata\n.httr-oauth\n.DS_Store\n.quarto\n\n# add file so that it doesn't get pushed to the remote repo (on GitHub); \ncontains_sensitive_info.R\n\nIf this file is currently untracked by Git, it should appear in my Git tab. Once I add it to the .gitignore and save the modified .gitignore file, you should see contains_sensitive_info.R disappear from the Git tab, and a modified .gitignore (denoted by a blue M) appear. Stage/commit/push this modified .gitignore file.\n\n\n\nCreate an upstream remote repository on GitHub by running usethis::use_github() in the Console. Your web browser should open up to your new GitHub repository, with the same name as your local Git repo/R Project.\n\n\n\n\n\n\n\n\n\n\n\nEnsure that your default branch is named main rather than master by:\n\nrunning git branch in the Terminal to list all your branches (you should currently only have one, which is your default)\nif it’s named master, run the following line in the Console to update it\n\n\n\nusethis::git_default_branch_rename(from = \"master\", to = \"main\")\n\nYou can verify that your update worked by running git branch once more in the Terminal.\n\n\n\n\n\n\nWhy are we doing this?\n\n\n\nThe racist “master” terminology for git branches motivates us to update our default branch to “main” instead.\nThere is a push across platforms and software to update this historical default branch name from master to main. GitHub has already done so – you may have noticed that creating a remote repository first (like we did in Exercises 1 & 2) results in a default branch named main. Depending on your version of Git, however, you may need to set update the name manually when creating a local git repository first (as we’re doing here).\n\n\n\nYou’re now ready to edit, stage/add, commit, and push files to GitHub as practiced earlier!\n\n\n\n\n\n\n\nChallenge: add a README.md file to training_{USERNAME}\n\n\n\nGitHub provides a button on your repo’s landing page for quickly adding a README.md file. Click the Add a README button and use markdown syntax to create a README.md. Commit the changes to your repository.\nGo to your local repository (in RStudio) and pull the changes you made.\n\n\n\n\nWhile we’ll be using the RStudio Terminal here, you can use any command-line interface (e.g. Mac Terminal, Git Bash, etc.) that allows for git interactions (if you plan to use a command-line interface that is not the RStudio Terminal, make sure to navigate to your project directory (e.g. using cd file/path/to/project/directory) before initializing your repository.\n\nInitialize training_{USERNAME} as a Git repository by running git init in the Terminal. You should get a message that says something like:\n\n\nInitialized empty Git repository in /home/username/training_username/.git/\n\n\n\n\n\n\n\nYou may have to quit and reopen your RStudio session on the server for the Git tab to appear\n\n\n\nYou’ll likely need to help included-crab along in recognizing that this R Project has been initialized as a git repository – click Session &gt; Quit Session… &gt; New Session &gt; choose training_{USERNAME} to reopen your project.\n\n\nOnce complete, you should see the Git tab appear in your top left pane in RStudio and a .gitignore file appear in your Files tab.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.gitignore files allow you to specify which files/folders you don’t want Git to track\n\n\n\nA .gitignore file is automatically created in the root directory of your project when you initialize it as a Git repository. You’ll notice that there are already some R / R Project-specific files that have been added by default.\nWhy is this useful? For many reasons, but possibly the greatest use-case is adding large files (GitHub has a file size limit of 2 GB) or files with sensitive information (e.g. keys, tokens) that you don’t want to accidentally push to GitHub.\nHow do I do this? Let’s say I create a file with sensitive information that I don’t want to push to GitHub. I can add a line to my .gitignore file:\n\n# added by default when I initalized my RProj as a Git Repository\n.Rproj.user\n.Rhistory\n.Rdata\n.httr-oauth\n.DS_Store\n.quarto\n\n# add file so that it doesn't get pushed to the remote repo (on GitHub); \ncontains_sensitive_info.R\n\nIf this file is currently untracked by Git, it should appear in my Git tab. Once I add it to the .gitignore and save the modified .gitignore file, you should see contains_sensitive_info.R disappear from the Git tab, and a modified .gitignore (denoted by a blue M) appear. Stage/commit/push this modified .gitignore file.\n\n\n\nEnsure that your default branch is named main rather than master by:\n\nrunning git branch in the Terminal to list all your branches (you should currently only have one, which is your default)\nif it’s named master, run the following line in the Terminal to update it\n\n\n\n# for Git version 2.28+ (check by running `git --version`)\n# this sets the default branch name to `main` for any new repos moving forward\ngit config --global init.defaultBranch main\n\n# for older versions of Git\n# this sets the default branch name to `main` ONLY for this repo \ngit branch -m master main\n\nYou can verify that your update worked by running git branch once more in the Terminal.\n\n\n\n\n\n\nWhy are we doing this?\n\n\n\nThe racist “master” terminology for git branches motivates us to update our default branch to “main” instead.\nThere is a push across platforms and software to update this historical default branch name from master to main. GitHub has already done so – you may have noticed that creating a remote repository first (like we did in Exercises 1 & 2) results in a default branch named main. Depending on your version of Git, however, you may need to set update the name manually when creating a local git repository first (as we’re doing here).\n\n\n\nStage/Add your files. It’s helpful to first run git status to check the state of your local repository (particularly if you aren’t using RStudio / have access to a GUI with a Git tab-esque feature) – this will tell you which files have been modified or are untracked and that are currently unstaged (in red). What appears here should look just like what appears in the Git tab:\n\n\n\n\n\n\n\n\n\n\nRun git add . in the Terminal to stage all files at once (or git add {FILENAME} to stage individual files). Running git status again will show you which files have been staged (in green). You may have to refresh your Git tab to see the change in state reflected in the GUI.\n\n\n\n\n\n\n\n\n\n\nCommit your files by running git commit -m \"an informative commit message\" in the Terminal. Refreshing your Git tab will cause them to disappear (just as they do when you commit using RStudio’s GUI buttons). You can run git log in the Terminal to see a history of your past commits (currently, we only have this one).\n\n\n\n\n\n\n\n\n\n\n\nCreate an empty remote repository by logging into GitHub and creating a new repository, following the same steps as in Exercise 1. IMPORTANTLY, DO NOT initialize your remote repo with a README license, or .gitignore file – doing so now can lead to merge conflicts. We can add them after our local and remote repos are linked. Name your remote repository the same as your local repository (i.e. training_{USERNAME}).\nLink your remote (GitHub) repository to your local Git repository. Your empty GitHub repo conveniently includes instructions for doing so. Copy the code under push an existing repository from the command line to your clipboard, paste into your RStudio Terminal, and press return/enter.\n\n\n\n\n\n\n\n\n\n\nThese commands do three things:\n\nAdds the GitHub repository as the remote repository (i.e. links your local repo to the remote repo)\nRenames the default branch to main\nPushes the main branch to the remote GitHub repository\n\nHead back to your browser and refresh your GitHub repository page to see your files appear!\n\nYou’re now ready to edit, stage/add, commit, and push files to GitHub as practiced earlier!\n\n\n\n\n\n\n\nChallenge: add a README.md file to training_{USERNAME}\n\n\n\nGitHub provides a button on your repo’s landing page for quickly adding a README.md file. Click the Add a README button and use markdown syntax to create a README.md. Commit the changes to your repository.\nGo to your local repository (in RStudio) and pull the changes you made.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Git and GtiHub</span>"
    ]
  },
  {
    "objectID": "session_07.html#go-further-with-git",
    "href": "session_07.html#go-further-with-git",
    "title": "7  Introduction to Git and GtiHub",
    "section": "7.6 Go further with Git",
    "text": "7.6 Go further with Git\nThere’s a lot we haven’t covered in this brief tutorial. There are some great and much longer tutorials that cover advanced topics, such as:\n\nUsing Git on the command line\nResolving conflicts\nBranching and merging\nPull requests versus direct contributions for collaboration\nUsing .gitignore to protect sensitive data\nGitHub Issues - how to use them for project management and collaboration\n\nand much, much more.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Git and GtiHub</span>"
    ]
  },
  {
    "objectID": "session_07.html#git-resources",
    "href": "session_07.html#git-resources",
    "title": "7  Introduction to Git and GtiHub",
    "section": "7.7 Git resources",
    "text": "7.7 Git resources\n\nPro Git Book\nHappy Git and GitHub for the useR\nGitHub Documentation\nLearn Git Branching is an interactive tool to learn Git on the command line\nSoftware Carpentry Version Control with Git\nBitbucket’s tutorials on Git Workflows",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to Git and GtiHub</span>"
    ]
  },
  {
    "objectID": "session_08.html",
    "href": "session_08.html",
    "title": "8  Tidy Data",
    "section": "",
    "text": "Learning Objectives\nLearn how to design and create effective data tables by:",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Tidy Data</span>"
    ]
  },
  {
    "objectID": "session_08.html#learning-objectives",
    "href": "session_08.html#learning-objectives",
    "title": "8  Tidy Data",
    "section": "",
    "text": "applying tidy and normalized data principles,\nfollowing best practices to format data tables’ content,\nrelating tables following relational data models principles, and\nunderstanding how to perform table joins.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Tidy Data</span>"
    ]
  },
  {
    "objectID": "session_08.html#what-is-tidy-data",
    "href": "session_08.html#what-is-tidy-data",
    "title": "8  Tidy Data",
    "section": "8.1 What is tidy data?",
    "text": "8.1 What is tidy data?\nTidy data is a standardized way of organizing data tables that allows us to manage and analyze data efficiently, because it makes it straightforward to understand the corresponding variable and observation of each value. The  tidy data principles  are:\n\nEvery column is a variable.\nEvery row is an observation.\nEvery cell is a single value.\n\n\n\n\n\n\n\nTidy Data: A way of life\n\n\n\n\nTidy data is not a language or tool specific.\nTidy data is not an R thing.\nTidy data is not a tidyverse thing.\n\nTidy Data is a way to organize data that will make life easier for people working with data.\n(Allison Horst & Julia Lowndes)",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Tidy Data</span>"
    ]
  },
  {
    "objectID": "session_08.html#values-variables-observations-and-entities",
    "href": "session_08.html#values-variables-observations-and-entities",
    "title": "8  Tidy Data",
    "section": "8.2 Values, variables, observations, and entities",
    "text": "8.2 Values, variables, observations, and entities\nFirst, let’s get acquainted with our building blocks.\n\n\n\n\n\n\n\n\n\nConcept\nDefinition\n\n\n\n\n\n\nVariables\nA characteristic the is being measured, counted or described with data.\nExample: car type, salinity, year, height, mass.\n\n\n\n\nObservations\nA single “data point” for which the measure, count or description of one or more variables is recorded.\nExample: If you are collecting variables height, species, and location of plants, then each plant is an observation.\n\n\n\n\nValue\nThe record measured, count or description of a variable.\nExample: 3 ft\n\n\n\n\nEntity\nEach type of observation is an entity.\nExample: If you are collecting variables height, species, and location and site name of plants and where they are observed, then plants is an entity and site is an entity.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Tidy Data</span>"
    ]
  },
  {
    "objectID": "session_08.html#assessing-tidy-data-principles",
    "href": "session_08.html#assessing-tidy-data-principles",
    "title": "8  Tidy Data",
    "section": "8.3 Assessing Tidy Data Principles",
    "text": "8.3 Assessing Tidy Data Principles\nThe following is an example of tidy data - it’s easy to see the three tidy data principles apply.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Tidy Data</span>"
    ]
  },
  {
    "objectID": "session_08.html#recognizing-untidy-data",
    "href": "session_08.html#recognizing-untidy-data",
    "title": "8  Tidy Data",
    "section": "8.4 Recognizing untidy data",
    "text": "8.4 Recognizing untidy data\nAnything that does not follow the three tidy data principles is untidy data.\nThere are many ways in which data can become untidy, some can be noticed right away, while others are more subtle. In this section we will look at some examples of common untidy data situations.\n\n8.4.1 Example 1\nThe following is a screenshot of an actual dataset that came across NCEAS. We have all seen spreadsheets that look like this - and it is fairly obvious that whatever this is, it isn’t very tidy. Let’s dive deeper into why we consider it untidy data.\n\n\n8.4.1.1 Multiple tables\nTo begin with, notice there are actually three smaller tables within this table. Although for our human brain it is easy to see and interpret this, it is extremely difficult to get a computer to see it this way.\n\nHaving multiple tables within the same table will create headaches down the road should you try to read in this information using R or another programming language. Having multiple tables immediately breaks the tidy data principles, as we will see next.\n\n\n8.4.1.2 Inconsistent columns\nIn tidy data, each column corresponds to a single variable. If you look down a column, and see that multiple variables exist in the table, the data is not tidy. A good test for this can be to see if you think the column consists of only one unit type.\n\n\n\n8.4.1.3 Inconsistent rows\nThe second principle of tidy data is: every column must be a single observation. If you look across a single row, and you notice that there are clearly multiple observations in one row, the data are likely not tidy.\n\n\n\n8.4.1.4 Marginal sums and statistics\nMarginal sums and statistics are not considered tidy. They break principle one, “Every column is a variable”, because a marginal statistic does not represent the same variable as the values it is summarizing. They also break principle two, “Every row is an observation”, because they represent a combination of observations, rather than a single one.\n\n\n\n\n8.4.2 Example 2\nConsider the following table. It’s a single one this time! It shows data about species observed at a specific site and date. The column headers refer to the following:\n\ndate: date when a species was observed\nsite: site where a species was observed\nname: site’s name\naltitude: site’s altitude\nsp1code, sp2code: species code for two plants observed\nsp1height, sp2height: height of the plants observed\n\nTake a moment to see why this is not tidy data.\n\n\n8.4.2.1 Multiple Observations\nRemember that an observation is all the values measured for an individual entity.\nIf our entity is a single observed plant, then the values we measured are date and site of observation, the altitude, and the species code and height. This table breaks the second tidy data principles: Every row is an observation.\n\nPeople often refer to this as “wide format”, because the observations are spread across a wide number of columns. Note that, should one encounter a new species in the survey, we would have to add new columns to the table. This is difficult to analyze, understand, and maintain. To solve this problem, we can create a single column for species code and a single column for species height as in the following table.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Tidy Data</span>"
    ]
  },
  {
    "objectID": "session_08.html#why-tidy-data",
    "href": "session_08.html#why-tidy-data",
    "title": "8  Tidy Data",
    "section": "8.5 Why Tidy Data?",
    "text": "8.5 Why Tidy Data?\n\nEfficiency: less re-creating the wheel. Easier to apply the same tools to different datasets.\nCollaboration: Makes it easier to work with others as you can work with the same tools in the same ways.\nReuse: It makes it easier to apply similar techniques and analysis across different or new datasets.\nGeneralizability: Tools built for one tidy data set can be used to multiple other datasets. Opening posibilities of data you can work with.\n\n\n“There is a specific advantage to placing varables in columns becasuse it allows R’s vectorized nature to shine. …most buit-in R functions work with vactors of values. That makes transforming tidy data feel particularly natural. (R for Data Science by Grolemund and Wickham)",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Tidy Data</span>"
    ]
  },
  {
    "objectID": "session_08.html#data-normalization",
    "href": "session_08.html#data-normalization",
    "title": "8  Tidy Data",
    "section": "8.6 Data Normalization",
    "text": "8.6 Data Normalization\n\n8.6.1 What is data normalization?\nData normalization is the process of creating normalized data, which are datasets free from data redundancy to simplify query, analysis, storing, and maintenance. In normalized data we organize data so that :\n\nEach table follows the tidy data principles\nWe have separate tables for each type of entity measured\nObservations (rows) are all unique\nEach column represents either an identifying variable or a measured variable\n\nIn denormalized data observations about different entities are combined. A good indication that a data table is denormalized and needs normalization is seeing the same column values repeated across multiple rows.\n\n\n8.6.2 Example\nIn the previous data table the row values for the last three columns are repeated.\n\nThis means the data is denormalized and it happens because each row has values about more than one entity:\n\n1st entity: individual plants found at that site, and\n2nd entity: sites at which the plants were observed.\n\n\nIf we use this information to normalize our data, we should end up with:\n\none tidy table for each entity observed, and\nadditional columns for identifying variables (such as site ID).\n\nHere’s how our normalized data would look like:\n\n\n\n\n\nNotice that each table also satisfies the tidy data principles.\nNormalizing data by separating it into multiple tables often makes researchers really uncomfortable. This is understandable! The person who designed this study collected all of these measurements for a reason - so that they could analyze the measurements together. Now that our site and plant information are in separate tables, how would we use site altitude as a predictor variable for species composition, for example? We will go over a solution in the next section.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Tidy Data</span>"
    ]
  },
  {
    "objectID": "session_08.html#relational-data-models",
    "href": "session_08.html#relational-data-models",
    "title": "8  Tidy Data",
    "section": "8.7 Relational Data Models",
    "text": "8.7 Relational Data Models\n\nIt’s rare that a data analysis involves only a single table of data. Typically you have many tables of data, and you must combine them to answer the questions that you’re interested in. Collectively, multiple tables of data are called relational data because it is the relations, not just the individual datasets, that are important. (R for Data Science Chapter 13 Relational Data)\n\n\n8.7.1 What are relational data models?\nA relational data model is a way of encoding links between multiple tables in a database. A database organized following a relational data model is a relational database. A few of the advantages of using a relational data model are:\n\nEnabling powerful search and filtering\nAbility to handle large, complex data sets\nEnforcing data integrity\nDecreasing errors from redundant updates\n\nRelational data models are used by relational databases (like mySQL, MariaDB, Oracle, or Microsoft Access) to organize tables. However, you don’t have to be using a relational database or handling large and complex data to enjoy the benefits of using a relational data model.\nWhen working with relational data, we generally don’t work with tables separately. We will need to join the information from different tables to run our analysis. To join two or more tables we need to learn about keys.\n\n\n8.7.2 Primary and foreign keys\nThe main way in which relational data models encode relationships between different tables is by using keys. Keys are variables whose values uniquely identify observations. For tidy data, where variables and columns are equivalent, a column is a key if it has a different value in each row. This allows us to use keys as unique identifiers that reference particular observations and create links across tables.\nTwo types of keys are common within relational data models:\n\nPrimary Key: chosen key for a table, uniquely identifies each observation in the table,\nForeign Key: reference to a primary key in another table, used to create links between tables.\n\n\n\n8.7.3 Example\nOn our previously normalized data for plants and sites, let’s choose primary keys for these tables and then identify any foreign keys.\nPrimary keys\nFirst, notice that the columns ‘date’, ‘site’ and ‘sp_code’ cannot be primary keys because they have repeated values across rows. The columns ‘sp_height’ and ‘id’ both have different values in each row, so both are candidates for primary keys. However, the decimal values of ‘sp_height’ don’t make it as useful to use it to reference observations. So we chose ‘id’ as the primary key for this table.\nFor the sites table, all three columns could be keys. We chose ‘site’ as the primary key because it is the most succinct and it also allows us to link the sites table with the plants table.\nForeign keys\nThe ‘site’ column is the primary key of that table because it uniquely identifies each row of the table as a unique observation of a site. In the first table, however, the ‘site’ column is a foreign key that references the primary key from the second table. This linkage tells us that the first height measurement for the DAPU observation occurred at the site with the name Taku.\n\n\n\n\n\n\n\n8.7.4 Compound keys\n\n\nIt can also be the case that a variable is not a key, but by combining it with a second variable we get that the combined values uniquely identify the rows. This is called a\n\nCompound Key: a key that is made up of more than one variable.\n\nFor example, the ‘site’ and ‘sp_code’ columns in the plants table cannot be keys on their own, since each has repeated values. However, when we look at their combined values (1-DAPU, 1-DAMA, 2-DAMA, 2-DAPU) we see each row has a unique value. So ‘site’ and ‘sp_code’ together form a compound key.\n\nThere are also other types of keys, like a natural key or a surrogate key. Each type of key has advantages and disadvantages. You can read more about this in  this article.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Tidy Data</span>"
    ]
  },
  {
    "objectID": "session_08.html#joins",
    "href": "session_08.html#joins",
    "title": "8  Tidy Data",
    "section": "8.8 Joins",
    "text": "8.8 Joins\nFrequently, analysis of data will require merging these separately managed tables back together. There are multiple ways to join the observations in two tables, based on how the rows of one table are merged with the rows of the other. Regardless of the join we will perform, we need to start by identifying the primary key in each table and how these appear as foreign keys in other tables.\nWhen conceptualizing merges, one can think of two tables, one on the left and one on the right.\n\n\n8.8.1 Inner Join\nAn INNER JOIN is when you merge the subset of rows that have matches in both the left table and the right table.\n\n\n\n8.8.2 Left Join\nA LEFT JOIN takes all of the rows from the left table, and merges on the data from matching rows in the right table. Keys that don’t match from the left table are still provided with a missing value (na) from the right table.\n\n\n\n8.8.3 Right Join\nA RIGHT JOIN is the same as a left join, except that all of the rows from the right table are included with matching data from the left, or a missing value. Notice that left and right joins can ultimately be the same depending on the positions of the tables\n\n\n\n8.8.4 Full Outer Join\nFinally, a FULL OUTER JOIN includes all data from all rows in both tables, and includes missing values wherever necessary.\n\nSometimes people represent joins as Venn diagrams, showing which parts of the left and right tables are included in the results for each join. This representation is useful, however, they miss part of the story related to where the missing value comes from in each result.\n\n\n\nImage source: R for Data Science, Wickham & Grolemund.\n\n\nWe suggest reading the Relational Data chapter in the “R for Data Science” book  for more examples and best practices about joins.\n\n\n8.8.5 Entity-Relationship models\nAn Entity-Relationship model (E-R model), also known as an E-R diagram, is a way to draw a compact diagram that reflects the structure and relationships of the tables in a relational database. These can be particularly useful for big databases that have many tables and complex relationships between them.\nWe will explain the steps to drawing a simplified E-R model with our previous plants and sites tables.\nStep 1: Identify the entities in the relational database and add each one in a box. In our case, entities are [plants] and [sites], since we are gathering observations about both of these.\n\n\n\n\n\nStep 2: Add variables for each entity and identify keys. Add the variables as a list inside each box. Then, identify the primary and foreign keys in each of the boxes. To visualize this, we have indicated\n\nthe  primary key  (of each entity) in  red  and\nany  foreign keys  in  blue .\n\n\n\n\n\n\nStep 3: Add relationships between entities.\n\nDraw a line between the boxes of any two entities that have a relationship.\nIdentify which box has the primary key of the other as a foreign key. Let’s call the box that has the foreign key [box1] and the other box [box2]. Using the previous diagram we can see that “site” is the primary key of [sites] and appears as a foreign key in [plants]. So [plants] is [box1] and [sites] is [box2].\nAdd a word describing how [box1] is related to [box2] above the line connecting the two boxes. So, for example, we need to describe how [plants] is related to [sites]. The relation is “a plant is located in a site”, so we write “located” above the line indicating the relationship between [plants] and [sites].\n\n\n\n\n\n\nStep 4: Add cardinality to every relationship in the diagram. At this step we want to quantify how many items in an entity are related to another entity. This is easiest if we reuse the description we found in the previous step. For example, “a plant is located in one site”. Then we add the symbol for “one” at the end of the line going from [plants] to [sites].\n\n\n\n\n\nTo finish, we also indicate how many plants are related to a single site. Since “a site has many plants”, we add the symbol for “many” at the end of the line going from [sites] to [plants]\n\n\n\n\n\nThat’s it!\n\n8.8.5.1 EDR Crow’s Foot\nThe symbols we used at the end of the lines are called ERD “crow’s foot”. You can see all the existing ones together with an example in the next diagram.\n\n\n\n\n\n\n\nNote\n\n\n\nIf you need to produce a publishable E-R model such as the one above,  Mermaid  is a great option. Read more about how to use this tool to create diagrams  here .",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Tidy Data</span>"
    ]
  },
  {
    "objectID": "session_08.html#best-practices-summary",
    "href": "session_08.html#best-practices-summary",
    "title": "8  Tidy Data",
    "section": "8.9 Best Practices Summary",
    "text": "8.9 Best Practices Summary\nThis is a summary of what we have covered, and some extra advice!\nThe tidy data principles are:\n\nEvery column is a variable.\nEvery row is an observation.\nEvery cell is a single value.\n\nIn normalized data we organize data so that :\n\nWe have separate tables for each type of entity measured\nObservations (rows) are all unique\nEach column represents either an identifying variable or a measured variable\nEach table follows the tidy data principles\n\nCreating relational data models by assigning primary and foreign keys to each table allows us to maintain relationships between separate normalized tables. Choose the primary key for each table based on your understanding of the data and take efficiency into account. Once you choose a column as the primary key, make sure that all the values in that column are there!\nFor a big relational database, an Entity-Relationship model can be an effective way to explain how different tables and their keys are related to each other. If we need to merge tables we can do it using different types of joins.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Tidy Data</span>"
    ]
  },
  {
    "objectID": "session_08.html#more-on-data-management",
    "href": "session_08.html#more-on-data-management",
    "title": "8  Tidy Data",
    "section": "8.10 More on Data Management",
    "text": "8.10 More on Data Management\nTidy data is one very important step to data management best practices. However there is more to consider. Here we provide some extra advice from a great paper called  ‘Some Simple Guidelines for Effective Data Management’.\n\nDesign tables to add rows, not columns\nUse a scripted program (like R!)\nNon-proprietary file formats are preferred (eg: csv, txt)\nKeep a raw version of data\nUse descriptive files and variable names (without spaces!)\nInclude a header line in your tabular data files\nUse plain ASCII text\n\nIn the Cleaning & Wrangling chapter we will cover more best practices for cleaning irregular and missing data and how to implement them using R.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Tidy Data</span>"
    ]
  },
  {
    "objectID": "session_08.html#activity",
    "href": "session_08.html#activity",
    "title": "8  Tidy Data",
    "section": "8.11 Activity",
    "text": "8.11 Activity\nIn groups of 3-4 we will do two activities that will help us put into practice the concepts of tidy data, identifying keys and structuring relational data.\n\n8.11.1 Exercise 1:Identifying Tidy Data\n\n\n\n\n\n\nDoes the table follow the tidy data principles?\n\n\n\n\nLook at the tables on this file and determine if they follow the three tidy data principles. If not, which ones aren’t met?\nHow would you wrangle the data to make it tidy? Describe the steps you would take to tidy the data.\nSketch how would the tidy version look like.\n\n\n\n\n\n8.11.2 Excersice 2: Relational Databases\n\n\n\n\n\n\nPrompt\n\n\n\n\nOur funding agency requires that we take surveys of individuals who complete our training courses so that we can report on the demographics of our trainees and how effective they find our courses to be.\n\n\n\n\n\n\n\n\n\nDesign data collection tables\n\n\n\n\nIn your small groups, design a set of tables that will capture information collected in a participant survey that would apply to many courses.\nDon’t focus on designing a comprehensive set of questions for the survey, one or two simple questions would be sufficient (eg: “Did the course meet your expectations?”, “What could be improved?”, “To what degree did your knowledge increase?”).\nInclude variables (columns) with basic set of information from the surveys and about the courses, such as the date of the course and name of the course, etc.\n\n\n\n\n\n\n\n\n\nCreate entity relationsip model\n\n\n\nAfter you have thought about what kind of information you care collecting, let’s break it down and build the entity-relationship model.\n\nIdentify the entities in the relational database and add each one in a box.\nAdd variables for each entity.\nIdentify the primary and foreign keys for those entities that relate to each other.\nAdd “words” describing how each entity relates\nAdd cardinality to every relationship in the diagram. This mean, use the EDR Crow’s Foot Quick Reference to quantify how many items in an entity are related to another entity.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Tidy Data</span>"
    ]
  },
  {
    "objectID": "session_09.html",
    "href": "session_09.html",
    "title": "9  Cleaning and Wrangling Data",
    "section": "",
    "text": "Learning Objectives",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Cleaning and Wrangling Data</span>"
    ]
  },
  {
    "objectID": "session_09.html#learning-objectives",
    "href": "session_09.html#learning-objectives",
    "title": "9  Cleaning and Wrangling Data",
    "section": "",
    "text": "Introduce dplyr and tidyr functions to clean and wrangle data for analysis\nLearn about the Split-Apply-Combine strategy and how it applies to data wrangling\nDescribe the difference between wide vs. long table formats and how to convert between them",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Cleaning and Wrangling Data</span>"
    ]
  },
  {
    "objectID": "session_09.html#introduction",
    "href": "session_09.html#introduction",
    "title": "9  Cleaning and Wrangling Data",
    "section": "9.1 Introduction",
    "text": "9.1 Introduction\nThe data we get to work with are rarely, if ever, in the format we need to do our analyses. It’s often the case that one package requires data in one format, while another package requires the data to be in another format. To be efficient analysts, we should have good tools for reformatting data for our needs so we can do further work like making plots and fitting models. The dplyr and tidyr R packages provide a fairly complete and extremely powerful set of functions for us to do this reformatting quickly. Learning these tools well will greatly increase your efficiency as an analyst.\nLet’s look at two motivating examples.\n\n\n\n\n\n\nExample 1\n\n\n\nSuppose you have the following data.frame called length_data with data about salmon length and want to calculate the average length per year.\n\n\n\nyear\nlength_cm\n\n\n\n\n1990\n5.673318\n\n\n1991\n3.081224\n\n\n1991\n4.592696\n\n\n1992\n4.381523\n\n\n1992\n5.597777\n\n\n1992\n4.900052\n\n\n\nThe dplyr R library provides a fast and powerful way to do this calculation in a few lines of code:\n\nlength_data %&gt;% \n  group_by(year) %&gt;% \n  summarize(mean_length_cm = mean(length_cm))\n\n\n\n\n\n\n\n\n\nExample 2\n\n\n\nAnother process we often need to do is to “reshape” our data. Consider the following table that is in what we call “wide” format:\n\n\n\nsite\n1990\n1991\n…\n1993\n\n\n\n\ngold\n100\n118\n…\n112\n\n\nlake\n100\n118\n…\n112\n\n\n…\n…\n…\n…\n…\n\n\ndredge\n100\n118\n…\n112\n\n\n\nYou are probably familiar with data in the above format, where values of the variable being observed are spread out across columns. In this example we have a different column per year. This wide format works well for data entry and sometimes works well for analysis but we quickly outgrow it when using R (and know it is not tidy data!). For example, how would you fit a model with year as a predictor variable? In an ideal world, we’d be able to just run lm(length ~ year). But this won’t work on our wide data because lm() needs length and year to be columns in our table.\nThe tidyr package allows us to quickly switch between wide format and long format using the pivot_longer() function:\n\nsite_data %&gt;% \n  pivot_longer(-site, names_to = \"year\", values_to = \"length\")\n\n\n\n\nsite\nyear\nlength\n\n\n\n\ngold\n1990\n101\n\n\nlake\n1990\n104\n\n\ndredge\n1990\n144\n\n\n…\n…\n…\n\n\ndredge\n1993\n145\n\n\n\n\n\nThis lesson will cover examples to learn about the functions you’ll most commonly use from the dplyr and tidyr packages:\n\nCommon dplyr functions\n\n\n\n\n\n\nFunction name\nDescription\n\n\n\n\nmutate()\nCreates modify and deletes columns\n\n\ngroup_by()\nGroups data by one or more variables\n\n\nsummarise()\nSummaries each group down to one row\n\n\nselect()\nKeep or drop columns using their names\n\n\nfilter()\nKeeps rows that matches conditions\n\n\narrange()\norder rows using columns variable\n\n\nrename()\nRename a column\n\n\n\n\nCommon tidyr functions\n\n\n\n\n\n\nFunction name\nDescription\n\n\n\n\npivot_longer()\ntransforms data from a wide to a long format\n\n\npivot_wider()\ntransforms data from a long to a wide format\n\n\nunite()\nUnite multiple columns into one by pasting strings together\n\n\nseparate()\nSeparate a character column into multiple columns with a regular expression or numeric locations",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Cleaning and Wrangling Data</span>"
    ]
  },
  {
    "objectID": "session_09.html#data-cleaning-basics",
    "href": "session_09.html#data-cleaning-basics",
    "title": "9  Cleaning and Wrangling Data",
    "section": "9.2 Data cleaning basics",
    "text": "9.2 Data cleaning basics\nTo demonstrate, we’ll be working with a tidied up version of a data set from Alaska Department of Fish & Game containing commercial catch data from 1878-1997. The data set and reference to the original source can be found at its public archive.\n\n\n\n\n\n\nSetup\n\n\n\nFirst, open a new Quarto document. Delete everything below the setup chunk, and add a library chunk that calls dplyr, tidyr, and readr\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(readr)\n\n\n\n\n\n\n\n\n\nA note on loading packages\n\n\n\nYou may have noticed the following messages pop up when you ran your library chunk.\nAttaching package: ‘dplyr’\n\nThe following objects are masked from ‘package:stats’:\n\n    filter, lag\n\nThe following objects are masked from ‘package:base’:\n\n    intersect, setdiff, setequal, union\nThese are important messages. They are letting you know that certain functions from the stats and base packages (which are loaded by default when you start R) are masked by different functions with the same name in the dplyr package. It turns out, the order that you load the packages in matters. Since we loaded dplyr after stats, R will assume that if you call filter(), you mean the dplyr version unless you specify otherwise.\nBeing specific about which version of filter(), for example, you call is easy. To explicitly call a function by its unambiguous name, we use the syntax package_name::function_name(...). So, if we wanted to call the stats version of filter() in this Rmarkdown document, I would use the syntax stats::filter(...).\n\n\n\n\n\n\n\n\nRemove messages and warnings\n\n\n\nMessages and warnings are important, but we might not want them in our final document. After you have read the packages in, adjust the chunk settings in your library chunk to suppress warnings and messages by adding #| message: false or #| warning: false. Both of these chunk options, when set to false, prevents messages or warnings from appearing in the rendered file.\n\n\nNow that we have introduced some data wrangling libraries, let’s get the data that we are going to use for this lesson.\n\n\n\n\n\n\nSetup\n\n\n\n\nGo to KNB Data Package Alaska commercial salmon catches by management region (1886- 1997)\nFind the data file df35b.302.1. Right click the “Download” button and select “Copy Link Address”\nPaste the copied URL into the read_csv() function\n\nThe code chunk you use to read in the data should look something like this:\n\ncatch_original &lt;- read_csv(\"https://knb.ecoinformatics.org/knb/d1/mn/v2/object/df35b.302.1\")\n\nNote for Windows users: Keep in mind, if you want to replicate this workflow in your local computer you also need to use the url() function here with the argument method = \"libcurl\".\nIt would look like this:\n\ncatch_original &lt;- read.csv(url(\"https://knb.ecoinformatics.org/knb/d1/mn/v2/object/df35b.302.1\", method = \"libcurl\"))\n\n\n\nThis data set is relatively clean and easy to interpret as-is. While it may be clean, it’s in a shape that makes it hard to use for some types of analyses so we’ll want to fix that first.\n\n\n\n\n\n\nExercise\n\n\n\nBefore we get too much further, spend a minute or two outlining your Quarto document so that it includes the following sections and steps:\n\nData Sources\n\nRead in the data\nExplore data\n\nClean and Reshape data\n\nUsing select() function\nCheck column types\nReplace values in a column with mutate()\nReshape data with pivot_longer() and pivot_wider()\nRename columns rename()\nAdd columns with mutate()\nSummary stats using group_by() and summarize()\nFiltering rows using filter()\nSort data using arrange()\nSplit and combine values in columns with separate() and unite()",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Cleaning and Wrangling Data</span>"
    ]
  },
  {
    "objectID": "session_09.html#data-exploration",
    "href": "session_09.html#data-exploration",
    "title": "9  Cleaning and Wrangling Data",
    "section": "9.3 Data exploration",
    "text": "9.3 Data exploration\nSimilar to what we did in our Literate Analysis lesson, it is good practice to skim through the data you just read in.\nDoing so is important to make sure the data is read as you were expecting and to familiarize yourself with the data.\nSome of the basic ways to explore your data are:\n\n## Prints the column names of my data frame\ncolnames(catch_original)\n\n## First 6 lines of the data frame\nhead(catch_original)\n\n## Summary of each column of data\nsummary(catch_original)\n\n## Prints unique values in a column (in this case, the region)\nunique(catch_original$Region)\n\n## Opens data frame in its own tab to see each row and column of the data (do in console)\nView(catch_original)",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Cleaning and Wrangling Data</span>"
    ]
  },
  {
    "objectID": "session_09.html#about-the-pipe-operator",
    "href": "session_09.html#about-the-pipe-operator",
    "title": "9  Cleaning and Wrangling Data",
    "section": "9.4 About the pipe (%>%) operator",
    "text": "9.4 About the pipe (%&gt;%) operator\nBefore we jump into learning tidyr and dplyr, we first need to explain the pipeline operator %&gt;%.\nBoth the tidyr and the dplyr packages use the pipe operator (%&gt;%), which may look unfamiliar. The pipe is a powerful way to efficiently chain together operations. The pipe will take the output of a previous statement, and use it as the input to the next statement.\nSay you want to both filter() out rows of a data set, and select() certain columns.\nInstead of writing:\n\ndf_filtered &lt;- filter(df, ...)\ndf_selected &lt;- select(df_filtered, ...)\n\nYou can write:\n\ndf_cleaned &lt;- df %&gt;% \n    filter(...) %&gt;%\n    select(...)\n\nIf you think of the assignment operator (&lt;-) as reading like “gets”, then the pipe operator would read like “then”.\nSo you might think of the above chunk being translated as:\n\nThe cleaned data frame gets the original data, and then a filter (of the original data), and then a select (of the filtered data).\n\nThe benefits to using pipes are that you don’t have to keep track of (or overwrite) intermediate data frames. The drawbacks are that it can be more difficult to explain the reasoning behind each step, especially when many operations are chained together. It is good to strike a balance between writing efficient code (chaining operations), while ensuring that you are still clearly explaining, both to your future self and others, what you are doing and why you are doing it.\n\n\n\n\n\n\nQuick Tip\n\n\n\nRStudio has a keyboard shortcut for %&gt;%\n\nWindows: Ctrl + Shift + M\nMac: cmd + shift + M",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Cleaning and Wrangling Data</span>"
    ]
  },
  {
    "objectID": "session_09.html#selecting-or-removing-columns-using-select",
    "href": "session_09.html#selecting-or-removing-columns-using-select",
    "title": "9  Cleaning and Wrangling Data",
    "section": "9.5 Selecting or removing columns using select()",
    "text": "9.5 Selecting or removing columns using select()\nWe’re ready to go back to our salmon dataset. The first issue is the extra columns All and notesRegCode. Let’s select only the columns we want, and assign this to a variable called catch_data.\n\ncatch_data &lt;- catch_original %&gt;%\n    select(Region, Year, Chinook, Sockeye, Coho, Pink, Chum)\n\nhead(catch_data)\n\n# A tibble: 6 × 7\n  Region  Year Chinook Sockeye  Coho  Pink  Chum\n  &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 SSE     1886 0             5     0     0     0\n2 SSE     1887 0           155     0     0     0\n3 SSE     1888 0           224    16     0     0\n4 SSE     1889 0           182    11    92     0\n5 SSE     1890 0           251    42     0     0\n6 SSE     1891 0           274    24     0     0\n\n\nMuch better!\nThe select() function also allows you to say which columns you don’t want, by passing unquoted column names preceded by minus (-) signs:\n\ncatch_data &lt;- catch_original %&gt;%\n    select(-All,-notesRegCode)",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Cleaning and Wrangling Data</span>"
    ]
  },
  {
    "objectID": "session_09.html#quality-check",
    "href": "session_09.html#quality-check",
    "title": "9  Cleaning and Wrangling Data",
    "section": "9.6 Quality check",
    "text": "9.6 Quality check\nNow that we have the data we are interested in using, we should do a little quality check to see that everything seems as expected. One nice way of doing this is the glimpse() function.\n\ndplyr::glimpse(catch_data)\n\nRows: 1,708\nColumns: 7\n$ Region  &lt;chr&gt; \"SSE\", \"SSE\", \"SSE\", \"SSE\", \"SSE\", \"SSE\", \"SSE\", \"SSE\", \"SSE\",…\n$ Year    &lt;dbl&gt; 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 18…\n$ Chinook &lt;chr&gt; \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"3\", \"4\", \"5\", \"9…\n$ Sockeye &lt;dbl&gt; 5, 155, 224, 182, 251, 274, 207, 189, 253, 408, 989, 791, 708,…\n$ Coho    &lt;dbl&gt; 0, 0, 16, 11, 42, 24, 11, 1, 5, 8, 192, 161, 132, 139, 84, 107…\n$ Pink    &lt;dbl&gt; 0, 0, 0, 92, 0, 0, 8, 187, 529, 606, 996, 2218, 673, 1545, 204…\n$ Chum    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 1, 2, 0, 0, 0, 102, 343…\n\n\n\n\n\n\n\n\nExercise\n\n\n\nExamine the output of the glimpse() function call. Does anything seem amiss with this data set that might warrant fixing?\n\n\nAnswer:\n\nThe Chinook catch data are character class. Let’s fix it using the function mutate() before moving on.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Cleaning and Wrangling Data</span>"
    ]
  },
  {
    "objectID": "session_09.html#changing-column-content-using-mutate",
    "href": "session_09.html#changing-column-content-using-mutate",
    "title": "9  Cleaning and Wrangling Data",
    "section": "9.7 Changing column content using mutate()",
    "text": "9.7 Changing column content using mutate()\nWe can use the mutate() function to change a column, or to create a new column. First, let’s try to convert the Chinook catch values to numeric type using the as.numeric() function, and overwrite the old Chinook column.\n\ncatch_clean &lt;- catch_data %&gt;%\n    mutate(Chinook = as.numeric(Chinook))\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `Chinook = as.numeric(Chinook)`.\nCaused by warning:\n! NAs introduced by coercion\n\nhead(catch_clean)\n\n# A tibble: 6 × 7\n  Region  Year Chinook Sockeye  Coho  Pink  Chum\n  &lt;chr&gt;  &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 SSE     1886       0       5     0     0     0\n2 SSE     1887       0     155     0     0     0\n3 SSE     1888       0     224    16     0     0\n4 SSE     1889       0     182    11    92     0\n5 SSE     1890       0     251    42     0     0\n6 SSE     1891       0     274    24     0     0\n\n\nWe get a warning \"NAs introduced by coercion\" which is R telling us that it couldn’t convert every value to an integer and, for those values it couldn’t convert, it put an NA in its place. This is behavior we commonly experience when cleaning data sets and it’s important to have the skills to deal with it when it comes up.\nTo investigate, let’s isolate the issue. We can find out which values are NAs with a combination of is.na() and which(), and save that to a variable called i.\n\ni &lt;- which(is.na(catch_clean$Chinook))\ni\n\n[1] 401\n\n\nIt looks like there is only one problem row, lets have a look at it in the original data.\n\ncatch_data[i,]\n\n# A tibble: 1 × 7\n  Region  Year Chinook Sockeye  Coho  Pink  Chum\n  &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 GSE     1955 I            66     0     0     1\n\n\nWell that’s odd: The value in Chinook is the letter I. It turns out that this data set is from a PDF which was automatically converted into a csv and this value of I is actually a 1.\nLet’s fix it by incorporating the if_else() function to our mutate() call, which will change the value of the Chinook column to 1 if the value is equal to I, then will use as.numeric() to turn the character representations of numbers into numeric typed values.\n\ncatch_clean &lt;- catch_data %&gt;%\n    mutate(Chinook = if_else(condition = Chinook == \"I\", \n                             true = \"1\", \n                             false = Chinook),\n           Chinook = as.numeric(Chinook))\n\n##check\ncatch_clean[i, ]\n\n# A tibble: 1 × 7\n  Region  Year Chinook Sockeye  Coho  Pink  Chum\n  &lt;chr&gt;  &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 GSE     1955       1      66     0     0     1",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Cleaning and Wrangling Data</span>"
    ]
  },
  {
    "objectID": "session_09.html#changing-shape-using-pivot_longer-and-pivot_wider",
    "href": "session_09.html#changing-shape-using-pivot_longer-and-pivot_wider",
    "title": "9  Cleaning and Wrangling Data",
    "section": "9.8 Changing shape using pivot_longer() and pivot_wider()",
    "text": "9.8 Changing shape using pivot_longer() and pivot_wider()\nThe next issue is that the data are in a wide format and we want the data in a long format instead. The function pivot_longer() from the tidyr package helps us do this conversion. If you do not remember all the arguments that go into pivot_longer() you can always call the help page by typing ?pivot_longer in the console.\n\ncatch_long &lt;- catch_clean %&gt;% \n    #pivot longer all columns except Region and Year\n    pivot_longer(\n        cols = -c(Region, Year),\n        names_to = \"species\",\n        values_to = \"catch\"\n    )\n\nhead(catch_long)\n\n# A tibble: 6 × 4\n  Region  Year species catch\n  &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;\n1 SSE     1886 Chinook     0\n2 SSE     1886 Sockeye     5\n3 SSE     1886 Coho        0\n4 SSE     1886 Pink        0\n5 SSE     1886 Chum        0\n6 SSE     1887 Chinook     0\n\n\nThe syntax we used above for pivot_longer() might be a bit confusing so let’s walk though it.\n\nThe first argument to pivot_longer is the columns over which we are pivoting. You can select these by listing either the names of the columns you do want to pivot, or in this case, the names of the columns you are not pivoting over.\nThe names_to argument: this is the name of the column that you are creating from the column names of the columns you are pivoting over.\nThe values_to argument: the name of the column that you are creating from the values in the columns you are pivoting over.\n\nThe opposite of pivot_longer() is the pivot_wider() function. It works in a similar declarative fashion:\n\ncatch_wide &lt;- catch_long %&gt;%\n    pivot_wider(names_from = species,\n                values_from = catch)\n\nhead(catch_wide)\n\n# A tibble: 6 × 7\n  Region  Year Chinook Sockeye  Coho  Pink  Chum\n  &lt;chr&gt;  &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 SSE     1886       0       5     0     0     0\n2 SSE     1887       0     155     0     0     0\n3 SSE     1888       0     224    16     0     0\n4 SSE     1889       0     182    11    92     0\n5 SSE     1890       0     251    42     0     0\n6 SSE     1891       0     274    24     0     0\n\n\nSame than we did above we can pull up the documentation of the function to remind ourselves what goes in which argument. Type ?pivot_wider in the console.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Cleaning and Wrangling Data</span>"
    ]
  },
  {
    "objectID": "session_09.html#renaming-columns-with-rename",
    "href": "session_09.html#renaming-columns-with-rename",
    "title": "9  Cleaning and Wrangling Data",
    "section": "9.9 Renaming columns with rename()",
    "text": "9.9 Renaming columns with rename()\nIf you scan through the data, you may notice the values in the catch column are very small (these are supposed to be annual catches). If we look at the metadata we can see that the catch column is in thousands of fish, so let’s convert it before moving on.\nLet’s first rename the catch column to be called catch_thousands:\n\ncatch_long &lt;- catch_long %&gt;%\n    rename(catch_thousands = catch)\n\nhead(catch_long)\n\n# A tibble: 6 × 4\n  Region  Year species catch_thousands\n  &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;             &lt;dbl&gt;\n1 SSE     1886 Chinook               0\n2 SSE     1886 Sockeye               5\n3 SSE     1886 Coho                  0\n4 SSE     1886 Pink                  0\n5 SSE     1886 Chum                  0\n6 SSE     1887 Chinook               0\n\n\n\n\n\n\n\n\nnames() versus rename()\n\n\n\nMany people use the base R function names() to rename columns, often in combination with column indexing that relies on columns being in a particular order. Column indexing is often also used to select columns instead of the select() function from dplyr. Although these methods work just fine, they do have one major drawback: in most implementations they rely on you knowing exactly the column order your data is in.\nTo illustrate why your knowledge of column order isn’t reliable enough for these operations, considering the following scenario:\nYour colleague emails you letting you know that she has an updated version of the conductivity-temperature-depth data from this year’s research cruise, and sends it along. Excited, you re-run your scripts that use this data for your phytoplankton research. You run the script and suddenly all of your numbers seem off. You spend hours trying to figure out what is going on.\nUnbeknownst to you, your colleagues bought a new sensor this year that measures dissolved oxygen. Because of the new variables in the data set, the column order is different. Your script which previously renamed the fourth column, SAL_PSU to salinity now renames the fourth column, O2_MGpL to salinity. No wonder your results looked so weird, good thing you caught it!\nIf you had written your code so that it doesn’t rely on column order, but instead renames columns using the rename() function, the code would have run just fine (assuming the name of the original salinity column didn’t change, in which case the code would have thrown an error in an obvious way). This is an example of a defensive coding strategy, where you try to anticipate issues before they arise, and write your code in such a way as to keep the issues from happening.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Cleaning and Wrangling Data</span>"
    ]
  },
  {
    "objectID": "session_09.html#adding-columns-using-mutate",
    "href": "session_09.html#adding-columns-using-mutate",
    "title": "9  Cleaning and Wrangling Data",
    "section": "9.10 Adding columns using mutate()",
    "text": "9.10 Adding columns using mutate()\nNow let’s use mutate() again to create a new column called catch with units of fish (instead of thousands of fish).\n\ncatch_long &lt;- catch_long %&gt;%\n    mutate(catch = catch_thousands * 1000)\n\nhead(catch_long)\n\nLet’s remove the catch_thousands column for now since we don’t need it. Note that here we have added to the expression we wrote above by adding another function call (mutate) to our expression. This takes advantage of the pipe operator by grouping together a similar set of statements, which all aim to clean up the catch_clean data frame.\n\ncatch_long &lt;- catch_long %&gt;%\n    mutate(catch = catch_thousands * 1000) %&gt;%\n    select(-catch_thousands)\n\nhead(catch_long)\n\n# A tibble: 6 × 4\n  Region  Year species catch\n  &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;\n1 SSE     1886 Chinook     0\n2 SSE     1886 Sockeye  5000\n3 SSE     1886 Coho        0\n4 SSE     1886 Pink        0\n5 SSE     1886 Chum        0\n6 SSE     1887 Chinook     0\n\n\nWe’re now ready to start analyzing the data.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Cleaning and Wrangling Data</span>"
    ]
  },
  {
    "objectID": "session_09.html#summary-statistics-using-group_by-and-summarize",
    "href": "session_09.html#summary-statistics-using-group_by-and-summarize",
    "title": "9  Cleaning and Wrangling Data",
    "section": "9.11 Summary statistics using group_by() and summarize()",
    "text": "9.11 Summary statistics using group_by() and summarize()\nSuppose we are now interested in getting the average catch per region. In our initial data exploration we saw there are 18 regions, we can easily see their names again:\n\nunique(catch_original$Region)\n\n [1] \"SSE\" \"NSE\" \"YAK\" \"GSE\" \"BER\" \"COP\" \"PWS\" \"CKI\" \"BRB\" \"KSK\" \"YUK\" \"NRS\"\n[13] \"KTZ\" \"KOD\" \"CHG\" \"SOP\" \"ALU\" \"NOP\"\n\n\nThink about how we would calculate the average catch per region “by hand”. It would be something like this:\n\nWe start with our table and notice there are multiple regions in the “Regions” column.\nWe split our original table to group all observations from the same region together.\nWe calculate the average catch for each of the groups we form.\nThen we combine the values for average catch per region into a single table.\n\n\n\n\n\n\n\n\nAnalyses like this conform to what is known as the Split-Apply-Combine strategy. This strategy follows the three steps we explained above:\n\nSplit: Split the data into logical groups (e.g., region, species, etc.)\nApply: Calculate some summary statistic on each group (e.g. mean catch by year, number of individuals per species)\nCombine: Combine the statistic calculated on each group back together into a single table\n\nThe dplyr library lets us easily employ the Split-Apply-Combine strategy by using the group_by() and summarize() functions:\n\nmean_region &lt;- catch_long %&gt;%\n    group_by(Region) %&gt;%\n    summarize(mean_catch = mean(catch))\n\nhead(mean_region)\n\n# A tibble: 6 × 2\n  Region mean_catch\n  &lt;chr&gt;       &lt;dbl&gt;\n1 ALU        40384.\n2 BER        16373.\n3 BRB      2709796.\n4 CHG       315487.\n5 CKI       683571.\n6 COP       179223.\n\n\nLet’s see how the previous code implements the Split-Apply-Combine strategy:\n\ngroup_by(Region): this is telling R to split the dataframe and create a group for each different value in the column Region. R just keeps track of the groups, it doesn’t return separate dataframes per region.\nmean(catch): here mean is the function we want to apply to the column catch in each group.\nsummarize(catch = mean(catch)) the function summarize() is used to combine the results of mean(catch) in each group into a single table. The argument mean_catch = mean(catch) indicates that the column having the results of mean(catch) will be named mean_catch.\n\nAnother common use of group_by() followed by summarize() is to count the number of rows in each group. We have to use a special function from dplyr, n().\n\nn_region &lt;- catch_long %&gt;%\n    group_by(Region) %&gt;%\n    summarize(n = n())\n\nhead(n_region)\n\n# A tibble: 6 × 2\n  Region     n\n  &lt;chr&gt;  &lt;int&gt;\n1 ALU      435\n2 BER      510\n3 BRB      570\n4 CHG      550\n5 CKI      525\n6 COP      470\n\n\n\n\n\n\n\n\nTry using count()\n\n\n\nIf you are finding that you are reaching for this combination of group_by(), summarize() and n() a lot, there is a helpful dplyr function count() that accomplishes this in one function!\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\nFind another grouping and statistic to calculate for each group.\nFind out if you can group by multiple variables.\n\n\n\nAnswer\n## for example:\ncatch_year_sp &lt;- catch_long %&gt;%\n    group_by(Year, species) %&gt;%\n    summarize(total_year = sum(catch, na.rm = T))",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Cleaning and Wrangling Data</span>"
    ]
  },
  {
    "objectID": "session_09.html#filtering-rows-using-filter",
    "href": "session_09.html#filtering-rows-using-filter",
    "title": "9  Cleaning and Wrangling Data",
    "section": "9.12 Filtering rows using filter()",
    "text": "9.12 Filtering rows using filter()\nWe use the filter() function to filter our data.frame to rows matching some condition. It’s similar to subset() from base R.\nLet’s go back to our original data.frame and do some filter()ing:\n\nsse_catch &lt;- catch_long %&gt;%\n    filter(Region == \"SSE\")\n\nhead(sse_catch)\n\n# A tibble: 6 × 4\n  Region  Year species catch\n  &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;\n1 SSE     1886 Chinook     0\n2 SSE     1886 Sockeye  5000\n3 SSE     1886 Coho        0\n4 SSE     1886 Pink        0\n5 SSE     1886 Chum        0\n6 SSE     1887 Chinook     0\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\nFilter to just catches of over one million fish\nFilter to just Chinook from the SSE region\n\n\n\nAnswer\n## Catches over a million fish\ncatch_million &lt;- catch_long %&gt;%\n    filter(catch &gt; 1000000)\n\n## Chinook from SSE data\nchinook_see &lt;- catch_long %&gt;%\n    filter(Region == \"SSE\",\n           species == \"Chinook\")\n\n## OR\nchinook_see &lt;- catch_long %&gt;%\n    filter(Region == \"SSE\" & species == \"Chinook\")",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Cleaning and Wrangling Data</span>"
    ]
  },
  {
    "objectID": "session_09.html#sorting-your-data-using-arrange",
    "href": "session_09.html#sorting-your-data-using-arrange",
    "title": "9  Cleaning and Wrangling Data",
    "section": "9.13 Sorting your data using arrange()",
    "text": "9.13 Sorting your data using arrange()\nThe arrange() function is used to sort the rows of a data.frame. Two common cases to use arrange() are:\n\nTo calculate a cumulative sum (with cumsum()) so row order matters\nTo display a table (like in an .qmd document) in sorted order\n\nLet’s re-calculate mean catch by region, and then arrange() the output by mean catch:\n\nmean_region &lt;- catch_long %&gt;%\n    group_by(Region) %&gt;%\n    summarize(mean_catch = mean(catch)) %&gt;%\n    arrange(mean_catch)\n\nhead(mean_region)\n\n# A tibble: 6 × 2\n  Region mean_catch\n  &lt;chr&gt;       &lt;dbl&gt;\n1 BER        16373.\n2 KTZ        18836.\n3 ALU        40384.\n4 NRS        51503.\n5 KSK        67642.\n6 YUK        68646.\n\n\nThe default sorting order of arrange() is to sort in ascending order. To reverse the sort order, wrap the column name inside the desc() function:\n\nmean_region &lt;- catch_long %&gt;%\n    group_by(Region) %&gt;%\n    summarize(mean_catch = mean(catch)) %&gt;%\n    arrange(desc(mean_catch))\n\nhead(mean_region)\n\n# A tibble: 6 × 2\n  Region mean_catch\n  &lt;chr&gt;       &lt;dbl&gt;\n1 SSE      3184661.\n2 BRB      2709796.\n3 NSE      1825021.\n4 KOD      1528350 \n5 PWS      1419237.\n6 SOP      1110942.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Cleaning and Wrangling Data</span>"
    ]
  },
  {
    "objectID": "session_09.html#splitting-a-column-using-separate-and-unite",
    "href": "session_09.html#splitting-a-column-using-separate-and-unite",
    "title": "9  Cleaning and Wrangling Data",
    "section": "9.14 Splitting a column using separate() and unite()",
    "text": "9.14 Splitting a column using separate() and unite()\nThe separate() function allow us to easily split a single column into numerous. Its complement, the unite() function, allows us to combine multiple columns into a single one.\nThis can come in really handy when we need to split a column into two pieces by a consistent separator (like a dash).\nLet’s make a new data.frame with fake data to illustrate this. Here we have a set of site identification codes with information about the island where the site is (the first 3 letters) and a site number (the 3 numbers). If we want to group and summarize by island, we need a column with just the island information.\n\nsites_df &lt;- data.frame(site = c(\"HAW-101\",\n                                \"HAW-103\",\n                                \"OAH-320\",\n                                \"OAH-219\",\n                                \"MAU-039\"))\n\nsites_df %&gt;%\n    separate(site, c(\"island\", \"site_number\"), \"-\")\n\n  island site_number\n1    HAW         101\n2    HAW         103\n3    OAH         320\n4    OAH         219\n5    MAU         039\n\n\n\n\n\n\n\n\nExercise\n\n\n\nSplit the city column in the data frame cities_df into city and state_code columns\n\n## create `cities_df`\ncities_df &lt;- data.frame(city = c(\"Juneau AK\",\n                                 \"Sitka AK\",\n                                 \"Anchorage AK\"))\n\n\n\nAnswer\ncolnames(cities_df)\n\ncities_clean &lt;- cities_df %&gt;%\n    separate(city, c(\"city\", \"state_code\"), \" \")\n\n\n\n\nThe unite() function does just the reverse of separate(). If we have a data.frame that contains columns for year, month, and day, we might want to unite these into a single date column.\n\ndates_df &lt;- data.frame(\n    year = c(\"1930\",\n             \"1930\",\n             \"1930\"),\n    month = c(\"12\",\n              \"12\",\n              \"12\"),\n    day = c(\"14\",\n            \"15\",\n            \"16\")\n)\n\ndates_df %&gt;%\n    unite(date, year, month, day, sep = \"-\")\n\n        date\n1 1930-12-14\n2 1930-12-15\n3 1930-12-16",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Cleaning and Wrangling Data</span>"
    ]
  },
  {
    "objectID": "session_09.html#now-all-together",
    "href": "session_09.html#now-all-together",
    "title": "9  Cleaning and Wrangling Data",
    "section": "9.15 Now, all together!",
    "text": "9.15 Now, all together!\nWe just ran through the various things we can do with dplyr and tidyr but if you’re wondering how this might look in a real analysis. Let’s look at that now:\n\ncatch_original &lt;- read_csv(\"https://knb.ecoinformatics.org/knb/d1/mn/v2/object/df35b.302.1\")\n\nmean_region &lt;- catch_original %&gt;%\n  select(-All, -notesRegCode) %&gt;% \n  mutate(Chinook = if_else(Chinook == \"I\", \"1\", Chinook)) %&gt;% \n  mutate(Chinook = as.numeric(Chinook)) %&gt;% \n  pivot_longer(-c(Region, Year), \n               names_to = \"species\", \n               values_to = \"catch\") %&gt;%\n  mutate(catch = catch*1000) %&gt;% \n  group_by(Region) %&gt;% \n  summarize(mean_catch = mean(catch)) %&gt;% \n  arrange(desc(mean_catch))\n\nhead(mean_region)\n\n# A tibble: 6 × 2\n  Region mean_catch\n  &lt;chr&gt;       &lt;dbl&gt;\n1 SSE      3184661.\n2 BRB      2709796.\n3 NSE      1825021.\n4 KOD      1528350 \n5 PWS      1419237.\n6 SOP      1110942.\n\n\nWe have completed our lesson on Cleaning and Wrangling data. Before we break, let’s practice our Git workflow.\n\n\n\n\n\n\nSteps\n\n\n\n\nSave the .qmd you have been working on for this lesson.\nRender the Quarto file. This is a way to test everything in your code is working.\nStage (Add) &gt; Commit &gt; Pull &gt; Push",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Cleaning and Wrangling Data</span>"
    ]
  },
  {
    "objectID": "session_10.html",
    "href": "session_10.html",
    "title": "10  Practice Session I",
    "section": "",
    "text": "Learning Objectives",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Practice Session I</span>"
    ]
  },
  {
    "objectID": "session_10.html#learning-objectives",
    "href": "session_10.html#learning-objectives",
    "title": "10  Practice Session I",
    "section": "",
    "text": "Practice joining tables together\nPractice identifying primary and foreign keys\nPractice using common cleaning and wrangling functions\n\n\n\n\n\n\n\nAcknowledgements\n\n\n\nThese exercises are adapted from Allison Horst’s EDS 221: Scientific Programming Essentials Course for the Bren School’s Master of Environmental Data Science program.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Practice Session I</span>"
    ]
  },
  {
    "objectID": "session_10.html#about-the-data",
    "href": "session_10.html#about-the-data",
    "title": "10  Practice Session I",
    "section": "About the data",
    "text": "About the data\nThese exercises will be using bird survey data collected from the central Arizona-Phoenix metropolitan area by Arizona State University researchers (Warren et al. 2021).",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Practice Session I</span>"
    ]
  },
  {
    "objectID": "session_10.html#exercise-1-practice-joins",
    "href": "session_10.html#exercise-1-practice-joins",
    "title": "10  Practice Session I",
    "section": "Exercise 1: Practice Joins",
    "text": "Exercise 1: Practice Joins\n\n\n\n\n\n\nSetup\n\n\n\n\nMake sure you’re in the right project (training_{USERNAME}) and use the Git workflow by Pulling to check for any changes in the remote repository (aka repository on GitHub).\nCreate a new Quarto Document.\n\nTitle it “R Practice: Tidy Data and Joins”.\nSave the file and name it “r-practice-tidy-data-joins”.\n\n\nNote: Double check that you’re in the right project. Where in RStudio can you check where you are?\n\nLoad the following libraries at the top of your Quarto Document.\n\n\nlibrary(readr)\nlibrary(dplyr)\nlibrary(lubridate) # for bonus question\n\n# Quick question: Do you get a message after loading the libraries? What is it telling you? Talk to your neighbor about it or write a note in your qmd.\n\n\nObtain data from the EDI Data Portal Ecological and social interactions in urban parks: bird surveys in local parks in the central Arizona-Phoenix metropolitan area. Download the following files:\n\n\n52_pp52_birds_1.csv\n52_pp52_surveys_1.csv\n52_pp52_sites_1.csv\n52_pp52_taxalist_1.csv\n\nNote: It’s up to you on how you want to download and load the data! You can either use the download links (obtain by right-clicking the “Download” button and select “Copy Link Address” for each data entity) or manually download the data and then upload the files to RStudio server.\n\nOrganize your Quarto Document in a meaningful way. Organization is personal - so this is up to you! Consider the different ways we’ve organized previous files using: headers, bold text, naming code chunks, comments in code chunks. What is most important is organizing and documenting the file so that your future self (or if you share this file with others!) understands it as well as your current self does right now.\nUse the Git workflow. After you’ve set up your project and uploaded your data go through the workflow: Stage (add) -&gt; Commit -&gt; Pull -&gt; Push\n\nNote: You also want to Pull when you first open a project.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Practice Session I</span>"
    ]
  },
  {
    "objectID": "session_10.html#read-in-the-data",
    "href": "session_10.html#read-in-the-data",
    "title": "10  Practice Session I",
    "section": "10.1 Read in the data",
    "text": "10.1 Read in the data\n\n\n\n\n\n\nQuestion 1\n\n\n\nRead in the data and store the data frames as bird_observations, sites, surveys, and taxalist (it should be clear from the raw file names which is which).\n\n\n\n\nAnswer\n# read in data using download links\nbird_observations &lt;- read_csv(\"https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-cap.256.10&entityid=53edaa7a0e083013d9bf20322db1780e\")\nsurveys &lt;- read_csv(\"https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-cap.256.10&entityid=b2466fa5cb5ed7ee1ea91398fc291c59\")\nsites &lt;- read_csv(\"https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-cap.256.10&entityid=81bf72420e69077097fb0790dcdc63a6\")\ntaxalist &lt;- read_csv(\"https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-cap.256.10&entityid=58f863b7e3066e68536a9cacdc7bd58e\")\n\n# read in data from the data directory after manually downloading data \nbird_observations &lt;- read_csv(\"data/52_pp52_birds_1.csv\")\nsurveys &lt;- read_csv(\"data/52_pp52_surveys_1.csv\")\nsites &lt;- read_csv(\"data/52_pp52_sites_1.csv\")\ntaxalist &lt;- read_csv(\"data/52_pp52_taxalist_1.csv\")",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Practice Session I</span>"
    ]
  },
  {
    "objectID": "session_10.html#get-familiar-with-the-data",
    "href": "session_10.html#get-familiar-with-the-data",
    "title": "10  Practice Session I",
    "section": "10.2 Get familiar with the data",
    "text": "10.2 Get familiar with the data\n\n\n\n\n\n\nQuestion 2a\n\n\n\nWhat functions can you use to explore the data you just read in? Think about which functions we’ve been using to explore the structure of the data frame, information about columns, unique observations, etc. Tip: run `View(name_of_your_data_frame) in the console to see data in a spreadsheet-style viewer.\n\n\n\n\nAnswer\n# returns dimensions of the dataframe by number of rows and number of cols\ndim(bird_observations)\n\n# returns the top six rows of the dataframe\nhead(bird_observations)\n\n# returns all the columns and some info about the cols\nglimpse(bird_observations)\n\n# similar to glimpse but returns some summary statistics about the cols\nsummary(bird_observations)\n\n# returns column names \nnames(bird_observations)\n\n# returns unique values in a column. In this case we can see all the different bird species IDs\nunique(bird_observations$species_id)\n\n\n\n\n\n\n\n\nQuestion 2b\n\n\n\nWhat are the primary and foreign keys for the tables bird_observations and taxalist? Recall that a primary key is a unique identifier for each observed entity, one per row. And a foreign key references to a primary key in another table (linkage).\nHint: First identify the primary keys for all the tables, then identify the foreign keys.\n\n\n\n\nAnswer\n\n\nbird_observations: Primary key is a compound key made up of survey_id, site_id, and species_id. The foreign key is species_id.\ntaxalist: Primary key is species_id and does not have a foreign key that match the primary key in bird_observations.\n\nHowever, we could join bird_observations and taxalist by species_id, but depending on the type of join some values would be droped or NAs would be introduce in the resulting data frame.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Practice Session I</span>"
    ]
  },
  {
    "objectID": "session_10.html#create-a-subset-of-bird_observations",
    "href": "session_10.html#create-a-subset-of-bird_observations",
    "title": "10  Practice Session I",
    "section": "10.3 Create a subset of bird_observations",
    "text": "10.3 Create a subset of bird_observations\n\n\n\n\n\n\nQuestion 3\n\n\n\nWrite code to create a subset of bird_observations called birds_subset that only contains observations for birds with species id BHCO and RWBL, and from sites with site ID LI-W and NU-C.\nHint: What function do you use to subset data by rows?\n\n\n\n\nAnswer\nbirds_subset &lt;- bird_observations %&gt;% \n  filter(species_id %in% c(\"BHCO\", \"RWBL\")) %&gt;% \n  filter(site_id %in% c(\"LI-W\", \"NU-C\"))",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Practice Session I</span>"
    ]
  },
  {
    "objectID": "session_10.html#use-left_join-to-merge-birds_subset-with-the-tables-sites",
    "href": "session_10.html#use-left_join-to-merge-birds_subset-with-the-tables-sites",
    "title": "10  Practice Session I",
    "section": "10.4 Use left_join() to merge birds_subset with the tables sites",
    "text": "10.4 Use left_join() to merge birds_subset with the tables sites\n\n\n\n\n\n\nQuestion 4a\n\n\n\nFirst, answer: what do you expect the outcome data frame when doing left_join() between birds_subset and sites to look like? What observations do you expect in the outcome data frame.\nWrite this in your Quarto Document or tell a neighbor.\n\n\n\n\nAnswer\n\nI expect to see all columns and all observations from birds_subset and from sites, I expect to see the columns park_code, park_district, park-name, point_code, point_location and park_acreage and only observations for NU-C and LI-W because those are the only site_id values in birds_subset and in a left join only the observations matching the left table (in this case, birds_subset is the left table) will be kept.\n\n\n\n\n\n\n\nQustion 4b\n\n\n\nUse a left join to update birds_subset so that it also includes sites information. For each join, include an explicit argument saying which key you are joining by (even if it will just assume the correct one for you). Store the updated data frame as birds_left. Make sure to look at the output - is what it contains consistent with what you expected it to contain?\n\n\n\n\nAnswer\n# syntax using pipe\nbirds_left &lt;- birds_subset %&gt;% \n  left_join(y = sites, by = \"site_id\")\n# don't see x = birds_subset here because piping in birds_subset means it automatically assumes birds_subset as x.\n\n# syntax without pipe\nbirds_left &lt;- left_join(x = birds_subset, y = sites, by = \"site_id\")",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Practice Session I</span>"
    ]
  },
  {
    "objectID": "session_10.html#use-full_join-to-merge-birds_subset-and-sites-tables",
    "href": "session_10.html#use-full_join-to-merge-birds_subset-and-sites-tables",
    "title": "10  Practice Session I",
    "section": "10.5 Use full_join() to merge birds_subset and sites tables",
    "text": "10.5 Use full_join() to merge birds_subset and sites tables\n\n\n\n\n\n\nQuestion 5a\n\n\n\nFirst, answer: what do you expect a full_join() between birds_subset and sites to contain? Write this in your Quarto Document or tell a neighbor.\n\n\n\n\nAnswer\n\nI expect to see all columns and all observations from birds_subset and all columns and all observations from sites to be merged into one data frame because in a full join everything is kept.\n\n\n\n\n\n\n\nQuestions 5b\n\n\n\nWrite code to full_join() the birds_subset and sites data into a new object called birds_full. Explicitly include the variable you’re joining by. Look at the output. Is it what you expected?\n\n\n\n\nAnswer\n# syntax using pipe\nbirds_full &lt;- birds_subset %&gt;% \n  full_join(y = sites, by = \"site_id\")\n\n# syntax without pipe\nbirds_full &lt;- full_join(x = birds_subset, y = sites, by = \"site_id\")",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Practice Session I</span>"
    ]
  },
  {
    "objectID": "session_10.html#use-inner_join-to-merge-birds_subset-and-taxalist-data",
    "href": "session_10.html#use-inner_join-to-merge-birds_subset-and-taxalist-data",
    "title": "10  Practice Session I",
    "section": "10.6 Use inner_join() to merge birds_subset and taxalist data",
    "text": "10.6 Use inner_join() to merge birds_subset and taxalist data\n\n\n\n\n\n\nQuestion 6a\n\n\n\nFirst, answer: what do you expect an inner_join() between birds_subset and taxalist to contain? Write this in your Quarto Document or tell a neighbor.\n\n\n\n\nAnswer\n\nI expect to only have data merge together based on species_id and since there is only BHCO and RWBL in birds_subset then I will only retain data related to those two species. I will also expect to see the columns from taxalist: common_name and asu_itis to be merged into the joined table.\n\n\n\n\n\n\n\nQuestion 6b\n\n\n\nWrite code to inner_join() the birds_subset and taxalist, called birds_inner. Include an argument for what variable you’ll be joining by. Make sure you check the output.\n\n\n\n\nAnswer\n# syntax using pipe\nbirds_inner &lt;- birds_subset %&gt;% \n  inner_join(y = taxalist, by = \"species_id\")\n\n# syntax without pipe\nbirds_inner &lt;- inner_join(x = birds_subset, y = taxalist, by = \"species_id\" )\n\n\n\n\n\n\n\n\nQuestion 6c\n\n\n\nWhat would you get if instead of inner_join() you’d used left_join() for this example? Write code for the left join and check.\n\n\n\n\nAnswer\n# syntax using pipe\nbirds_inner_left &lt;- birds_subset %&gt;% \n  left_join(y = taxalist, by = \"species_id\")\n\n# syntax without pipe\nbirds_inner_left &lt;- left_join(x = birds_subset, y = taxalist, by = \"species_id\")\n\n\n\n\n\n\n\n\nQuestion 6d\n\n\n\nWhy does that make sense for this scenario? In what case would you expect the outcome to differ from an inner_join()? Write this in your Quarto Document or tell a neighbor.\n\n\n\n\nAnswer\n\nYou have the same resulting data set regardless of using inner_join() or left_join() to merge bird_subset and taxalist. The reasons for this are:\n\ninner_join() keeps only the rows (observations) that have a matching key across both data sets - here, species_id is our key, and the only rows that match across both data sets are those where species_id equals BHCO or RWBL\nleft_join() keeps all rows from the left table (in our case, the left table is birds_subset) and merges on data with matching keys (species_id) on the right (here, the right table is taxalist). Because our left data set (birds_subset) only contains species_ids equal to BHCO or RWBL, only rows with those species will be kept from the right data set (taxalist)\n\nYou’d expect the outcome to differ from an inner_join() if birds_subset contained an observation with a species_id that was not found in taxalist. If there was an observation of a species_id in birds_subset that was not in taxalist, then that observation would be kept, and NAs would be assigned to the common_name and asu_itis columns for that observations",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Practice Session I</span>"
    ]
  },
  {
    "objectID": "session_10.html#exercise-2-practice-wrangling-joining-data",
    "href": "session_10.html#exercise-2-practice-wrangling-joining-data",
    "title": "10  Practice Session I",
    "section": "Exercise 2: Practice Wrangling & Joining Data",
    "text": "Exercise 2: Practice Wrangling & Joining Data",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Practice Session I</span>"
    ]
  },
  {
    "objectID": "session_10.html#wrangle-bird_observations-data-and-merge-the-data-with-all-the-other-tables-sites-surveys-and-taxalist",
    "href": "session_10.html#wrangle-bird_observations-data-and-merge-the-data-with-all-the-other-tables-sites-surveys-and-taxalist",
    "title": "10  Practice Session I",
    "section": "10.7 Wrangle bird_observations data and merge the data with all the other tables (sites, surveys, and taxalist)",
    "text": "10.7 Wrangle bird_observations data and merge the data with all the other tables (sites, surveys, and taxalist)\n\n\n\n\n\n\nQuestion 7a\n\n\n\nStarting with your object bird_observations, rename the notes column to bird_obs_notes (so this doesn’t conflict with notes in the surveys table).\n\n\n\n\nAnswer\nbird_observations &lt;- bird_observations %&gt;% \n  rename(bird_obs_notes = notes)\n\n\n\n\n\n\n\n\nQuestion 7b\n\n\n\n\nCreate a subset that contains all observations in the birds_observations data frame,\nthen join the taxalist, sites and surveys tables to it,\nand finally limit to only columns survey_date, common_name, park_name, bird_count, and observer.\n\nHint: What function do you use to subset data by columns?\n\n\n\n\nAnswer\nbird_obs_subset &lt;- bird_observations %&gt;% \n  full_join(y = taxalist, by = \"species_id\") %&gt;% \n  full_join(y = sites, by = \"site_id\") %&gt;% \n  full_join(y = surveys, by = c(\"site_id\", \"survey_id\")) %&gt;%  \n  select(survey_date, common_name, park_name, bird_count, observer)",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Practice Session I</span>"
    ]
  },
  {
    "objectID": "session_10.html#explore-observer-data-and-fix-the-values-within-this-column-so-that-all-values-are-in-the-same-format",
    "href": "session_10.html#explore-observer-data-and-fix-the-values-within-this-column-so-that-all-values-are-in-the-same-format",
    "title": "10  Practice Session I",
    "section": "10.8 Explore observer data and fix the values within this column so that all values are in the same format",
    "text": "10.8 Explore observer data and fix the values within this column so that all values are in the same format\n\n\n\n\n\n\nQuestion 8a\n\n\n\nContinuing with bird_obs_subset, first use unique() to see the different unique values in the column observer. How many observers are there? Which value is unlike the others?\n\n\n\n\nAnswer\nunique(bird_obs_subset$observer)\n\n\n\n\n\n\n\n\nQuestion 8b\n\n\n\nReplace “Josh Burns” with a format that matches the other observer names. Then use unique() again to check your work.\nHint: What function do you use when you are making a change to an entire column?\n\n\n\n\nAnswer\nbird_obs_subset &lt;- bird_obs_subset %&gt;% \n  mutate(observer = if_else(condition = observer == \"Josh Burns\", \n                            true = \"J. Burns\", \n                            false = observer))\n\nunique(bird_obs_subset$observer)\n\n\n\n\n\n\n\n\nSave your work and use Git\n\n\n\nDon’t forget the Git workflow! After you’ve completed the exercises or reached a significant stopping point, use the workflow: Stage (add) -&gt; Commit -&gt; Pull -&gt; Push",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Practice Session I</span>"
    ]
  },
  {
    "objectID": "session_10.html#bonus-use-a-new-package-lubridate-to-wrangle-the-date-data-and-find-the-total-number-of-birds-by-park-and-month",
    "href": "session_10.html#bonus-use-a-new-package-lubridate-to-wrangle-the-date-data-and-find-the-total-number-of-birds-by-park-and-month",
    "title": "10  Practice Session I",
    "section": "10.9 Bonus: Use a new package lubridate to wrangle the date data and find the total number of birds by park and month",
    "text": "10.9 Bonus: Use a new package lubridate to wrangle the date data and find the total number of birds by park and month\nHint: How do you learn about a new function or package?\n\n\n\n\n\n\nBonus Question(s)\n\n\n\n\nUse lubridate::month() to add a new column to bird_obs_subset called survey_month, containing only the month number. Then, convert the month number to a factor (again within mutate()).\nUse dplyr::relocate() to move the new survey_month column to immediately after the survey_date column. You can do this in a separate code chunk, or pipe straight into it from your existing code.\nFilter to only include parks Lindo, Orme, Palomino, and Sonrisa.\nFind the total number of birds observed by park and month (Hint: You can use group_by() and summarize()).\n\n\n\n\n\nAnswer\nbird_obs_subset &lt;- bird_obs_subset %&gt;% \n  mutate(survey_month = lubridate::month(survey_date)) %&gt;% \n  mutate(survey_month = as.factor(survey_month)) %&gt;% \n  dplyr::relocate(survey_month, .after = survey_date) %&gt;% \n  filter(park_name %in% c(\"Lindo\", \"Orme\", \"Palomino\", \"Sonrisa\")) %&gt;% \n  group_by(park_name, survey_month) %&gt;% \n  summarize(tot_bird_count_month = n())\n\n\nTake a look at your final data frame. Does it give you the outcome you expected? Is it informative? How would you improve this wrangling process?\n\n\n\n\nWarren, Paige S., Ann Kinzig, Chris A Martin, and Louis Machabee. 2021. “Ecological and Social Interactions in Urban Parks: Bird Surveys in Local Parks in the Central Arizona-Phoenix Metropolitan Area.” Environmental Data Initiative. https://doi.org/10.6073/PASTA/F6F004BC7112CE266FDE2B80FAD19FF4.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Practice Session I</span>"
    ]
  },
  {
    "objectID": "session_11.html",
    "href": "session_11.html",
    "title": "11  Collaborating with Git and GitHub",
    "section": "",
    "text": "Learning Objectives",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Collaborating with Git and GitHub</span>"
    ]
  },
  {
    "objectID": "session_11.html#learning-objectives",
    "href": "session_11.html#learning-objectives",
    "title": "11  Collaborating with Git and GitHub",
    "section": "",
    "text": "Apply the principles, features, and collaboration tools of Git and GitHub to effectively collaborate with colleagues on code\nAnalyze and evaluate common causes of conflicts that arise when collaborating on repositories\nDemonstrate the ability to resolve conflicts using Git conflict resolution techniques\nApply workflows and best practices that minimize conflicts on collaborative repositories",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Collaborating with Git and GitHub</span>"
    ]
  },
  {
    "objectID": "session_11.html#introduction-to-git-and-github-tools-for-collaboration",
    "href": "session_11.html#introduction-to-git-and-github-tools-for-collaboration",
    "title": "11  Collaborating with Git and GitHub",
    "section": "11.1 Introduction to Git and GitHub Tools for Collaboration",
    "text": "11.1 Introduction to Git and GitHub Tools for Collaboration\n\n\n\nArtwork by Allison Horst\n\n\nGit is not only a powerful tool for individual work but also an excellent choice for collaborating with friends and colleagues. Git ensures that after you’ve completed your contributions to a repository, you can confidently synchronize your changes with changes made by others.\nOne of the easiest and most effective ways to collaborate using Git is by utilizing a shared repository on a hosting service like GitHub. This shared repository acts as a central hub, enabling collaborators to effortlessly exchange and merge their changes. With Git and a shared repository, you can collaborate seamlessly and work confidently, knowing that your changes will be integrated smoothly with those of your collaborators.\n\nThere are many advanced techniques for synchronizing Git repositories, but let’s start with a simple example.\nIn this example, the Collaborator will clone a copy of the Owner’s repository from GitHub, and the Owner will grant them Collaborator status, enabling the Collaborator to directly pull and push from the Owner’s GitHub repository.\n\n\n\n\n\nWe’ll be practicing the above workflow in the next exercises – here, a respository (aka repo) owner controls permissions on their remote repo, which is hosted on GitHub. They can push commits from their local repo to the remote repo. Similarly, they can pull commits from the remote repo to their cloned local repo(s) (remember, you can clone your repo to mulitple machines e.g. your laptop and your desktop). The repository owner adds a colleague as a collaborator by sending them an invite from the remote repo on GitHub. This collaborator can now push their own changes from their local repo to the now-shared remote repo (and also pull the Owner’s changes). Git and GitHub provide the tools for both colleagues to create and merge their changes to the shared remote repository.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Collaborating with Git and GitHub</span>"
    ]
  },
  {
    "objectID": "session_11.html#collaborating-with-a-trusted-colleague-without-conflicts",
    "href": "session_11.html#collaborating-with-a-trusted-colleague-without-conflicts",
    "title": "11  Collaborating with Git and GitHub",
    "section": "11.2 Collaborating with a trusted colleague without conflicts",
    "text": "11.2 Collaborating with a trusted colleague without conflicts\nWe start our collaboration by giving a trusted colleague access to our repository on GitHub. In this example, we define the Owner as the individual who owns the repository, and the Collaborator as the person whom the Owner chooses to give permission to make changes to their repository.\nThe Collaborator will make changes to the repository and then push those changes to the shared repository on GitHub. The Owner will then use pull to retrieve the changes without encountering any conflicts. This is the most ideal workflow.\nThe instructors will demonstrate this process in the next section.\n\nStep 0: Owner adds a Collaborator to their repository on GitHub\nThe Owner must change the settings of the remote repository and give the Collaborator access to the repository by inviting them as a collaborator. Once the Collaborator accepts the owner’s invitation, they will have push access to the repository – meaning they can contribute their own changes/commits to the Owner’s repository.\nTo do this, the owner will navigate to their remote repository on GitHub, then choose Settings &gt; Collaborators &gt; Add people, to send an email invitation. The invitation will show as “Pending” until accepted.\n\n\nStep 1: Collaborator clones the remote repository\nIn order to contribute, the Collaborator must clone the repository from the Owner’s GitHub account (Note: as a Collaborator, you won’t see the repository appear under your profile’s Repositories page). To do this, the Collaborator should navigate to the Owner’s repository on GitHub, then copy the clone URL. In RStudio, the Collaborator will create a new project from version control by pasting this clone URL into the appropriate dialog box (see the earlier chapter introducing GitHub).\n\n\nINTERMEDIATE STEP: Collaborator communicates with Owner that they plan to make some changes\nFrequent communication is SO important when collaborating! Letting one another know that you’re about to make and push changes to the remote repo can help to prevent merge conflicts (and reduce headaches). The easiest way to avoid merge conflicts is to ensure that you and your collaborators aren’t working on the same file(s)/section(s) of code at the same time.\n\n\nStep 2: Collaborator edits files locally\nWith the repo cloned locally, the Collaborator can now make changes to the README.md file, adding a line or statement somewhere noticeable near the top. Save the changes.\n\n\nStep 3: Collaborator commits, pulls, and pushs\nIt’s recommended that all collaborators (including the repo Owner) follow this workflow when syncing changes between their local repo and the remote repo (in this example, the Collaborator is now following these steps):\n\nadd and commit your modified file(s) (e.g. the updated README.md)\npull to fetch and merge changes from the remote/origin repository (in an ideal situation, as we’re demonstrating here, any potential changes are merged seamlessly without conflict)\npush your changes to the remote/origin repository\n\n\n\n\n\n\n\nWhy do I need to add and commit files before pulling?\n\n\n\nRemember, git pull is a combination of git fetching remote changes to your local repo and git mergeing those changes from your local repo into your local working file(s).\nThe merge part of git pull will fail if you have uncommitted changes in your local working file(s) to avoid any potential overwriting of your own changes. Because of this, you should always, add/commit then pull, and finally push.\n\n\n\n\n\n\n\n\n\nINTERMEDIATE STEP: Collaborator communicates with Owner that they pushed their changes to GitHub\nRemember, communication is key! The Owner now knows that they can pull those changes down to their local repo.\n\n\nStep 4: Owner pulls new changes from the remote repo to their local repo\nThe Owner can now open their local working copy of the code in RStudio, and pull to fetch and merge those changes into their local copy.\nCongrats, the Owner now has your changes! Now, all three repositories – the remote/origin repository on GitHub, the Owner’s local repository, and the Collaborator’s local repository – should all be in the exact same state.\n\n\nINTERMEDIATE STEP: Owner communicates with Collaborator that they now plan to make some changes\nDid we mention that communication is important? :)\n\n\nStep 5: Owner edits, commits, pulls (just in case!) and pushes\nFollowing the same workflow as the Collaborator did earlier:\n\nadd and commit your modified file(s) (e.g. the updated README.md)\npull to fetch and merge changes from the remote/origin repository (in an ideal situation, as we’re demonstrating here, any potential changes are merged seamlessly without conflict)\npush your changes to the remote/origin repository\n\n\n\nINTERMEDIATE STEP: Owner communicates with Collaborator that they pushed their changes to GitHub\nYes, this seems silly to repeat, yet again – but it’s also easy to forget in practice!\n\n\nStep 6: Collaborator pulls new changes from the remote repo to their local repo\nThe Collaborator can now pull down those changes from the Owner, and all copies are once again fully synced. And just like that, you’ve successfully collaborated!",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Collaborating with Git and GitHub</span>"
    ]
  },
  {
    "objectID": "session_11.html#ex1-no-conflict",
    "href": "session_11.html#ex1-no-conflict",
    "title": "11  Collaborating with Git and GitHub",
    "section": "11.3 Exercise 1: With a partner collaborate in a repository without a merge conflict",
    "text": "11.3 Exercise 1: With a partner collaborate in a repository without a merge conflict\n\n\n\n\n\n\nSetup\n\n\n\n\nGet into pairs, then choose one person as the Owner and one as the Collaborator\nBoth login to GitHub\n\nThese next steps are for the Owner:\n\nNavigate to the {FIRSTNAME}_test repository\nGo to Settings and navigate to Collaborators in the Access section on the left-hand side\nUnder Manage Access click the button Add people and type the username of your Collaborator in the search box\nOnce you’ve found the correct username, click Add {Collaborator username} to this repository\n\n\nNow, the Collaborator will follow this step:\n\nCheck your email for an invitation to GitHub or check your notifications (likely under Your Organizations) on GitHub to accept the invite to collaborate.\n\n\n\n\n11.3.1 Defining Merge Method\n\n\n\n\n\n\nSome Git configuration to surpress warning messages\n\n\n\nGit version 2.27 includes a new feature that allows users to specify the default method for integrating changes from a remote repository into a local repository, without receiving a warning (this warning is informative, but can get annoying). To suppress this warning for this repository only we need to configure Git by running this line of code in the Terminal:\n\ngit config pull.rebase false\n\npull.rebase false is a default strategy for pulling where Git will first try to auto-merge the files. If auto-merging is not possible, it will indicate a merge conflict.\nNote: Unlike when we first configured Git, we do not include the --global flag here (e.g. git config --global pull.rebase false). This sets this default strategy for this repository only (rather than globally for all your repositories). We do this because your chosen/default method of grabbing changes from a remote repository (e.g. pulling vs. rebasing) may change depending on collaborator/workflow preference.\n\n\n\n\n\n\n\n\nInstructions\n\n\n\nYou will do the exercise twice, where each person will get to practice being both the Owner and the Collaborator roles.\n\nStep 0: Designate one person as the Owner and one as the Collaborator.\n\nRound One:\n\nStep 1: Owner adds Collaborator to {FIRSTNAME}_test repository (see Setup block above for detailed steps)\nStep 2: Collaborator clones the Owner’s {FIRSTNAME}_test repository\nStep 3: Collaborator edits the README file:\n\nCollaborator adds a new level 2 heading to README titled “Git Workflow”\n\nStep 4: Collaborator commits and pushes the README file with the new changes to GitHub\nStep 5: Owner pulls the changes that the Collaborator made\nStep 6: Owner edits the README file:\n\nUnder “Git Workflow”, Owner adds the steps of the Git workflow we’ve been practicing\n\nStep 7: Owner commits and pushes the README file with the new changes to GitHub\nStep 8: Collaborator pulls the Owners changes from GitHub\nStep 9: Go back to Step 0, switch roles, and then follow the steps in Round Two.\n\nRound Two:\n\nStep 1: Owner adds Collaborator to {FIRSTNAME}_test repository\nStep 2: Collaborator clones the Owner’s {FIRSTNAME}_test repository\nStep 3: Collaborator edits the README file:\n\nCollaborator adds a new level 2 heading to README titled “How to Create a Git Repository from an existing project” and adds the high level steps for this workflow\n\nStep 4: Collaborator commits and pushes the README file with the new changes to GitHub\nStep 5: Owner pulls the changes that the Collaborator made\nStep 6: Owner edits the README file:\n\nUnder “How to Create a Git Repository”, Owner adds the high level steps for this workflow\n\nStep 7: Owner commits and pushes the README file with the new changes to GitHub\nStep 8: Collaborator pulls the Owners changes from GitHub\n\nHint: If you don’t remember how to create a Git repository, refer to the chapter Intro to Git and GitHub where we created two Git repositories",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Collaborating with Git and GitHub</span>"
    ]
  },
  {
    "objectID": "session_11.html#a-note-on-advanced-collaboration-techniques",
    "href": "session_11.html#a-note-on-advanced-collaboration-techniques",
    "title": "11  Collaborating with Git and GitHub",
    "section": "11.4 A Note on Advanced Collaboration Techniques",
    "text": "11.4 A Note on Advanced Collaboration Techniques\nThere are many Git and GitHub collaboration techniques, some more advanced than others. We won’t be covering advanced strategies in this course. But here is a table for your reference on a few popular Git collaboration workflow strategies and tools.\n\n\n\n\n\n\n\n\n\nCollaboration Technique\nBenefits\nWhen to Use\nWhen Not to Use\n\n\n\n\nBranch Management Strategies\n1. Enables parallel development and experimentation2. Facilitates isolation of features or bug fixes3. Provides flexibility and control over project workflows\nWhen working on larger projects with multiple features or bug fixes simultaneously.When you want to maintain a stable main branch while developing new features or resolving issues on separate branches.When collaborating with teammates on different aspects of a project and later integrating their changes.\nWhen working on small projects with a single developer or limited codebase.When the project scope is simple and doesn’t require extensive branch management.When there is no need to isolate features or bug fixes.\n\n\nCode Review Practices\n1. Enhances code quality and correctness through feedback2. Promotes knowledge sharing and learning within the team3. Helps identify bugs, improve performance, and ensure adherence to coding standards\nWhen collaborating on a codebase with team members to ensure code quality and maintain best practices.When you want to receive feedback and suggestions on your code to improve its readability, efficiency, or functionality.When working on critical or complex code that requires an extra layer of scrutiny before merging it into the main branch.\nWhen working on personal projects or small codebases with no collaboration involved.When time constraints or project size make it impractical to conduct code reviews.When the codebase is less critical or has low complexity.\n\n\nForking\n1. Enables independent experimentation and development2. Provides a way to contribute to a project without direct access3. Allows for creating separate, standalone copies of a repository\nWhen you want to contribute to a project without having direct write access to the original repository.When you want to work on an independent variation or extension of an existing project.When experimenting with changes or modifications to a project while keeping the original repository intact.\nWhen collaborating on a project with direct write access to the original repository.When the project does not allow external contributions or forking.When the project size or complexity doesn’t justify the need for independent variations.\n\n\nPull Requests\n1. Facilitates code review and discussion2. Allows for collaboration and feedback from team members3. Enables better organization and tracking of proposed changes\nWhen working on a shared repository with a team and wanting to contribute changes in a controlled and collaborative manner.When you want to propose changes to a project managed by others and seek review and approval before merging them into the main codebase.\nWhen working on personal projects or individual coding tasks without the need for collaboration.When immediate changes or fixes are required without review processes.When working on projects with a small team or single developer with direct write access to the repository.\n\n\n\nThe “When Not to Use” column provides insights into situations where it may be less appropriate / unnecessary to use each collaboration technique, helping you make informed decisions based on the specific context and requirements of your project.\nThese techniques provide different benefits and are used in various collaboration scenarios, depending on the project’s needs and team dynamics.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Collaborating with Git and GitHub</span>"
    ]
  },
  {
    "objectID": "session_11.html#merge-conflicts",
    "href": "session_11.html#merge-conflicts",
    "title": "11  Collaborating with Git and GitHub",
    "section": "11.5 Merge conflicts",
    "text": "11.5 Merge conflicts\nMerge conflicts occur when both collaborators make conflicting changes to the same file. Resolving merge conflicts involves identifying the root of the problem and restoring the project to a normal state. Good communication, discussing file sections to work on, and avoiding overlaps can help prevent merge conflicts. However, if conflicts do arise, Git warns about potential issues and ensures that changes from different collaborators based on the same file version are not overwritten. To resolve conflicts, you need to explicitly specify whose changes should be used for each conflicting line in the file.\nIn this image, we see collaborators mbjones and metamattj have both made changes to the same line in the same README.md file. This is causing a merge conflict because Git doesn’t know whose changes came first. To resolve it, we need to tell Git whose changes to keep for that line, and whose changes to discard.\n\n\n11.5.1 Common ways to resolve a merge conflict\n1. Abort, abort, abort…\nSometimes you just made a mistake. When you get a merge conflict, the repository is placed in a “Merging” state until you resolve it. There’s a Terminal command to abort doing the merge altogether:\n\ngit merge --abort\n\nOf course, after doing that you still haven’t synced with your Collaborator’s changes, so things are still unresolved. But at least your repository is now usable on your local machine.\n2. Checkout\nThe simplest way to resolve a conflict, given that you know whose version of the file you want to keep, is to use the command line to tell Git to use either your changes (the person doing the merge), or their changes (the Collaborator).\n\nkeep your Collaborator’s file: git checkout --theirs conflicted_file.Rmd\nkeep your own file: git checkout --ours conflicted_file.Rmd\n\nOnce you have run that command, then run add (staging), commit, pull, and push the changes as normal.\n3. Pull and edit the file\nOption 2, above, requires the command line, however, we have a third option for resolving the merge conflict from RStudio. Using this approach will allow us to pick and choose some of our changes and some of our Collaborator’s changes by letting us manually edit and fix the conflicted file.\nWhen you pull a file with a conflict, Git will provide you with a warning modify the file so that it includes both your own changes and your Collaborator’s changes. The file will also appear in the Git tab with an orange U icon, which indicates that the file is Unmerged and therefore awaiting your help to resolve the conflict. It delimits these blocks of conflicted code with a series of less than and greater than signs, so they are easy to find:\n\n\n\n\n\nIn the above example, &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD marks the start of your changes. The ======= delimiter separates your changes from your Collaborator’s conflicting changes. &gt;&gt;&gt;&gt;&gt;&gt;&gt; mark the end of your Collaborator’s changes.\nTo resolve the conflicts, simply find all of these blocks, and edit them so that the file looks how you want (either pick your lines, your Collaborator’s lines, some combination, or something altogether new), and save. Be sure you removed the delimiter lines that started with\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n=======\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n\nOnce you have made those changes, you simply add (staging), commit, and push the files to resolve the conflict.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Collaborating with Git and GitHub</span>"
    ]
  },
  {
    "objectID": "session_11.html#producing-and-resolving-merge-conflicts",
    "href": "session_11.html#producing-and-resolving-merge-conflicts",
    "title": "11  Collaborating with Git and GitHub",
    "section": "11.6 Producing and resolving merge conflicts",
    "text": "11.6 Producing and resolving merge conflicts\nTo illustrate this process, the instructors are going to carefully create a merge conflict step-by-step, show how to resolve it, and show how to see the results of the successful merge after it is complete. First, the instructors will walk through the exercise to demonstrate the issues. Then, participants will pair up and try the exercise.\n\nStep 1: Owner and Collaborator ensure that their local repos are synced with the remote repo\nPair with the same partner as in Exercise 1 and decide who will be the Owner and who will be the Collaborator. Begin the exercise by ensuring that both the Owner and Collaborator have all of the changes synced from the remote repo to their local repos. This includes doing a git pull to ensure that you have all changes locally, and ensuring that the Git tab in RStudio doesn’t show any changes that need to be committed.\n\n\nStep 2: Owner makes a change and commits locally\nFrom this clean slate, the Owner will first modify and commit a small change. The Owner should add their name on a specific line of the README.md file (we will change the title in line 1). Save and commit the change (but DO NOT push). The Owner should now have a local but unpushed commit that the Collaborator does not yet have access to.\n\n\nStep 3: Collaborator makes a change and commits on the same line\nNow, the Collaborator will modify and commit a small change. The Collaborator should add their name to the same line of the README.md file (we will again change the title in line 1). Save and commit the change (but DO NOT push). The Collaborator should now also have a local but unpushed commit that the Owner does not yet have access to.\nAt this point, both the Owner and Collaborator have committed local changes, but neither have tried to share their changes via GitHub.\n\n\nStep 4: Collaborator pushes the file to GitHub\nSharing starts when the Collaborator pushes their changes to the GitHub repo, which updates GitHub with their version of the file. The Owner is now one revision behind, but doesn’t know it yet.\n\n\nStep 5: Owner pushes their changes and gets an error\nAt this point, the Owner tries to push their change to the repository, which triggers an error from GitHub. While the error message is long, it tells you everything needed (that the Owner’s repository doesn’t reflect the changes on GitHub, and that they need to pull before they can push).\n\n\n\nStep 6: Owner pulls from GitHub to get Collaborator changes\nFollowing the error message, the Owner pulls the changes from GitHub, and gets another, different error message. Here, it indicates that there is a merge conflict because of the conflicting lines.\n\nIn the Git pane of RStudio, the file is also flagged with an orange U, which stands for an unresolved merge conflict.\n\n\n\nStep 7: Owner edits the file to resolve the conflict\nTo resolve the conflict, the Owner now needs to edit the file. Again, as indicated above, Git has flagged the locations in the file where a conflict occurred with &lt;&lt;&lt;&lt;&lt;&lt;&lt;, =======, and &gt;&gt;&gt;&gt;&gt;&gt;&gt;. The Owner should edit the file, merging whatever changes are appropriate until the conflicting lines read how they should, and eliminate all of the marker lines with &lt;&lt;&lt;&lt;&lt;&lt;&lt;, =======, and &gt;&gt;&gt;&gt;&gt;&gt;&gt;.\n\nOf course, for scripts and programs, resolving the changes means more than just merging the text – whoever is doing the merging should make sure that the code runs properly and that none of the logic of the program has been broken.\n\n\n\nStep 8: Owner commits the resolved changes\nFrom this point forward, things proceed as normal. The Owner first adds the file, which changes the orange U to a blue M for modified. Then, the Owner commits the changes locally. The Owner now has a resolved version of the file on their system.\n\n\n\nStep 9: Owner pushes the resolved changes to GitHub\nThe Owner can now push the changes, without error, to GitHub.\n\n\n\nStep 10: Collaborator pulls the resolved changes from GitHub\nFinally, the Collaborator can pull from GitHub to get the changes (which include the resolved conflicted lines of code) that the Owner made.\n\n\nStep 11: Both can view commit history\nBoth the Collaborator and the Owner can view the history, which includes information about the conflict, the associated branch, and the merged changes.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Collaborating with Git and GitHub</span>"
    ]
  },
  {
    "objectID": "session_11.html#exercise-2-with-a-partner-collaborate-in-a-repository-and-resolve-a-merge-conflict",
    "href": "session_11.html#exercise-2-with-a-partner-collaborate-in-a-repository-and-resolve-a-merge-conflict",
    "title": "11  Collaborating with Git and GitHub",
    "section": "11.7 Exercise 2: With a partner collaborate in a repository and resolve a merge conflict",
    "text": "11.7 Exercise 2: With a partner collaborate in a repository and resolve a merge conflict\nNote you will only need to complete the Setup and Git configuration steps again if you are working in a new repository. Return to Exercise 1 for Setup and Git configuration steps.\n\n\n\n\n\n\nInstructions\n\n\n\nNow it’s your turn. In pairs, intentionally create a merge conflict, and then go through the steps needed to resolve the issues and continue developing with the merged files. See the sections above for help with each of the steps below. You will do the exercise twice, where each person will get to practice being both the Owner and the Collaborator roles.\n\nStep 0: Designate one person as the Owner and one as the Collaborator.\n\nRound One:\n\nStep 1: Both Owner and Collaborator pull to ensure both have the most up-to-date changes\nStep 2: Owner edits the README file and makes a change to the title and commits do not push\nStep 3: On the same line, Collaborator edits the README file and makes a change to the title and commits\nStep 4: Collaborator pushes the file to GitHub\nStep 5: Owner pushes their changes and gets an error\nStep 6: Owner pulls from GitHub to get Collaborator changes\nStep 7: Owner edits the README file to resolve the conflict\nStep 8: Owner commits the resolved changes\nStep 9: Owner pushes the resolved changes to GitHub\nStep 10: Collaborator pulls the resolved changes from GitHub\nStep 11: Both view commit history\nStep 12: Go back to Step 0, switch roles, and then follow the steps in Round Two.\n\nRound Two:\n\nStep 1: Both Owner and Collaborator pull to ensure both have the most up-to-date changes\nStep 2: Owner edits the README file and makes a change to line 2 and commits do not push\nStep 3: On the same line, Collaborator edits the README file and makes a change to line 2 and commits\nStep 4: Collaborator pushes the file to GitHub\nStep 5: Owner pushes their changes and gets an error\nStep 6: Owner pulls from GitHub to get Collaborator changes\nStep 7: Owner edits the README file to resolve the conflict\nStep 8: Owner commits the resolved changes\nStep 9: Owner pushes the resolved changes to GitHub\nStep 10: Collaborator pulls the resolved changes from GitHub\nStep 11: Both view commit history",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Collaborating with Git and GitHub</span>"
    ]
  },
  {
    "objectID": "session_11.html#best-practices-to-avoid-merge-conflicts",
    "href": "session_11.html#best-practices-to-avoid-merge-conflicts",
    "title": "11  Collaborating with Git and GitHub",
    "section": "11.8 Best practices to avoid merge conflicts",
    "text": "11.8 Best practices to avoid merge conflicts\nSome basic rules of thumb can avoid the vast majority of merge conflicts, saving a lot of time and frustration. These are words our teams live by:\n\n\n\n\n\nXKCD 1597\n\n\n\nCommunicate often and set up effective communication channels\nTell each other what you are working on\nStart your working session with a pull\nPull immediately after you commit and before you push\nCommit often in small chunks (this helps you organize your work!)\nMake sure you and who you are collaborating with all fully understand the Git workflow you’re using (aka make sure you’re on the same page before you start)!\n\nA good workflow is encapsulated as follows:\nPull -&gt; Edit -&gt; Save -&gt; Add (stage) -&gt; Commit -&gt; Pull -&gt; (OPTIONAL) Fix any merge conflicts -&gt; Push\nIt may take a bit of practice to get comfortable with navigating merge conflicts, but like any other technical skill, they’ll become less intimidating with time. With careful communication and a consistent workflow, conflicts can be largely avoided or resolved when they do occur.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Collaborating with Git and GitHub</span>"
    ]
  },
  {
    "objectID": "session_12.html",
    "href": "session_12.html",
    "title": "12  Publishing to the Web",
    "section": "",
    "text": "Learning Objectives",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Publishing to the Web</span>"
    ]
  },
  {
    "objectID": "session_12.html#learning-objectives",
    "href": "session_12.html#learning-objectives",
    "title": "12  Publishing to the Web",
    "section": "",
    "text": "How to use Git, GitHub (+Pages), and Quarto to publish an analysis to the web",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Publishing to the Web</span>"
    ]
  },
  {
    "objectID": "session_12.html#introduction",
    "href": "session_12.html#introduction",
    "title": "12  Publishing to the Web",
    "section": "12.1 Introduction",
    "text": "12.1 Introduction\nSharing your work with others in engaging ways is an important part of the scientific process.\nSo far in this course, we’ve introduced a small set of powerful tools for doing open science:\n\nR and its many packages\nRStudio\nGit\nGitHub\nQuarto\n\nQuarto, in particular, is amazingly powerful for creating scientific reports but, so far, we haven’t tapped its full potential for sharing our work with others.\nIn this lesson, we’re going to take our training_{USERNAME} GitHub repository and turn it into a beautiful and easy to read web page using the tools listed above.\n\n\n\n\n\n\nSet up\n\n\n\n\nMake sure you are in training_{USERNAME} project\nAdd a new Quarto file at the top level called index.qmd\n\nGo to the RStudio menu File -&gt; New File -&gt; Quarto Document\nThis will bring up a dialog box. Add the title “GitHub Pages Example”, keep the Default Output Format as “HTML”, and then click “OK”\n\nSave the Quarto Document you just created. Use index.qmd as the file name\n\nBe sure to use the exact case (lower case “index”) as different operating systems handle case differently and it can interfere with loading your web page later\n\nPress “Render” and observe the rendered output\n\nNotice the new file in the same directory index.html\nThis is our Quarto file rendered as HTML (a web page)\n\nCommit your changes (for both index.qmd and index.html) with a commit message, and push to GitHub\n\nIf you have a folder called index_files, commit this as well. This folder contains the all the formatting and display settings for your html page.\n\nOpen your web browser to the github.com and navigate to the page for your training_{USERNAME} repository\nActivate GitHub Pages for the main branch\n\nGo to Settings -&gt; Pages (underneath the Code and Automation section)\nKeep the “Source” as “Deploy from a branch”\nUnder “Branch” you’ll see a message that says “GitHub Pages is currently disabled”. To change this, change the branch from “None” to main. Keep the folder as the root and then click “Save”\nYou should see the message change to “Your GitHub Pages site is currently being built from the main branch”\n\n\nNote: index.qmd represents the default file for a web site, and is returned whenever you visit the web site but doesn’t specify an explicit file to be returned.\n\n\nNow, the rendered website version of your repo will show up at a special URL.\nGitHub Pages follows a convention like this:\n\nNote that it changes from github.com to github.io\n\nGo to https://{username}.github.io/{repo_name}/ (Note the trailing /)\nObserve the awesome rendered output\n\nNow that we’ve successfully published a web page from an Quarto Document, let’s make a change to our Quarto Document and follow the steps to publish the change on the web:\n\n\n\n\n\n\nUpdate content in your published page\n\n\n\n\nGo back to your index.qmd\nDelete all the content, except the YAML frontmatter\nType “Hello world”\nRender index.qmd\nUse Git workflow: Stage (add) -&gt; Commit -&gt; Pull -&gt; Push\nGo back to https://{username}.github.io/{repo_name}/\n\n\n\nNext, we will show how you can link different qmd’s rendered into html so you can easily share different parts of your work.\n\n\n\n\n\n\nExercise\n\n\n\nIn this exercise, you’ll create a table of contents with the lessons of this course on the main page, and link some of the files we have work on so far.\n\nGo back to the RStudio server and to your index.qmd file\nCreate a table of contents with the names of the main technical lessons of this course, like so:\n\n## Course Lessons\n\n- Introduction to Literate Analysis Using Quarto \n- Cleaning and Wrangling data\n- Data Visualization\n- Functions and packages\n\n## Course Practice Session\n\n- Practice I\n- Practice II\n- Practice III\n\n\nMake sure you have the html versions of your intro-to-qmd.qmd and data-cleaning.qmd files. If you only see the qmd version, you need to “Render” your files first\nIn your index.qmd let’s add the links to the html files we want to show on our webpage. Do you remember the Markdown syntax to create a link?\n\n\n\nMarkdown syntax to create a link:\n\n\n[Text you want to hyperlink](link)\n\nExample: [Data wrangling and cleaning](data-wrangling-cleaning.html)\n\n\n\n\nRender index.qmd\nUse Git workflow: Stage (add) -&gt; Commit -&gt; Pull -&gt; Push\n\nNow when you visit your web site, you’ll see the table of contents, and can navigate to the others file you linked.\n\n\nQuarto web pages are a great way to share work in progress with your colleagues. Here we showed an example with the materials we have created in this course. However, you can use these same steps to share the different files and progress of a project you’ve been working on. To do so simply requires thinking through your presentation so that it highlights the workflow to be reviewed. You can include multiple pages and build a simple web site and make your work accessible to people who aren’t set up to open your project in R. Your site could look something like this:",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Publishing to the Web</span>"
    ]
  },
  {
    "objectID": "session_13.html",
    "href": "session_13.html",
    "title": "13  Data Visualization",
    "section": "",
    "text": "Learning Objectives",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "session_13.html#learning-objectives",
    "href": "session_13.html#learning-objectives",
    "title": "13  Data Visualization",
    "section": "",
    "text": "Understand the fundamentals of how the ggplot2 package works\nUse ggplot2’s theme and other customization functions create publication-grade graphics\nIntroduce the leaflet and DT package to create interactive maps and tables respectively",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "session_13.html#overview",
    "href": "session_13.html#overview",
    "title": "13  Data Visualization",
    "section": "13.1 Overview",
    "text": "13.1 Overview\nggplot2 is a popular package for visualizing data in R. From the home page:\n\nggplot2 is a system for declaratively creating graphics, based on The Grammar of Graphics. You provide the data, tell ggplot2 how to map variables to aesthetics, what graphical primitives to use, and it takes care of the details.\n\nIt’s been around for years and has pretty good documentation and tons of example code around the web (like on StackOverflow). The goal of this lesson is to explain the fundamentals of how ggplot2 work, introduce useful functions for customizing your plots and inspire you to go and explore this awesome resource for visualizing your data.\n\n\n\n\n\n\nggplot2 vs base graphics in R vs others\n\n\n\nThere are many different ways to plot your data in R. All of them work! However, ggplot2 excels at making complicated plots easy and easy plots simple enough\nBase R graphics (plot(), hist(), etc) can be helpful for simple, quick and dirty plots. ggplot2 can be used for almost everything else.\n\n\nLet’s dive into creating and customizing plots with ggplot2.\n\n\n\n\n\n\nSetup\n\n\n\n\nMake sure you’re in the right project (training_{USERNAME}) and use the Git workflow by Pulling to check for any changes. Then, create a new Quarto document, delete the default text, and save this document.\nLoad the packages we’ll need:\n\n\nlibrary(readr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(forcats) # makes working with factors easier\nlibrary(ggplot2)\nlibrary(leaflet) # interactive maps\nlibrary(DT) # interactive tables\nlibrary(scales) # scale functions for visualization\nlibrary(janitor) # expedite cleaning and exploring data\nlibrary(viridis) # colorblind friendly color palette\n\n\nLoad the data directly from the EDI Data Repository: Sacramento-San Joaquin Delta Socioecological Monitoring. Navigate to the link above, scroll down and under Resources, hover over the “Download” button for the “Socioecological monitoring data”, right click, and select “Copy Link Address”.\n\n\ndelta_visits_raw &lt;- read_csv(\"https://portal.edirepository.org/nis/dataviewer?packageid=edi.587.1&entityid=cda8c1384af0089b506d51ad8507641f\")\n\n\nLearn about the data. For this session we are going to be working with data on Socioecological Monitoring on the Sacramento-San Joaquin Delta. Check out the documentation.\nFinally, let’s explore the data we just read into our working environment.\n\n\n## Check out column names\n\ncolnames(delta_visits_raw)\n\n## Peak at each column and class\nglimpse(delta_visits_raw)\n\n## From when to when\nrange(delta_visits_raw$Date)\n\n## Which time of day?\nunique(delta_visits_raw$Time_of_Day)",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "session_13.html#getting-the-data-ready",
    "href": "session_13.html#getting-the-data-ready",
    "title": "13  Data Visualization",
    "section": "13.2 Getting the data ready",
    "text": "13.2 Getting the data ready\nIt is more frequent than not, that we need to do some wrangling before we can plot our data the way we want to. After reading and exploring our data, we’ll put our data wrangling skills to practice to get our data in the desired format.\n\n\n\n\n\n\nSide note on clean column names\n\n\n\njanitor::clean_names() is an awesome function to transform all column names into the same format. The default format for this function is snake_case_format. We highly recommend having clear well formatted column names. It makes your life easier down the line.\nHow it works?\n\ndelta_visits &lt;- delta_visits_raw %&gt;% \n    janitor::clean_names()\n\nAnd that’s it! If we look to the column names of the object delta_visits we can see all the columns are in a lowercase, snake format.\n\ncolnames(delta_visits)\n\n [1] \"eco_restore_approximate_location\" \"reach\"                           \n [3] \"latitude\"                         \"longitude\"                       \n [5] \"date\"                             \"time_of_day\"                     \n [7] \"sm_boat\"                          \"med_boat\"                        \n [9] \"lrg_boat\"                         \"bank_angler\"                     \n[11] \"scientist\"                        \"cars\"                            \n[13] \"notes\"                           \n\n\n\n\nWith the tidy data principles in mind. Is this data tidy?\n\nEvery column is a variable.\nEvery row is an observation.\nEvery cell is a single value.\n\nggplot2 for the most part likes data input to be in a long format (aka “tidy”). So let go ahead and make this data frame long instead of wide. Do you remember the name of the function we can use?\nLet’s refresh our memory on how this function works by accessing the help page. Type ?pivot_long() in the console to see the documentation for this function.\n\nvisits_long &lt;- delta_visits %&gt;% \n    pivot_longer(cols = c(sm_boat, med_boat, lrg_boat, bank_angler, scientist, cars),\n                 names_to = \"visitor_type\",\n                 values_to = \"quantity\") %&gt;%\n    rename(restore_loc = eco_restore_approximate_location) %&gt;% \n    select(-notes)\n\n## Checking the outcome\nhead(visits_long)\n\n# A tibble: 6 × 8\n  restore_loc   reach     latitude longitude date       time_of_day visitor_type\n  &lt;chr&gt;         &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt; &lt;date&gt;     &lt;chr&gt;       &lt;chr&gt;       \n1 Decker Island Brannan …     38.1     -122. 2017-07-07 unknown     sm_boat     \n2 Decker Island Brannan …     38.1     -122. 2017-07-07 unknown     med_boat    \n3 Decker Island Brannan …     38.1     -122. 2017-07-07 unknown     lrg_boat    \n4 Decker Island Brannan …     38.1     -122. 2017-07-07 unknown     bank_angler \n5 Decker Island Brannan …     38.1     -122. 2017-07-07 unknown     scientist   \n6 Decker Island Brannan …     38.1     -122. 2017-07-07 unknown     cars        \n# ℹ 1 more variable: quantity &lt;dbl&gt;\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\nCalculate the daily visits by restore_loc, date, and visitor_type.\n\n\n\n\ndaily_visits_loc &lt;- visits_long %&gt;%\n    group_by(restore_loc, date, visitor_type) %&gt;% \n    summarise(daily_visits = sum(quantity))\n    \nhead(daily_visits_loc)\n\n# A tibble: 6 × 4\n# Groups:   restore_loc, date [1]\n  restore_loc   date       visitor_type daily_visits\n  &lt;chr&gt;         &lt;date&gt;     &lt;chr&gt;               &lt;dbl&gt;\n1 Decker Island 2017-07-07 bank_angler             4\n2 Decker Island 2017-07-07 cars                    0\n3 Decker Island 2017-07-07 lrg_boat                0\n4 Decker Island 2017-07-07 med_boat                6\n5 Decker Island 2017-07-07 scientist               0\n6 Decker Island 2017-07-07 sm_boat                 0\n\n\nThe chunk above uses some of the dplyr functions that we’ve used in the past. We use group_by() to indicate that we want to calculate our results for the unique combinations of type of visit, restoration location proximity, and day. We next use summarise() to calculate an daily visit value for each of these groups. Note we use the %in% operator to pipe in the result of one command as an argument to the next one.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "session_13.html#plotting-with-ggplot2",
    "href": "session_13.html#plotting-with-ggplot2",
    "title": "13  Data Visualization",
    "section": "13.3 Plotting with ggplot2",
    "text": "13.3 Plotting with ggplot2\n\n13.3.1 Essentials components\nFirst, we’ll cover some ggplot2 basics to create the foundation of our plot. Then, we’ll add on to make our great customized data visualization.\n\n\n\n\n\n\nThe basics\n\n\n\n\nIndicate we are using ggplot() (call the ggplot2::ggplot() function)\nWhat data do we want to plot? (data = my_data)\nWhat are the mapping aesthetics? What variables do we want to plot? (define usingaes() function)\nDefine the geometry of our plot. This specifies the type of plot we’re making (use geom_*() to indicate the type of plot e.g: point, bar, etc.)\n\nNote To add layers to our plot, for example, additional geometries/aesthetics and theme elements or any ggplot object we use +.\n\n\nNow, let’s plot total daily visits by restoration location. We will show this by creating the same plot in 3 slightly different ways. Each of the options below have the 4 essential pieces of a ggplot.\n\n## Option 1 - data and mapping called in the ggplot() function\nggplot(data = daily_visits_loc,\n       aes(x = restore_loc, y = daily_visits))+\n    geom_col()\n\n\n## Option 2 - data called in ggplot function; mapping called in geom\nggplot(data = daily_visits_loc) +\n    geom_col(aes(x = restore_loc, y = daily_visits))\n\n\n## Option 3 - data and mapping called in geom\nggplot() +\n    geom_col(data = daily_visits_loc,\n             aes(x = restore_loc, y = daily_visits))\n\nThey all will create the same plot:\n(Apologies for the crumble text on the x-axis, we will learn how to make this look better soon)\n\n\n\n\n\n\n\n\n\n\n\n13.3.2 Looking at different geoms_*\nHaving the basic structure with the essential components in mind, we can easily change the type of graph by updating the geom_*().\n\n\n\n\n\n\nggplot2 and the pipe operator\n\n\n\nJust like in dplyr and tidyr, we can also pipe a data.frame directly into the first argument of the ggplot function using the %&gt;% operator.\nThis can certainly be convenient, but use it carefully! Combining too many data-tidying or subsetting operations with your ggplot call can make your code more difficult to debug and understand.\n\n\nWe will use the pipe operator to pass into ggplot() a filtered version of daily_visits_loc, and make a plot with different geometries.\nBoxplot Note: These examples are to demonstrate case uses of wrangling function prior to plotting. They are not necessarily plotting best practices.\n\ndaily_visits_loc %&gt;%\n    separate(date, c(\"year\", \"month\", \"day\"), sep = \"-\") %&gt;%\n    filter(daily_visits &lt; 30,\n           visitor_type %in% c(\"sm_boat\", \"med_boat\", \"lrg_boat\")) %&gt;%\n    ggplot(aes(x = visitor_type, y = daily_visits)) +\n    geom_boxplot()\n\n\n\n\n\n\n\n\nViolin plot\n\ndaily_visits_loc %&gt;%\n    separate(date, c(\"year\", \"month\", \"day\"), sep = \"-\") %&gt;%\n    filter(daily_visits &lt; 30,\n           visitor_type %in% c(\"sm_boat\", \"med_boat\", \"lrg_boat\")) %&gt;%\n    ggplot(aes(x = visitor_type, y = daily_visits)) +\n    geom_violin()\n\n\n\n\n\n\n\n\nLine and point\n\ndaily_visits_loc %&gt;%\n    filter(restore_loc == \"Decker Island\",\n           visitor_type == \"med_boat\") %&gt;%\n    ggplot(aes(x = date, y = daily_visits)) +\n    geom_line() +\n    geom_point()\n\n\n\n\n\n\n\n\n\n\n13.3.3 Customizing our plot\nLet’s go back to our base bar graph. What if we want our bars to be blue instead of gray? You might think we could run this:\n\nggplot(data = daily_visits_loc,\n       aes(x = restore_loc, y = daily_visits,\n           fill = \"blue\"))+\n    geom_col()\n\n\n\n\n\n\n\n\nWhy did that happen?\nNotice that we tried to set the fill color of the plot inside the mapping aesthetic call. What we have done, behind the scenes, is create a column filled with the word “blue” in our data frame, and then mapped it to the fill aesthetic, which then chose the default fill color, salmon.\nWhat we really wanted to do was just change the color of the bars. If we want do do that, we can call the color option in the geom_col() function, outside of the mapping aesthetics function call.\n\nggplot(data = daily_visits_loc,\n       aes(x = restore_loc, y = daily_visits))+\n    geom_col(fill = \"blue\")\n\n\n\n\n\n\n\n\nWhat if we did want to map the color of the bars to a variable, such as visitor_type. ggplot() is really powerful because we can easily get this plot to visualize more aspects of our data.\n\nggplot(data = daily_visits_loc,\n       aes(x = restore_loc, y = daily_visits,\n           fill = visitor_type))+\n    geom_col()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKeep in mind\n\n\n\n\nIf you want to map a variable onto a graph aesthetic (e.g., point color should be based on a specific region), put it within aes().\nIf you want to update your plot base with a constant (e.g. “Make ALL the points BLUE”), you can add the information directly to the relevant geom_ layer.\n\n\n\n\n13.3.3.1 Setting ggplot themes\nWe have successfully plotted our data. But, this is clearly not a nice plot. Let’s work on making this plot look a bit nicer. We are going to:\n\nAdd a title, subtitle and adjust labels using labs()\nFlip the x and y axis to better read the graph using coord_flip()\nInclude a built in theme using theme_bw()\n\n\nggplot(data = daily_visits_loc,\n       aes(x = restore_loc, y = daily_visits,\n           fill = visitor_type))+\n    geom_col()+\n    labs(x = \"Restoration Location\",\n         y = \"Number of Visits\",\n         fill = \"Type of Visitor\",\n         title = \"Total Number of Visits to Delta Restoration Areas by visitor type\",\n         subtitle = \"Sum of all visits during July 2017 and March 2018\")+\n    coord_flip()+\n    theme_bw()\n\n\n\n\n\n\n\n\nYou can see that the theme_bw() function changed a lot of the aspects of our plot! The background is white, the grid is a different color, etc. There are lots of other built in themes like this that come with the ggplot2 package that help quickly set the look of the plot. Use the RStudio auto-complete theme_ &lt;TAB&gt; to view a list of theme functions.\n\n## Useful baseline themes are\ntheme_minimal()\ntheme_light()\ntheme_classic()\n\nThe built in theme functions (theme_*()) change the default settings for many elements that can also be changed individually using thetheme() function. The theme() function is a way to further fine-tune the look of your plot. This function takes MANY arguments (just have a look at ?theme). Luckily there are many great ggplot resources online so we don’t have to remember all of these, just Google “ggplot cheat sheet” and find one you like.\nLet’s look at an example of a theme() call, where we change the position of the legend from the right side to the bottom, and remove the ticks of our Locations axis.\n\nggplot(data = daily_visits_loc,\n       aes(x = restore_loc, y = daily_visits,\n           fill = visitor_type))+\n    geom_col()+\n    labs(x = \"Restoration Location\",\n         y = \"Number of Visits\",\n         fill = \"Type of Visitor\",\n         title = \"Total Number of Visits to Delta Restoration Areas by visitor type\",\n         subtitle = \"Sum of all visits during study period\")+\n    coord_flip()+\n    theme_bw()+\n    theme(legend.position = \"bottom\",\n          axis.ticks.y = element_blank()) ## note we mention y-axis here\n\n\n\n\n\n\n\n\nNote that the theme() call needs to come after any built-in themes like theme_bw() are used. Otherwise, theme_bw() will likely override any theme elements that you changed using theme().\nYou can also save the result of a series of theme() function calls to an object to use on multiple plots. This prevents needing to copy paste the same lines over and over again!\n\nmy_theme &lt;- theme_bw(base_size = 16) +\n    theme(legend.position = \"bottom\",\n          axis.ticks.y = element_blank())\n\nSo now our code will look like this:\n\nggplot(data = daily_visits_loc,\n       aes(x = restore_loc, y = daily_visits,\n           fill = visitor_type))+\n    geom_col()+\n    labs(x = \"Restoration Location\",\n         y = \"Number of Visits\",\n         fill = \"Type of Visitor\",\n         title = \"Total Number of Visits to Delta Restoration Areas by visitor type\",\n         subtitle = \"Sum of all visits during study period\")+\n    coord_flip()+\n    my_theme\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nWhat changes do you expect to see in your plot by adding the following line of code? Discuss with your neighbor and then try it out!\nscale_y_continuous(breaks = seq(0,120, 20))\n\n\n\n\nAnswer\nggplot(data = daily_visits_loc,\n       aes(x = restore_loc, y = daily_visits,\n           fill = visitor_type))+\n    geom_col()+\n    labs(x = \"Restoration Location\",\n         y = \"Number of Visits\",\n         fill = \"Type of Visitor\",\n         title = \"Total Number of Visits to Delta Restoration Areas by visitor type\",\n         subtitle = \"Sum of all visits during study period\")+\n    coord_flip()+\n    scale_y_continuous(breaks = seq(0,120, 20))+\n    my_theme\n\n\n\n\n\n\n\n\n\nFinally we are going to expand the bars all the way to the axis line. In other words, remove the gap between the bars and the vertical “x-axis” line.\n\nggplot(data = daily_visits_loc,\n       aes(x = restore_loc, y = daily_visits,\n           fill = visitor_type))+\n    geom_col()+\n    labs(x = \"Restoration Location\",\n         y = \"Number of Visits\",\n         fill = \"Type of Visitor\",\n         title = \"Total Number of Visits to Delta Restoration Areas by visitor type\",\n         subtitle = \"Sum of all visits during study period\")+\n    coord_flip()+\n    scale_y_continuous(breaks = seq(0,120, 20), expand = c(0,0))+\n    my_theme\n\n\n\n\n\n\n\n\n\n\n13.3.3.2 Reordering things\nggplot() loves putting things in alphabetical order. But more frequent than not, that’s not the order you actually want things to be plotted. One way to do this is to use the fct_reorder() function from the forcats package. forcats provides tools for working with categorical variables. In this case, we want to reorder our categorical variable of restore_loc based on the total number of visits.\nThe first thing we need to do is to add a column to our data with the total number of visits by location. This will be our “sorting” variable.\n\ndaily_visits_totals &lt;- daily_visits_loc %&gt;% \n    group_by(restore_loc) %&gt;%\n    mutate(n = sum(daily_visits)) %&gt;% \n    ungroup()\n\nhead(daily_visits_totals)\n\n# A tibble: 6 × 5\n  restore_loc   date       visitor_type daily_visits     n\n  &lt;chr&gt;         &lt;date&gt;     &lt;chr&gt;               &lt;dbl&gt; &lt;dbl&gt;\n1 Decker Island 2017-07-07 bank_angler             4    37\n2 Decker Island 2017-07-07 cars                    0    37\n3 Decker Island 2017-07-07 lrg_boat                0    37\n4 Decker Island 2017-07-07 med_boat                6    37\n5 Decker Island 2017-07-07 scientist               0    37\n6 Decker Island 2017-07-07 sm_boat                 0    37\n\n\nNext, we will run the code for our plot adding the fct_reorder() function.\n\nggplot(data = daily_visits_totals,\n       aes(x = fct_reorder(restore_loc, n), y = daily_visits,\n           fill = visitor_type))+\n    geom_col()+\n    labs(x = \"Restoration Location\",\n         y = \"Number of Visits\",\n         fill = \"Type of Visitor\",\n         title = \"Total Number of Visits to Delta Restoration Areas by visitor type\",\n         subtitle = \"Sum of all visits during study period\")+\n    coord_flip()+\n    scale_y_continuous(breaks = seq(0,120, 20), expand = c(0,0))+\n    my_theme\n\n\n\n\n\n\n\n\nWhat if you want to plot the other way around? In this case from least to greater? We add the desc() to the variable we are sorting by.\n\nggplot(data = daily_visits_totals,\n       aes(x = fct_reorder(restore_loc, desc(n)), y = daily_visits,\n           fill = visitor_type))+\n    geom_col()+\n    labs(x = \"Restoration Location\",\n         y = \"Number of Visits\",\n         fill = \"Type of Visitor\",\n         title = \"Total Number of Visits to Delta Restoration Areas by visitor type\",\n         subtitle = \"Sum of all visits during study period\")+\n    coord_flip()+\n    scale_y_continuous(breaks = seq(0,120, 20), expand = c(0,0))+\n    my_theme\n\n\n\n\n\n\n\n\n\n\n\n13.3.3.3 Colors\nThe last thing we will do to our plot is change the color. To do this we are going to use a function from the viridis package. This package provides different color palettes that are designed to improve graph readability for readers with common forms of color blindness and/or color vision deficiency. With viridis, there are multiple other color palette packages or color palettes out there that you can use to customize your graphs. We could spend a whole session talking about colors in R! For the purpose of this lesson we are just going to keep it brief and show one function of the viridis package that will make our plot colors look better.\n\nggplot(data = daily_visits_totals,\n       aes(x = fct_reorder(restore_loc, desc(n)), y = daily_visits,\n           fill = visitor_type))+\n    geom_col()+\n    scale_fill_viridis_d()+\n    labs(x = \"Restoration Location\",\n         y = \"Number of Visits\",\n         fill = \"Type of Visitor\",\n         title = \"Total Number of Visits to Delta Restoration Areas by visitor type\",\n         subtitle = \"Sum of all visits during study period\")+\n    coord_flip()+\n    scale_y_continuous(breaks = seq(0,120, 20), expand = c(0,0))+\n    my_theme\n\n\n\n\n\n\n\n\nThings to keep in mind when choosing a color palette are the number of variables you have and how many colors your palette has. And if you need a discrete or a continuous color palette. Find more information about colors in this R color cheatsheet.\n\n\n13.3.3.4 Saving plots\nSaving plots using ggplot is easy! The ggsave() function will save either the last plot you created, or any plot that you have saved to an object. You can specify what output format you want, size, resolution, etc. See ?ggsave() for documentation.\nFor example, if we want to save our current plot to an existing folder named “figures”, we can do this:\n\nggsave(\"figures/visit_restore_site_delta.jpg\", width = 12, height = 6, units = \"in\")\n\n\n\n13.3.3.5 Creating multiple plots\nAn easy way to plot another aspect of your data is using the function facet_wrap(). This function takes a mapping to a variable using the syntax ~{variable_name}. The ~ (tilde) is a model operator which tells facet_wrap() to model each unique value within variable_name to a facet in the plot.\nThe default behavior of facet wrap is to put all facets on the same x and y scale. You can use the scales argument to specify whether to allow different scales between facet plots (e.g scales = \"free_y\" to free the y axis scale). You can also specify the number of columns using the ncol = argument or number of rows using nrow =.\n\nfacet_plot &lt;- ggplot(data = daily_visits_totals,\n       aes(x = visitor_type, y = daily_visits,\n           fill = visitor_type))+\n    geom_col()+\n    facet_wrap(~restore_loc,\n               scales = \"free_y\",\n               ncol = 5,\n               nrow = 2)+\n    scale_fill_viridis_d()+\n    labs(x = \"Type of visitor\",\n         y = \"Number of Visits\",\n         title = \"Total Number of Visits to Delta Restoration Areas\",\n         subtitle = \"Sum of all visits during study period\")+\n    theme_bw()+\n    theme(legend.position = \"bottom\",\n          axis.ticks.x = element_blank(),\n          axis.text.x = element_blank())\n\nfacet_plot\n\n\n\n\n\n\n\n\nWe can save this plot to our figures folder too. Note that this time we are specifically mentioning the object we want to save.\n\nggsave(\"figures/visit_restore_site_facet.jpg\", facet_plot, width = 12, height = 8, units = \"in\")",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "session_13.html#interactive-visualization",
    "href": "session_13.html#interactive-visualization",
    "title": "13  Data Visualization",
    "section": "13.4 Interactive visualization",
    "text": "13.4 Interactive visualization\n\n13.4.1 Tables with DT\nNow that we know how to make great static visualizations, let’s introduce two other packages that allow us to display our data in interactive ways. These packages really shine when used with GitHub Pages, so at the end of this lesson we will publish our figures to the website we created earlier.\nFirst let’s show an interactive table of unique sampling locations using DT. We will start by creating a data.frame containing unique sampling locations.\n\nlocations &lt;- visits_long %&gt;%\n    distinct(restore_loc, .keep_all = T) %&gt;%\n    select(restore_loc, latitude, longitude)\n\nhead(locations)\n\n# A tibble: 6 × 3\n  restore_loc     latitude longitude\n  &lt;chr&gt;              &lt;dbl&gt;     &lt;dbl&gt;\n1 Decker Island       38.1     -122.\n2 SW Suisun Marsh     38.2     -122.\n3 Grizzly Bay         38.1     -122.\n4 Prospect            38.2     -122.\n5 SJ River            38.1     -122.\n6 Wildlands           38.3     -122.\n\n\nThe dplyr::distinct() function comes pretty handy when you want to filter unique values in a column. In this case we use the .keep_all = T argument to keep all the columns of our data frame so we can have the latitude and longitude of each of the locations. If we don’t add this argument, we would end up with a data frame with only one column: restore_loc and 10 rows, one for each of the unique locations.\nNow we can display this table as an interactive table using datatable() from the DT package.\n\ndatatable(locations)\n\n\n\n\n\n\n\n13.4.2 Maps with leaflet\nThe leaflet() package allows you to make basic interactive maps using just a couple lines of code. Note that unlike ggplot2, the leaflet package uses pipe operators (%&gt;%) and not the additive operator (+).\nThe addTiles() function without arguments will add base tiles to your map from OpenStreetMap. addMarkers() will add a marker at each location specified by the latitude and longitude arguments. Note that the ~ symbol is used here to model the coordinates to the map (similar to facet_wrap() in ggplot).\n\nleaflet(locations) %&gt;%\n    addTiles() %&gt;%\n    addMarkers(\n        lng = ~ longitude,\n        lat = ~ latitude,\n        popup = ~ restore_loc\n    )\n\n\n\n\n\n\nYou can also use leaflet to import Web Map Service (WMS) tiles. For example, we can use any of the base maps provided by USGS in the National Map archive. For example, let’s use the USGSTopo base map. In this example, we also demonstrate how to create a more simple circle marker, the look of which is explicitly set using a series of style-related arguments.\n\nleaflet(locations) %&gt;%\n    addWMSTiles(\n        \"https://basemap.nationalmap.gov/arcgis/services/USGSTopo/MapServer/WmsServer\",\n        layers = \"0\",\n        options = WMSTileOptions(format = \"image/png\", transparent = TRUE)) %&gt;%\n    addCircleMarkers(\n        lng = ~ longitude,\n        lat = ~ latitude,\n        popup = ~ restore_loc,\n        radius = 5,\n        # set fill properties\n        fillColor = \"salmon\",\n        fillOpacity = 1,\n        # set stroke properties\n        stroke = T,\n        weight = 0.5,\n        color = \"white\",\n        opacity = 1)\n\n\n\n\n\n\nWe can also layer base maps. In this case the USGSImageryTopo base map with the USGSHydroCached base map. Note that the url where the map is retrieved is very similar for each USGS base map.\n\nleaflet(locations) %&gt;%\n    addWMSTiles(\n        \"https://basemap.nationalmap.gov/arcgis/services/USGSImageryTopo/MapServer/WmsServer\",\n        layers = \"0\",\n        options = WMSTileOptions(format = \"image/png\", transparent = TRUE)) %&gt;%\n    addWMSTiles(\n        \"https://basemap.nationalmap.gov/arcgis/services/USGSHydroCached/MapServer/WmsServer\",\n        layers = \"0\",\n        options = WMSTileOptions(format = \"image/png\", transparent = TRUE)) %&gt;%\n    addCircleMarkers(\n        lng = ~ longitude,\n        lat = ~ latitude,\n        popup = ~ restore_loc,\n        radius = 5,\n        # set fill properties\n        fillColor = \"salmon\",\n        fillOpacity = 1,\n        # set stroke properties\n        stroke = T,\n        weight = 0.5,\n        color = \"white\",\n        opacity = 1)\n\n\n\n\n\n\nLeaflet has a ton of functionality that can enable you to create some beautiful, functional maps with relative ease. Here is an example of some we created as part of the State of Alaskan Salmon and People (SASAP) project, created using the same tools we showed you here. This map hopefully gives you an idea of how powerful the combination of Quarto or RMarkdown and GitHub Pages can be.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "session_13.html#publish-the-data-visualization-lesson-to-your-webpage",
    "href": "session_13.html#publish-the-data-visualization-lesson-to-your-webpage",
    "title": "13  Data Visualization",
    "section": "13.5 Publish the Data Visualization lesson to your webpage",
    "text": "13.5 Publish the Data Visualization lesson to your webpage\n\n\n\n\n\n\nSteps\n\n\n\n\nSave the qmd you have been working on for this lesson.\n“Render” the qmd. This is a good way to test if everything in your code is working.\nGo to your index.qmd and the link to the html file with this lesson’s content.\nSave and render index.qmd to an html.\nUse the Git workflow: Stage &gt; Commit &gt; Pull &gt; Push",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "session_13.html#ggplot2-resources",
    "href": "session_13.html#ggplot2-resources",
    "title": "13  Data Visualization",
    "section": "13.6 ggplot2 Resources",
    "text": "13.6 ggplot2 Resources\n\nWhy not to use two axes, and what to use instead: The case against dual axis charts by Lisa Charlotte Rost.\nCustomized Data Visualization in ggplot2 by Allison Horst.\nA ggplot2 tutorial for beautiful plotting in R by Cedric Scherer.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "session_14.html",
    "href": "session_14.html",
    "title": "14  Practice Session II",
    "section": "",
    "text": "Learning Objectives",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Practice Session II</span>"
    ]
  },
  {
    "objectID": "session_14.html#learning-objectives",
    "href": "session_14.html#learning-objectives",
    "title": "14  Practice Session II",
    "section": "",
    "text": "Practice using common cleaning and wrangling functions\nPractice creating plots using common visualization functions in ggplot\nPractice saving and sharing data visualizations\nPractice Git and GitHub workflow and collaborating with a collegue\n\n\n\n\n\n\n\nAcknowledgements\n\n\n\nThese exercises are adapted from Allison Horst’s EDS 221: Scientific Programming Essentials Course for the Bren School’s Master of Environmental Data Science program.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Practice Session II</span>"
    ]
  },
  {
    "objectID": "session_14.html#about-the-data",
    "href": "session_14.html#about-the-data",
    "title": "14  Practice Session II",
    "section": "About the data",
    "text": "About the data\nThese exercises will be using data on abundance, size, and trap counts (fishing pressure) of California spiny lobster (Panulirus interruptus) and were collected along the mainland coast of the Santa Barbara Channel by Santa Barbara Coastal LTER researchers (LTER, Reed, and Miller 2022).",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Practice Session II</span>"
    ]
  },
  {
    "objectID": "session_14.html#exercise-collaborate-on-an-analysis-and-create-a-report-to-publish-using-github-pages",
    "href": "session_14.html#exercise-collaborate-on-an-analysis-and-create-a-report-to-publish-using-github-pages",
    "title": "14  Practice Session II",
    "section": "14.1 Exercise: Collaborate on an analysis and create a report to publish using GitHub Pages",
    "text": "14.1 Exercise: Collaborate on an analysis and create a report to publish using GitHub Pages\n\n\n\n\n\n\nSetup\n\n\n\n\nCreate a new repository with a partner\n\nDetermine who is the Owner and who is the Collaborator\nThe Owner creates a repository on GitHub titled with both your names (i.e. If Angel and Camila were partners, and Angel is the Owner, she would create a repo called angel-camila)\n\nWhen creating the repository, add a brief description (i.e. R Practice Session: Collaborating on, Wrangling & Visualizing Data), keep the repo Public, and Initialize the repo with a README file and an R .gitignore template.\n\nThe Owner adds the Collaborator to the repo\nBoth the Collaborator and the Owner clone the repo into their RStudio\nBoth the Collaborator and the Owner run git config pull.rebase false in the Terminal to set the Git default strategy for Pulling\n\n\nStep 2 and Step 3 are meant to be completed at the same time. Step 2 is for the Collaborator to complete, and Step 3 is for the Owner to complete.\n\nCollaborator creates new files for exercise\n\nThe Collaborator creates the following directory:\n\nanalysis\n\nAfter creating the directories, create the following Quarto Documents and store them in the listed folders:\n\nTitle it: “Owner Analysis”, save it as: owner-analysis.qmd, and store in analysis folder\nTitle it: “Collaborator Analysis”, save it as: collaborator-analysis.qmd, and store in analysis folder\nTitle it: “Lobster Report” and save it as: lobster-report.qmd (do not need to put in a folder)\n\nAfter creating the files, the Collaborator will stage (add), commit, write a commit message, pull, and push the files to the remote repository (on GitHub)\nThe Owner pulls the changes and Quarto Documents into their local repository (their workspace)\n\nOwner downloads data from the EDI Data Portal SBC LTER: Reef: Abundance, size and fishing effort for California Spiny Lobster (Panulirus interruptus), ongoing since 2012.\n\nCreate two new directories one called data and one called figs\n\nNote: Git does not track empty directories, so you won’t see figs when you push to GitHub\n\nDownload the following data and upload them to the data folder:\n\nTime-series of lobster abundance and size\nTime-series of lobster trap buoy counts\n\nAfter creating the data folder and adding the data, the Owner will stage (add), commit, write a commit message,pull, and push the files to the remote repository (on GitHub)\nThe Collaborator pulls the changes and data into their local repository (their workspace)\n\n\n\n\n\n14.1.1 Explore, clean and wrangle data\nFor this portion of the exercise, the Owner will be working with the lobster abundance and size data, and the Collaborator will be working with the lobster trap buoy counts data\nQuestions 1-3 you will be working independently since you’re working with different data frames, but you’re welcome to check in with each other.\n\nOwnerCollaborator\n\n\n\n\n\n\n\n\nSetup\n\n\n\n\nOpen the Quarto Document owner-analysis.qmd\n\nCheck the YAML and add your name to the author field\nCreate a new section with a level 2 header and title it “Exercise: Explore, Clean, and Wrangle Data”\n\nLoad the following libraries at the top of your Quarto Document\n\n\nlibrary(readr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(tidyr)\n\n\nRead in the data and store the data frame as lobster_abundance\n\n\nlobster_abundance &lt;- read_csv(\"data/Lobster_Abundance_All_Years_20220829.csv\")\n\n\nLook at your data. Take a minute to explore what your data structure looks like, what data types are in the data frame, or use a function to get a high-level summary of the data you’re working with.\nUse the Git workflow: Stage (add) -&gt; Commit -&gt; Pull -&gt; Push\n\nNote: You also want to Pull when you first open a project\n\n\n\n\n\n14.2 Convert missing values using mutate() and na_if()\n\n\n\n\n\n\nQuestion 1\n\n\n\nThe variable SIZE_MM uses -99999 as the code for missing values (see metadata or use unique()). This has the potential to cause conflicts with our analyses, so let’s convert -99999 to an NA value. Do this using mutate() and na_if(). Look up the help page to see how to use na_if(). Check your output data using unique().\n\n\n\nlobster_abundance &lt;- lobster_abundance %&gt;% \n    mutate(SIZE_MM = na_if(SIZE_MM, -99999))\n\n\n\n14.3 filter() practice\n\n\n\n\n\n\nQuestion 2\n\n\n\nCreate and store a subset that does NOT include observations from Naples Reef (NAPL). Check your output data frame to ensure that NAPL is NOT in the data frame.\n\n\n\nnot_napl &lt;- lobster_abundance %&gt;% \n    filter(SITE != \"NAPL\")\n\n\n\n\n\n\n\nQuestion 3\n\n\n\nCreate and store a subset with lobsters at Arroyo Quemado (AQUE) AND with a carapace length greater than 70 mm. Check your output.\n\n\n\naque_70mm &lt;- lobster_abundance %&gt;% \n    filter(SITE == \"AQUE\" & SIZE_MM &gt;= 70)\n\n\n\n\n\n\n\nSave your work and use Git\n\n\n\nDon’t forget the Git workflow! After you’ve completed the exercises or reached a significant stopping point, use the workflow: Stage (add) -&gt; Commit -&gt; Pull -&gt; Push\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSetup\n\n\n\n\nOpen the Quarto Document collaborator-analysis.qmd\n\nCheck the YAML and add your name to the author field\nCreate a new section with a level 2 header and title it “Exercise: Explore, Clean, and Wrangle Data”\n\nLoad the following libraries at the top of your Quarto Document.\n\n\nlibrary(readr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(tidyr)\n\n\nRead in the data and store the data frame as lobster_traps\n\n\nlobster_traps &lt;- read_csv(\"data/Lobster_Trap_Counts_All_Years_20210519.csv\")\n\n\nLook at your data. Take a minute to explore what your data structure looks like, what data types are in the data frame, or use a function to get a high-level summary of the data you’re working with.\nUse the Git workflow: Stage (add) -&gt; Commit -&gt; Pull -&gt; Push\n\nNote: You also want to Pull when you first open a project\n\n\n\n\n\n14.4 Convert missing values using mutate() and na_if()\n\n\n\n\n\n\nQuestion 1\n\n\n\nThe variable TRAPS uses -99999 as the code for missing values (see metadata or use unique()). This has the potential to cause conflicts with our analyses, so let’s convert -99999 to an NA value. Do this using mutate() and na_if(). Look up the help page to see how to use na_if(). Check your output data using unique().\n\n\n\nlobster_traps &lt;- lobster_traps %&gt;% \n    mutate(TRAPS = na_if(TRAPS, -99999))\n\n\n\n14.5 filter() practice\n\n\n\n\n\n\nQuestion 2\n\n\n\nCreate and store a subset that does NOT include observations from Naples Reef (NAPL). Check your output data frame to ensure that NAPL is NOT in the data frame.\n\n\n\nnot_napl &lt;- lobster_traps %&gt;% \n    filter(SITE != \"NAPL\")\n\n\n\n\n\n\n\nQuestion 3\n\n\n\nCreate and store a subset with lobsters at Carpinteria Reef (CARP) AND number of commercial trap floats is greater than 20. Check your output.\n\n\n\ncarp_20_traps &lt;- lobster_traps %&gt;% \n    filter(SITE == \"CARP\" & TRAPS &gt; 20)\n\n\n\n\n\n\n\nSave your work and use Git\n\n\n\nDon’t forget the Git workflow! After you’ve completed the exercises or reached a significant stopping point, use the workflow: Stage (add) -&gt; Commit -&gt; Pull -&gt; Push\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n14.5.1 Create visually appealing and informative data visualization\n\nOwnerCollaborator\n\n\n\n\n\n\n\n\nSetup\n\n\n\n\nStay in the Quarto Document owner-analysis.qmd and create a new section with a level 2 header and title it “Exercise: Data Visualization”\n\nStructure of the data visualization exercises:\n\nQuestions 7-9 will have you create the necessary subsets to create the data visualizations, as well as the basic code to create a visualization.\nQuestion 10, return to the data visualization code you’ve written and add styling code to it. For this exercise, only add styling code to the visualization you want to include in the lobster-report.qmd (start with just one plot and if there’s time add styling code to another plot).\nLastly, save the final visualizations to the figs folder before collaborating on the lobster-report.qmd.\n\n\n\n\n\n\n\n\n\nQuestion 7\n\n\n\nCreate a multi-panel plot of lobster carapace length (SIZE_MM) using ggplot(), geom_histogram(), and facet_wrap(). Use the variable SITE in facet_wrap(). Use the object lobster_abundance.\n\n\n\nggplot(data = lobster_abundance, aes(x = SIZE_MM)) +\n    geom_histogram() +\n    facet_wrap(~SITE)\n\n\n\nPlots\n\n\n\n\n\n\n\n\n\nQuestion 8\n\n\n\nCreate a line graph of the number of total lobsters observed (y-axis) by year (x-axis) in the study, grouped by SITE.\n\n\nFirst, you’ll need to create a new dataset subset called lobsters_summarize:\n\nGroup the data by SITE AND YEAR\nCalculate the total number of lobsters observed using count()\n\n\nlobsters_summarize &lt;- lobster_abundance %&gt;% \n  group_by(SITE, YEAR) %&gt;% \n  summarize(COUNT = n())\n\nNext, create a line graph using ggplot() and geom_line(). Use geom_point() to make the data points more distinct, but ultimately up to you if you want to use it or not. We also want SITE information on this graph, do this by specifying the variable in the color argument. Where should the color argument go? Inside or outside of aes()? Why or why not?\n\n# line plot\nggplot(data = lobsters_summarize, aes(x = YEAR, y = COUNT)) +\n  geom_line(aes(color = SITE)) \n\n# line and point plot\nggplot(data = lobsters_summarize, aes(x = YEAR, y = COUNT)) +\n  geom_point(aes(color = SITE)) +\n  geom_line(aes(color = SITE)) \n\n\n\nPlots\n\n\n\n\n\n\n\n\n\n\nLine plot\n\n\n\n\n\n\n\nLine and point plot\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion 9\n\n\n\n\nGo back to your visualization code and add some styling code (aka make your plots pretty!). Again, start with one plot and if there’s time add styling code to additional plots. Here’s a list of functions to help you get started (this is not an exhaustive list!) or revisit the data visualization lesson:\n\n\nlabs(): modifying axis, legend and plot labels\ntheme_(): add a complete theme to your plot (i.e. theme_light())\ntheme(): use to customize non-data components of a plot. We’ve listed out some parameters here, but run ?theme to see the full list (there’s a lot of customization you can do!)\n\naxis.title.y\npanel.background\nplot.background\npanel.grid.major.*\ntext\n\nscale_*_date(): use with dates and update breaks, limits, and labels\nscale_*_continuous(): use with continuous variables and update breaks, limits, and labels\nscale_*_discrete(): use with discrete variables and update breaks, limits, and labels\nscales package: use this within the above scale functions and you can do things like add percents to axes labels\ngeom_() within a geom function you can modify:\n\nfill: updates fill colors (e.g. column, density, violin, & boxplot interior fill color)\ncolor: updates point & border line colors (generally)\nshape: update point style\nalpha: update transparency (0 = transparent, 1 = opaque)\nsize: point size or line width\nlinetype: update the line type (e.g. “dotted”, “dashed”, “dotdash”, etc.)\n\n\n\nOnce you’re happy with how your plot looks, assign it to an object, and save it to the figs directory using ggsave()\n\n\n\n\n\n\n\n\n\nSave your work and use Git\n\n\n\nDon’t forget the Git workflow! After you’ve completed the exercises or reached a significant stopping point, use the workflow: Stage (add) -&gt; Commit -&gt; Pull -&gt; Push\n\n\n\n\n\n\n\n\n\n\nSetup\n\n\n\n\nStay in the Quarto Document collaborator-analysis.qmd and create a new section with a level 2 header and title it “Exercise: Data Visualization”\n\nStructure of the data visualization exercises:\n\nQuestions 7-9 will have you create the necessary subsets to create the data visualizations, as well as the basic code to create a visualization.\nQuestion 10, return to the data visualization code you’ve written and add styling code to it. For this exercise, only add styling code to the visualization you want to include in the lobster-report.qmd (start with just one plot and if there’s time add styling code to another plot).\nLastly, save the final visualizations to the figs folder before collaborating on the lobster-report.qmd.\n\n\n\n\n\n\n\n\n\nQuestion 7\n\n\n\nCreate a multi-panel plot of lobster commercial traps (TRAPS) grouped by year, using ggplot(), geom_histogram(), and facet_wrap(). Use the variable YEAR in facet_wrap(). Use the object lobster_traps.\n\n\n\nggplot(data = lobster_traps, aes(x = TRAPS)) +\n    geom_histogram() +\n    facet_wrap( ~ YEAR)\n\n\n\nPlots\n\n\n\n\n\n\n\n\n\nQuestion 8\n\n\n\nCreate a line graph of the number of total lobster commercial traps observed (y-axis) by year (x-axis) in the study, grouped by SITE.\n\n\nFirst, you’ll need to create a new dataset subset called lobsters_traps_summarize:\n\nGroup the data by SITE AND YEAR\nCalculate the total number of lobster commercial traps observed using sum(). Look up sum() if you need to. Call the new column TOTAL_TRAPS. Don’t forget about NAs here!\n\n\nlobsters_traps_summarize &lt;- lobster_traps %&gt;% \n  group_by(SITE, YEAR) %&gt;% \n  summarize(TOTAL_TRAPS = sum(TRAPS, na.rm = TRUE))\n\nNext, create a line graph using ggplot() and geom_line(). Use geom_point() to make the data points more distinct, but ultimately up to you if you want to use it or not. We also want SITE information on this graph, do this by specifying the variable in the color argument. Where should the color argument go? Inside or outside of aes()? Why or why not?\n\n# line plot\nggplot(data = lobsters_traps_summarize, aes(x = YEAR, y = TOTAL_TRAPS)) +\n    geom_line(aes(color = SITE))\n\n# line and point plot\nggplot(data = lobsters_traps_summarize, aes(x = YEAR, y = TOTAL_TRAPS)) +\n    geom_point(aes(color = SITE)) +\n    geom_line(aes(color = SITE))\n\n\n\nPlots\n\n\n\n\n\n\n\n\n\n\nLine plot\n\n\n\n\n\n\n\nLine and point plot\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion 9\n\n\n\nCreate a bar graph that shows the amount of high and low fishing pressure of lobster commercial traps at each SITE from 2019-2021. Note: The high and low fishing pressure metrics are completely made up and are not based on any known facts.\n\n\nFirst, you’ll need to create a new dataset subset called lobster_traps_fishing_pressure:\n\nfilter() for the years 2019, 2020, and 2021\nAdd a new column called FISHING_PRESSURE that contains the values “high” or “low”. A “high” fishing pressure has exactly or more than 8 traps, and a “low” fishing pressure has less than 8 traps. Use mutate() and if_else(). Check your output\nCalculate the number of “high” and “low” observations using group() and summarize(). Check your output\nRemove the NA values from the subsetted data. Hint: check out drop_na(). Check your output\n\n\nlobster_traps_fishing_pressure &lt;- lobster_traps %&gt;% \n    filter(YEAR %in% c(2019, 2020, 2021)) %&gt;%\n    mutate(FISHING_PRESSURE = if_else(TRAPS &gt;= 8, true = \"high\", false = \"low\")) %&gt;%\n    group_by(SITE, FISHING_PRESSURE) %&gt;%\n    summarize(COUNT = n()) %&gt;%\n    drop_na()\n\nNext, create a bar graph using ggplot() and geom_bar(). Note that geom_bar() automatically creates a stacked bar chart. Try using the argument position = \"dodge\" to make the bars side by side. Pick which bar position you like best.\n\n# bar plot\nggplot(data = lobster_traps_fishing_pressure, aes(x = SITE, y = COUNT, fill = FISHING_PRESSURE)) +\n    geom_col()\n\n# dodged bar plot\nggplot(data = lobster_traps_fishing_pressure, aes(x = SITE, y = COUNT, fill = FISHING_PRESSURE)) +\n    geom_col(position = \"dodge\")\n\n\n\nPlots\n\n\n\n\n\n\n\n\n\n\nBar plot\n\n\n\n\n\n\n\nDodged bar plot\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion 10\n\n\n\n\nGo back to your visualization code and add some styling code (aka make your plots pretty!). Again, start with one plot and if there’s time add styling code to additional plots. Here’s a list of functions to help you get started (this is not an exhaustive list!) or revisit the data visualization lesson:\n\n\nlabs(): modifying axis, legend and plot labels\ntheme_(): add a complete theme to your plot (i.e. theme_light())\ntheme(): use to customize non-data components of a plot. We’ve listed out some parameters here, but run ?theme to see the full list (there’s a lot of customization you can do!)\n\naxis.title.y\npanel.background\nplot.background\npanel.grid.major.*\ntext\n\nscale_*_date(): use with dates and update breaks, limits, and labels\nscale_*_continuous(): use with continuous variables and update breaks, limits, and labels\nscale_*_discrete(): use with discrete variables and update breaks, limits, and labels\nscales package: use this within the above scale functions and you can do things like add percents to axes labels\ngeom_() within a geom function you can modify:\n\nfill: updates fill colors (e.g. column, density, violin, & boxplot interior fill color)\ncolor: updates point & border line colors (generally)\nshape: update point style\nalpha: update transparency (0 = transparent, 1 = opaque)\nsize: point size or line width\nlinetype: update the line type (e.g. “dotted”, “dashed”, “dotdash”, etc.)\n\n\n\nOnce you’re happy with how your plot looks, assign it to an object, and save it to the figs directory using ggsave()\n\n\n\n\n\n\n\n\n\nSave your work and use Git\n\n\n\nDon’t forget the Git workflow! After you’ve completed the exercises or reached a significant stopping point, use the workflow: Stage (add) -&gt; Commit -&gt; Pull -&gt; Push\n\n\n\n\n\n\n\n14.5.2 Collaborate on a report and publish using GitHub pages\nThe final step! Time to work together again. Collaborate with your partner in lobster-report.qmd to create a report to publish to GitHub pages.\n\n\n\n\n\n\nCode Review\n\n\n\nAs you’re working on the lobster-report.qmd you will be conducting two types of code reviews: (1) pair programming and (2) lightweight code review.\n\nPair programming is where two people develop code together at the same workstation. One person is the “driver” and one person is the “navigator”. The driver writes the code while the navigator observes the code being typed, points out any immediate quick fixes, and will also Google / troubleshoot if errors occur. Both the Owner and the Collaborator should experience both roles, so switch halfway through or at a meaningful stopping point.\nA lightweight code review is brief and you will be giving feedback on code readability and code logic as you’re adding Owner and Collaborator code from their respective analysis.qmds to the lobster-report.qmd. Think of it as a walk through of your the code for the data visualizations you plan to include in the report (this includes the code you wrote to create the subset for the plot and the code to create the plot) and give quick feedback.\n\n\n\nMake sure your Quarto Document is well organized and includes the following elements:\n\ncitation of the data\nbrief summary of the abstract (i.e. 1-2 sentences) from the EDI Portal\nOwner analysis and visualizations (you choose which plots you want to include)\n\nadd alternative text to your plots\nplots can be added either with the data visualization code or with Markdown syntax - it’s up to you if you want to include the code or not.\n\nCollaborator analysis and visualizations (you choose which plots you want to include)\n\nadd alternative text to your plots\nplots can be added either with the data visualization code or with Markdown syntax - it’s up to you if you want to include the code or not.\n\n\nFinally, publish on GitHub pages (from Owner’s repository). Refer back to Chapter 11 for steps on how to publish using GitHub pages.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Practice Session II</span>"
    ]
  },
  {
    "objectID": "session_14.html#convert-missing-values-using-mutate-and-na_if",
    "href": "session_14.html#convert-missing-values-using-mutate-and-na_if",
    "title": "14  Practice Session II",
    "section": "14.2 Convert missing values using mutate() and na_if()",
    "text": "14.2 Convert missing values using mutate() and na_if()\n\n\n\n\n\n\nQuestion 1\n\n\n\nThe variable SIZE_MM uses -99999 as the code for missing values (see metadata or use unique()). This has the potential to cause conflicts with our analyses, so let’s convert -99999 to an NA value. Do this using mutate() and na_if(). Look up the help page to see how to use na_if(). Check your output data using unique().\n\n\n\nlobster_abundance &lt;- lobster_abundance %&gt;% \n    mutate(SIZE_MM = na_if(SIZE_MM, -99999))",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Practice Session II</span>"
    ]
  },
  {
    "objectID": "session_14.html#filter-practice",
    "href": "session_14.html#filter-practice",
    "title": "14  Practice Session II",
    "section": "14.3 filter() practice",
    "text": "14.3 filter() practice\n\n\n\n\n\n\nQuestion 2\n\n\n\nCreate and store a subset that does NOT include observations from Naples Reef (NAPL). Check your output data frame to ensure that NAPL is NOT in the data frame.\n\n\n\nnot_napl &lt;- lobster_abundance %&gt;% \n    filter(SITE != \"NAPL\")\n\n\n\n\n\n\n\nQuestion 3\n\n\n\nCreate and store a subset with lobsters at Arroyo Quemado (AQUE) AND with a carapace length greater than 70 mm. Check your output.\n\n\n\naque_70mm &lt;- lobster_abundance %&gt;% \n    filter(SITE == \"AQUE\" & SIZE_MM &gt;= 70)\n\n\n\n\n\n\n\nSave your work and use Git\n\n\n\nDon’t forget the Git workflow! After you’ve completed the exercises or reached a significant stopping point, use the workflow: Stage (add) -&gt; Commit -&gt; Pull -&gt; Push",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Practice Session II</span>"
    ]
  },
  {
    "objectID": "session_14.html#convert-missing-values-using-mutate-and-na_if-1",
    "href": "session_14.html#convert-missing-values-using-mutate-and-na_if-1",
    "title": "14  Practice Session II",
    "section": "14.4 Convert missing values using mutate() and na_if()",
    "text": "14.4 Convert missing values using mutate() and na_if()\n\n\n\n\n\n\nQuestion 1\n\n\n\nThe variable TRAPS uses -99999 as the code for missing values (see metadata or use unique()). This has the potential to cause conflicts with our analyses, so let’s convert -99999 to an NA value. Do this using mutate() and na_if(). Look up the help page to see how to use na_if(). Check your output data using unique().\n\n\n\nlobster_traps &lt;- lobster_traps %&gt;% \n    mutate(TRAPS = na_if(TRAPS, -99999))",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Practice Session II</span>"
    ]
  },
  {
    "objectID": "session_14.html#filter-practice-1",
    "href": "session_14.html#filter-practice-1",
    "title": "14  Practice Session II",
    "section": "14.5 filter() practice",
    "text": "14.5 filter() practice\n\n\n\n\n\n\nQuestion 2\n\n\n\nCreate and store a subset that does NOT include observations from Naples Reef (NAPL). Check your output data frame to ensure that NAPL is NOT in the data frame.\n\n\n\nnot_napl &lt;- lobster_traps %&gt;% \n    filter(SITE != \"NAPL\")\n\n\n\n\n\n\n\nQuestion 3\n\n\n\nCreate and store a subset with lobsters at Carpinteria Reef (CARP) AND number of commercial trap floats is greater than 20. Check your output.\n\n\n\ncarp_20_traps &lt;- lobster_traps %&gt;% \n    filter(SITE == \"CARP\" & TRAPS &gt; 20)\n\n\n\n\n\n\n\nSave your work and use Git\n\n\n\nDon’t forget the Git workflow! After you’ve completed the exercises or reached a significant stopping point, use the workflow: Stage (add) -&gt; Commit -&gt; Pull -&gt; Push",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Practice Session II</span>"
    ]
  },
  {
    "objectID": "session_14.html#bonus-add-marine-protected-area-mpa-designation-to-the-data",
    "href": "session_14.html#bonus-add-marine-protected-area-mpa-designation-to-the-data",
    "title": "14  Practice Session II",
    "section": "14.6 Bonus: Add marine protected area (MPA) designation to the data",
    "text": "14.6 Bonus: Add marine protected area (MPA) designation to the data\nThe sites IVEE and NAPL are marine protected areas (MPAs). Add this designation to your data set using a new function called case_when(). Then create some new plots using this new variable. Does it change how you think about the data? What new plots or analysis can you do with this new variable?\n\nLobster Abundance & Size DataLobster Trap Buoy Counts Data\n\n\nUse the object lobster_abundance and add a new column called DESIGNATION that contains “MPA” if the site is IVEE or NAPL, and “not MPA” for all other values.\n\nlobster_mpa &lt;- lobster_abundance %&gt;% \n    mutate(DESIGNATION = case_when(\n    SITE %in% c(\"IVEE\", \"NAPL\") ~ \"MPA\",\n    SITE %in% c(\"AQUE\", \"CARP\", \"MOHK\") ~ \"not MPA\"\n  ))\n\n\n\nUse the object lobster_traps and add a new column called DESIGNATION that contains “MPA” if the site is IVEE or NAPL, and “not MPA” for all other values.\n\nlobster_traps_mpa &lt;- lobster_traps %&gt;%\n    mutate(DESIGNATION = case_when(\n    SITE %in% c(\"IVEE\", \"NAPL\") ~ \"MPA\",\n    SITE %in% c(\"AQUE\", \"CARP\", \"MOHK\") ~ \"not MPA\"\n  ))\n\n\n\n\n\n\n\n\nLTER, Santa Barbara Coastal, Daniel C Reed, and Robert J Miller. 2022. “SBC LTER: Reef: Abundance, Size and Fishing Effort for California Spiny Lobster (Panulirus Interruptus), Ongoing Since 2012.” Environmental Data Initiative. https://doi.org/10.6073/PASTA/25AA371650A671BAFAD64DD25A39EE18.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Practice Session II</span>"
    ]
  },
  {
    "objectID": "session_15.html",
    "href": "session_15.html",
    "title": "15  Data Management Essentials",
    "section": "",
    "text": "Learning Objectives",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Data Management Essentials</span>"
    ]
  },
  {
    "objectID": "session_15.html#learning-objectives",
    "href": "session_15.html#learning-objectives",
    "title": "15  Data Management Essentials",
    "section": "",
    "text": "Understand the importance of data management for successfully preserving data\nReview the Data Life Cycle and how it can guide the data management in a project\nFamiliarize with what goes into a data management plans\nLearn about metadata guidelines and best practices for reproducibility\nBecome familiar with environmental data repositories for accessing and publishing data",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Data Management Essentials</span>"
    ]
  },
  {
    "objectID": "session_15.html#the-big-idea",
    "href": "session_15.html#the-big-idea",
    "title": "15  Data Management Essentials",
    "section": "15.1 The Big Idea",
    "text": "15.1 The Big Idea\nThis lesson aims to get you thinking about how to manage your data for a research or synthesis project. And how to do it with the FAIR and CARE principles in mind. We introduce multiple concepts and provide resources that you can come back to when ever you start a new project or to apply these principles to a project you are currently working on.",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Data Management Essentials</span>"
    ]
  },
  {
    "objectID": "session_15.html#introduction-to-data-management",
    "href": "session_15.html#introduction-to-data-management",
    "title": "15  Data Management Essentials",
    "section": "15.2 Introduction to Data Management",
    "text": "15.2 Introduction to Data Management\nData management is the process of handling, organizing, documenting, and preserving data used in a research project. This is particularly important in synthesis science given the nature of synthesis, which involves combining data and information from multiple sources to answer broader questions, generate knowledge and provide insights into a particular problem or phenomenon.\n\n15.2.1 Benefits of managing your data\nSuccessfully managing your data throughout a research project helps ensures its preservation for future use. It also facilitates collaboration within your team, and it helps advance your scientific outcomes.\nFrom a researcher perspective\n\nKeep yourself organized – be able to find your files (data inputs, analytic scripts, outputs at various stages of the analytic process, etc.)\nTrack your science processes for reproducibility – be able to match up your outputs with exact inputs and transformations that produced them\nBetter control versions of data – easily identify versions that can be periodically purged\nQuality control your data more efficiently\nTo avoid data loss (e.g. making backups)\nFormat your data for re-use (by yourself or others)\nBe prepared to document your data for your own recollection, accountability, and re-use (by yourself or others)\nGain credibility and recognition for your science efforts through data sharing!\n\nAdvancement of science\n\nData is a valuable asset – it is expensive and time consuming to collect\nMaximize the effective use and value of data and information assets\nContinually improve the quality including: data accuracy, integrity, integration, timeliness of data capture and presentation, relevance, and usefulness\nEnsure appropriate use of data and information\nFacilitate data sharing\nEnsure sustainability and accessibility in long term for re-use in science",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Data Management Essentials</span>"
    ]
  },
  {
    "objectID": "session_15.html#the-data-life-cycle",
    "href": "session_15.html#the-data-life-cycle",
    "title": "15  Data Management Essentials",
    "section": "15.3 The Data Life Cycle",
    "text": "15.3 The Data Life Cycle\nThe Data Life Cycle gives you an overview of meaningful steps data goes through in a research project, from planning to archival. This step-by-step breakdown facilitates overseeing individual actions, operations and processes required at each stage. This is a visual tool that aims o help scientists plan and anticipate what will be the “data needs” for a specific project (Faundeen et al 2013) .\n\n\n\nSource: Adapted from Faundeen et al 2013, USGS & DataONE\n\n\n\n\n15.3.1 Primary Elements\n\n\n\n\n\n\n\n\nStep\nDescription\nTool\n\n\n\n\nPlan\nMap out the processes and resources for all activities related to the handling of the project’s data assets. Start with the project goals (desired outputs, outcomes, and impacts) and work backwards to build a data management plan, supporting data policies, and sustainability plans for each step.\nData Management Plan (DPM)\n\n\nAcquire & Discover\nActivities needed to collect new or existing data. You can structure the process of collecting data upfront to better implement data management. Consider data policies and best practices that maintain the provenance and integrity of the data.\nIdentifying data sources and mechanisms to access data\n\n\nProcess\nEvery step needed to prepare new or existing data to be able to use it as an input for synthesis. Consider the structure of the data, unit transformation, extrapolations, etc\nCleaning & Wrangling data skills\n\n\nIntegrate\nData from multiple sources are combined into a form that can be readily analyzed. Successful data integration depends on documentation of the integration process, clearly citing and making accessible the data you are using, and employing good data management practices throughout the Data Life Cycle.\nModeling & Interpretation\n\n\nAnalyze\nCreate analyses and visualizations to identify patterns, test hypotheses, and illustrate findings. During this process, record your methods, document data processing steps, and ensure your data are reproducible. Learn about these best practices and more.\nModeling, Interpretation & Statistics\n\n\nPreserve\nPlan on how you are going to store your data for long-term use and accessibility so others can access, interpret, and use the data in the future. Decide what data to preserve, where to preserve it, and what documentation needs to accompany the data.\nData packages & repositories\n\n\nPublish and Share\nPublication and distribution of your data through the web or in data catalogs, social media or other venues to increase the chances of your data being discovered. Data is a research product as publications are.\nDOIs and citations\n\n\n\n\nAnd the cycle begins again.\n\n\n\n\nSource: DataONE Data Life Cycle\n\n\nThis wheel is powered by the cross-cutting elements involved across all stages of the cycle.\n\n\n15.3.2 Cross-Cutting Elements\nThese elements are involved across all stages describes above. They need to constantly by addressed throughout all the Data Life Cycle, making sure effective data management is in place.\n\n\n\n\n\n\n\n\nStep\nDescription\nTool\n\n\n\n\nDescribe\nDocument data and each of the data stages by describing the why, who, what, when, where, and how of the data and processes. Metadata, or data about data, is key to data sharing and reuse. Documentation such as software code comments, data models, and workflows facilitate indexing, acquiring, understanding, and future uses of the data\nMetadata and documentation\n\n\nManage Quality\nEmploy quality assurance and quality control procedures that enhance the quality of data, making sure the measurements or outputs within expected values.Identify potential errors and techniques to address them.\nQuality Control and Quality Assurance techniques\n\n\nBackup and Secure\nPlan to preserve data in the short term to minimize potential losses (e.g., via software failure, human error, natural disaster). This avoids risk and ensures data is accessible to collaborators. This applies to raw and process data, original science plan, data management plan, data acquisition strategy, processing procedures, versioning, analysis methods, published products, and associated metadata\nServers, secure data sharing services",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Data Management Essentials</span>"
    ]
  },
  {
    "objectID": "session_15.html#data-management-plans",
    "href": "session_15.html#data-management-plans",
    "title": "15  Data Management Essentials",
    "section": "15.4 Data Management Plans",
    "text": "15.4 Data Management Plans\nAs you can see there is a lot happening around the Data Life Cycle. This is why PLANNING is a key first step. It is advisable to initiate your data management planning at the beginning of your research process before any data has been collected or discovered.\nIn order to better plan and keep track of all the moving pieces when working with data, a good place to start is creating a Data Management Plan. However, this is not only the starting point. This is a “living” document that should be consulted and updated throughout the project.\nA Data Management Plan (DMP) is a document that describes how you will use your data during a research project, as well as what you will do with your data long after the project ends. DMPs should be updated as research plans change to ensure new data management practices are captured (Environmental Data Initiative).\nA well-thought-out plan means you are more likely to:\n\nstay organized\nwork efficiently\ntruly share data\nengage your team\nmeet funder requirements as DMPs are becoming common in the submission process for proposals\n\nA DMP is both a straightforward blueprint for how you manage your data, and provides guidelines for you and your team on policies, roles and responsibilities. While it is important to plan, it is equally important to recognize that no plan is perfect, as change is inevitable. To make your DMP as robust as possible, review it periodically with your team and adjust as the needs of the project change.\n\n\n\n\n\n\nHow to plan\n\n\n\n\nPlan early - information gets lost over time. Think about your data needs as you are starting your project.\nPlan in collaboration - engaging all the team makes your plan more resilient, including diverse expertise and perspectives.\nMake revision part of the process - adapt as needed, revising your plan helps you make sure your are on track.\nInclude a tidy data and data ethic lens. It is important to start thinking through these lenses during the planning process of your DMP, it will make it easier to include and maintain tidy and ethical principles throughout the entire project.\n\n\n\n\n15.4.1 Creating a Good Data management Plan\nThe article Ten Simple Rules for Creating a Good Data Management Plan (Michener (2015)) outlines big picture ideas to keep in mind when you start your “planning stage”. Here we summarize each point and provide useful resources or examples to help you achieve this “rules” and write an awesome DMP.\n\n15.4.1.1 Determine what are the organization and/or sponsor requirements\n\nGenerally, each organization or funding agency have specific expectations on how to manage and disseminate data. Even though a DMP is a good idea to keep you organize. It will save you significant time and effort by first understanding the specific requirements set by the organization you are working for. Each organization often provide templates on how to structure your DMP.\nResources\n\nThe DMPTool provides templates for different funding agencies plan requirements.\nUSGS has multiple resources on DMPs. Here the Data Policy and Guidance for the Climate Adaptation Science Centers\n\n\n\n\n15.4.1.2 Identify the desired/necessary data sets for the project\n\nData is the ultimate reason why we create a DMP. Identifying what data will be use is crucial to planning. Key aspects of the data to consider are:\n\nType (text, spatial, images, tabular, etc)\nSource (where does the data currently live?, is it proprietary data?)\nVolume (10 terabytes, 10 megabytes?)\nFormat (csv, xlsx, shapefiles, etc)\n\nResource\n\nHere is a template spreadsheet to collect all information about the data set you intent to use for your synthesis project. Please make a copy and adapt as needed.\n\n\n\n\n15.4.1.3 Define how the data will be organized\n\nOnce you know the data you will be using (rule #2) it is time to define how are you going to work with your data. Where will the raw data live? How are the different collaborators going to access the data? The needs vary widely from one project to another depending on the data. When drafting your DMP is helpful to focus on identifying what products and software you will be using. When collaborating with a team it is important to identify f there are any limitations to accessing any software or tool.\nResource\n\nHere is an example from the LTER Scientific Computing Support Team on working on NCEAS Server.\n\n\n\n\n15.4.1.4 Explain how the data will be documented\n\nWe know documenting data is very important. To successfully achieve this we need a plan in place. Three main steps to plan accordingly are:\n\nIdentifying the type of information you want/need to collect to document your data thoroughly\nDetermine if the is a metadata standard or schema (organized set of elements) you will follow (eg. EML, Dublin Core, ISO 19115, ect). In many cases this relates with what data repository you intend to archive your data.\nEstablish tools that can help you create and manage metadata content.\n\nResource\n\nExcel-to EML by Li Kui is a workflow that provides a spreadsheet template to collect metadata based on the Ecological Metadata Language Schema (EML)\nThe Environmental Data Repository (EDI) providees a tool called ezEML. A form-based web application that helps streamline the process of creating EML metadata.\n\n\n\n\n15.4.1.5 Describe how data quality will be assured\n\nQuality assurance and quality control (QA/QC) are the procedures taken to ensure data looks how we expect it to be. The ultimate goal is to improve the quality of the data products. Some fields of study, data types or funding organizations have specific set of guidelines for QA/QCing data. However, when writing your DMP it is important to describe what measures you plan to take to QA/QC the data (e.g: instrument calibration, verification tests, visualization approaches for error detection, etc.)\nResources\n\nEnvironmental Data Initiative (EDI) description and examples of Quality Assurance and Quality Control\n\n\n\n\n15.4.1.6 Have a data storage strategy (short and long term)\n\nPapers get lost, hardware disk crash, URLs break, different media format degrade. It’s inevitable! Plan ahead and think on where your data will live in the short and long-term to ensure the access and use of this data during and long after the project. It is important to have a backup mechanism in place during the project to avoid losing any information.\nResource\n\nRemote locations to store your data during your project are: institutional repositories or servers or commercial services such as Amazon, Dropbox, Google, Microsoft, Box, etc.\nLong-term storage: identify an appropriate and stable data repository for your research domain (See section 3.6 Data Preservation and Sharing)\n\n\n\n\n15.4.1.7 Define the project’s data policies\n\nMany organizations and institutions require to include an explicit policy statement about how data will be managed and shared. Including licensing or sharing arrangements and legal and ethical restrictions on access and use of human subject and other sensitive data. It is valuable to establish a shared agreement around handling of data when embarking on collaborative projects. Collaborative research brings together data from across research projects with different data management plans and can include publicly accessible data from repositories where no management plan is available. For these reasons, a discussion and agreement around the handling of data brought into and resulting from the collaboration is warranted, and management of this new data may benefit from going through a data management planning process.\nResource\n\nTemplate provided by the Arctic Data Center, including sections for individual data not in the public domain, individual data with public access, derived data resulting from the project.\n\n\n\n\n15.4.1.8 What data products will be made available and how?\n\nThis portion of the DMP tries to ensure that the data products of your project will be disseminated. This can be achieved by stating how, when and where these products will be available. We encourage open data practices, this means making data extensively available and with the least restrictions possible.\nExamples\n\nPublishing the data in an open repository or archive\nSubmitting the data (or subsets thereof) as appendices or supplements to journal articles\nPublishing the data, metadata, and relevant code as a “data paper”\n\n\n\n\n15.4.1.9 Assign roles and responsibilities\n\nIt is important to clearly determine the roles and responsibilities of each group member of the project. Roles may include data collection, data entry, QA/QC, metadata creation and management, backup, data preparation and submission to an archive, and systems administration.\n\n\n\n15.4.1.10 Prepare a realistic budget\n\nGenerally overlooked, but preparing a realistic budget it’s an important part when planning for your data management. Data management takes time and it may have cost associates to it for example access to software, hardware, and personnel. Make sure you plan considers budget to support people involved as well as software or data fees or other services as needed.",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Data Management Essentials</span>"
    ]
  },
  {
    "objectID": "session_15.html#metadata-best-practices",
    "href": "session_15.html#metadata-best-practices",
    "title": "15  Data Management Essentials",
    "section": "15.5 Metadata Best Practices",
    "text": "15.5 Metadata Best Practices\nWithin the data life cycle you can be collecting data (creating new data) or integrating data that has all ready been collected. Either way, metadata plays plays a major role to successfully spin around the cycle because it enables data reuse long after the original collection.\nImagine that you’re writing your metadata for a typical researcher (who might even be you!) 30+ years from now - what will they need to understand what’s inside your data files?\nThe goal is to have enough information for the researcher to understand the data, interpret the data, and then reuse the data in another study.\nHere we walk you through detail guidelines to keep track of have a well documented data.\n\n15.5.1 Overall Guidelines\nAnother way to think about metadata is to answer the following questions with the documentation:\n\nWhat was measured?\nWho measured it?\nWhen was it measured?\nWhere was it measured?\nHow was it measured?\nHow is the data structured?\nWhy was the data collected?\nWho should get credit for this data (researcher AND funding agency)?\nHow can this data be reused (licensing)?\n\n\n\n15.5.2 Bibliographic Guidelines\nThe details that will help your data be cited correctly are:\n\nGlobal identifier like a digital object identifier (DOI)\nDescriptive title that includes information about the topic, the geographic location, the dates, and if applicable, the scale of the data\nDescriptive abstract that serves as a brief overview off the specific contents and purpose of the data package\nFunding information like the award number and the sponsor\nPeople and organizations like the creator of the dataset (i.e. who should be cited), the person to contact about the dataset (if different than the creator), and the contributors to the dataset\n\n\n\n15.5.3 Discovery Guidelines\nThe details that will help your data be discovered correctly are:\n\nGeospatial coverage of the data, including the field and laboratory sampling locations, place names and precise coordinates\nTemporal coverage of the data, including when the measurements were made and what time period (ie the calendar time or the geologic time) the measurements apply to\nTaxonomic coverage of the data, including what species were measured and what taxonomy standards and procedures were followed\nAny other contextual information as needed\n\n\n\n15.5.4 Interpretation Guidelines\nThe details that will help your data be interpreted correctly are:\n\nCollection methods for both field and laboratory data the full experimental and project design as well as how the data in the dataset fits into the overall project\nProcessing methods for both field and laboratory samples\nAll sample quality control procedures\nProvenance information to support your analysis and modelling methods\nInformation about the hardware and software used to process your data, including the make, model, and version\nComputing quality control procedures like testing or code review\n\n\n\n15.5.5 Data Structure and Contents\n\nEverything needs a description: the data model, the data objects (like tables, images, matrices, spatial layers, etc), and the variables all need to be described so that there is no room for misinterpretation.\nVariable information includes the definition of a variable, a standardized unit of measurement, definitions of any coded values (i.e. 0 = not collected), and any missing values (i.e. 999 = NA).\n\nNot only is this information helpful to you and any other researcher in the future using your data, but it is also helpful to search engines. The semantics of your dataset are crucial to ensure your data is both discoverable by others and interoperable (that is, reusable).\nFor example, if you were to search for the character string “carbon dioxide flux” in a data repository, not all relevant results will be shown due to varying vocabulary conventions (i.e., “CO2 flux” instead of “carbon dioxide flux”) across disciplines — only datasets containing the exact words “carbon dioxide flux” are returned. With correct semantic annotation of the variables, your dataset that includes information about carbon dioxide flux but that calls it CO2 flux WOULD be included in that search.\n\n\n15.5.6 Rights and Attribution\nCorrectly assigning a way for your datasets to be cited and reused is the last piece of a complete metadata document. This section sets the scientific rights and expectations for the future on your data, like:\n\nCitation format to be used when giving credit for the data\nAttribution expectations for the dataset\nReuse rights, which describe who may use the data and for what purpose\nRedistribution rights, which describe who may copy and redistribute the metadata and the data\nLegal terms and conditions like how the data are licensed for reuse.\n\n\n\n15.5.7 Metadata Standards\nSo, how does a computer organize all this information? There are a number of metadata standards that make your metadata machine readable and therefore easier for data curators to publish your data.\n\nEcological Metadata Language (EML)\nGeospatial Metadata Standards (ISO 19115 and ISO 19139)\n\nSee NOAA’s ISO Workbook\n\nBiological Data Profile (BDP)\nDublin Core\nDarwin Core\nPREservation Metadata: Implementation Strategies (PREMIS)\nMetadata Encoding Transmission Standard (METS)\n\nNote this is not an exhaustive list.\n\n\n15.5.8 Data Identifiers\nMany journals require a DOI (a digital object identifier) be assigned to the published data before the paper can be accepted for publication. The reason for that is so that the data can easily be found and easily linked to.\nSome data repositories assign a DOI for each dataset you publish on their repository. But, if you need to update the datasets, check the policy of the data repository. Some repositories assign a new DOI after you update the dataset. If this is the case, researchers should cite the exact version of the dataset that they used in their analysis, even if there is a newer version of the dataset available.\n\n\n15.5.9 Data Citation\nResearchers should get in the habit of citing the data that they use (even if it’s their own data!) in each publication that uses that data.\n\n\n15.5.10 Metadata tools (EML)\n\nExcel-to EML by Li Kui is a workflow that provides a spreadsheet template to collect metadata based on the Ecological Metadata Language Schema (EML)\nThe Environmental Data Repository (EDI) provides a tool called ezEML. A form-based web application that helps streamline the process of creating EML metadata.",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Data Management Essentials</span>"
    ]
  },
  {
    "objectID": "session_15.html#data-preservation-sharing",
    "href": "session_15.html#data-preservation-sharing",
    "title": "15  Data Management Essentials",
    "section": "15.6 Data Preservation & Sharing",
    "text": "15.6 Data Preservation & Sharing\n\n\n15.6.1 Data Packages\n\nWe define a data package as a scientifically useful collection of data and metadata that a researcher wants to preserve.\n\nSometimes a data package represents all of the data from a particular experiment, while at other times it might be all of the data from a grant, or on a topic, or associated with a paper. Whatever the extent, we define a data package as having one or more data files, software files, and other scientific products such as graphs and images, all tied together with a descriptive metadata document.\nMany data repositories assign a unique identifier to every version of every data file, similarly to how it works with source code commits in GitHub. Those identifiers usually take one of two forms. A DOI identifier, often assigned to the metadata and becomes a publicly citable identifier for the package. Each of the other files gets a global identifier, often a UUID that is globally unique. This allows to identify a digital entity within a data package.\nIn the graphic to the side, the package can be cited with the DOI doi:10.5063/F1Z1899CZ,and each of the individual files have their own identifiers as well.\n\n\n\n15.6.2 Data Repositories: Built for Data (and code)\n\nGitHub is not an archival location\nExamples of dedicated data repositories:\n\nKNB\nArctic Data Center\ntDAR\nEDI\nZenodo\n\nDedicated data repositories are:\n\nRich in metadata\nArchival in their mission\nCertified\n\nData papers, e.g., Scientific Data\nre3data is a global registry of research data repositories\nRepository Finder is a pilot project and tool to help researchers find an appropriate repository for their work\n\n\n15.6.2.1 DataOne Federation\nDataONE is a federation of dozens of data repositories that work together to make their systems interoperable and to provide a single unified search system that spans the repositories. DataONE aims to make it simpler for researchers to publish data to one of its member repositories, and then to discover and download that data for reuse in synthetic analyses.\nDataONE can be searched on the web, which effectively allows a single search to find data from the dozens of members of DataONE, rather than visiting each of the (currently 44!) repositories one at a time.",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Data Management Essentials</span>"
    ]
  },
  {
    "objectID": "session_15.html#the-fair-and-care-principles",
    "href": "session_15.html#the-fair-and-care-principles",
    "title": "15  Data Management Essentials",
    "section": "15.7 The FAIR and CARE Principles",
    "text": "15.7 The FAIR and CARE Principles\n](https://www.gida-global.org/whoweare)\nThe idea behind these principles is to increase access and usage of complex and large datasets for innovation, discovery, and decision-making. This means making data available to machines, researchers, Indigenous communities, policy makers, and more.\nWith the need to improve the infrastructure supporting the reuse of data, a group of diverse stakeholders from academia, funding agencies, publishers and industry came together to jointly endorse measurable guidelines that enhance the reusability of data (Wilkinson et al. (2016)). These guidelines became what we now know as the FAIR Data Principles.\nFollowing the discussion about FAIR and incorporating activities and feedback from the Indigenous Data Sovereignty network, the Global Indigenous Data Alliance developed the CARE principles (Carroll et al. (2021)). The CARE principles for Indigenous Data Governance complement the more data-centric approach of the FAIR principles, introducing social responsibility to open data management practices.\nTogether, these two principle encourage us to push open and other data movements to consider both people and purpose in their advocacy and pursuits. The goal is that researchers, stewards, and any users of data will be FAIR and CARE (Carroll et al. (2020)).\n\n15.7.1 What is FAIR?\nWith the rise of open science and more accessible data, it is becoming increasingly important to address accessibility and openness in multiple ways. The FAIR principles focuses on how to prepare your data so that it can be reused by others (versus just open access of research outputs). In 2016, the data stewardship community published principles surrounding best practices for open data management, including FAIR. FAIR stands for Findable, Accessible, Interoperable, and Reproducible. It is best to think about FAIR as a set of comprehensive standards for you to use while curating your data. And each principle of FAIR can be translated into a set of actions you can take during the entire lifecycle of research data management.\n\n\n\n\n\n\n\nSource: Fair Teaching Handbook\n\n\n\n\n\n\n\n\n\nFAIR\nDefinition\n\n\n\n\n(F) Findable\nMetadata and data should be easy to find for both humans and computers.\n\n\n(A) Accessible\nOnce someone finds the required data, they need to know how the data can be accessed.\n\n\n(I) Interoperable\nThe data needs to be easily integrated with other data for analysis, storage, and processing.\n\n\n(R) Reusable\nData should be well-described so they can be reused and replicated in different settings.\n\n\n\n\n\n15.7.2 What is CARE?\nThe CARE Principles for Indigenous Data Governance were developed by the International Indigenous Data Sovereignty Interest Group in consultation with Indigenous Peoples, scholars, non-profit organizations, and governments (Carroll et al. (2020)). They address concerns related to the people and purpose of data. It advocates for greater Indigenous control and oversight in order to share data on Indigenous Peoples’ terms. These principles are people and purpose-oriented, reflecting the crucial role data have in advancing Indigenous innovation and self-determination. CARE stands for Collective benefits, Authority control, Responsibility and Ethics. It details that the use of Indigenous data should result in tangible benefits for Indigenous collectives through inclusive development and innovation, improved governance and citizen engagement, and result in equitable outcomes.\n\n\n\n\n\n\n\nSource: Carroll, S.R., et al, 2020. The CARE Principles for Indigenous Data Governance\n\n\n\n\n\n\n\n\n\nCARE\nDefinition\n\n\n\n\n(C) Collective Benefit\nData ecosystems shall be designed and function in ways that enable Indigenous Peoples to derive benefit from the data.\n\n\n(A) Authority to Control\nIndigenous Peoples’ rights and interests in Indigenous data must be recognized and their authority to control such data be empowered. Indigenous data governance enables Indigenous Peoples and governing bodies to determine how Indigenous Peoples, as well as Indigenous lands, territories, resources, knowledge and geographical indicators, are represented and identified within data.\n\n\n(R) Responsibility\nThose working with Indigenous data have a responsibility to share how those data are used to support Indigenous Peoples’ self-determination and collective benefit. Accountability requires meaningful and openly available evidence of these efforts and the benefits accruing to Indigenous Peoples.\n\n\n(E) Ethics\nIndigenous Peoples’ rights and well being should be the primary concern at all stages of the data life cycle and across the data ecosystem.",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Data Management Essentials</span>"
    ]
  },
  {
    "objectID": "session_15.html#data-management-summary",
    "href": "session_15.html#data-management-summary",
    "title": "15  Data Management Essentials",
    "section": "15.8 Data Management Summary",
    "text": "15.8 Data Management Summary\n\nThe Data Life Cycle help us see the big picture of our data project.\nIt is extremely helpful to develop a data management plan describing each step of the data life cycle to stay organized.\nDocument everything. Having rich metadata is a key factor to enable data reuse. Describe your data and files and use an appropriate metadata standard.\nIdentify software and tools that will help you and your team organize and document the project’s data life cycle.\nPublish your data in a stable long live repository and assign a unique identifier.\nKeep the FAIR and CARE principles in mind through out the whole Data Life Cycle.\n\n\nNow that we have talked about the big picture of data management, metadata and the FAIR and CARE principles, we will do an activity to evaluate the concepts and ideas we have discussed.",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Data Management Essentials</span>"
    ]
  },
  {
    "objectID": "session_15.html#exercise-evaluate-a-data-package-on-the-edi-repository",
    "href": "session_15.html#exercise-evaluate-a-data-package-on-the-edi-repository",
    "title": "15  Data Management Essentials",
    "section": "15.9 Exercise: Evaluate a Data Package on the EDI Repository",
    "text": "15.9 Exercise: Evaluate a Data Package on the EDI Repository\nExplore data packages published on EDI assess the quality of their metadata. Imagine you’re a data curator!\n\n\n\n\n\n\nSetup\n\n\n\n\nBreak into groups and use the following data packages:\n\nGroup A: EDI Data Portal SBC LTER: Reef: Abundance, size and fishing effort for California Spiny Lobster (Panulirus interruptus), ongoing since 2012\nGroup B: EDI Data Portal Physiological stress of American pika (Ochotona princeps) and associated habitat characteristics for Niwot Ridge, 2018 - 2019\nGroup C: EDI Data Portal Ecological and social interactions in urban parks: bird surveys in local parks in the central Arizona-Phoenix metropolitan area\n\n\n\n\nYou and your group will evaluate a data package for its: (1) metadata quality, (2) data documentation quality for reproducibility, and (3) FAIRness and CAREness.\n\n\n\n\n\n\nExercise: Evaluate a data package on EDI Data Portal\n\n\n\n\nView our Data Package Assessment Rubric and make a copy of it to:\n\nInvestigate the metadata in the provided data\n\nDoes the metadata meet the standards we talked about? How so?\nIf not, how would you improve the metadata based on the standards we talked about?\n\nInvestigate the overall data documentation in the data package\n\nIs the documentation sufficient enough for reproducibility? Why or why not?\nIf not, how would you improve the data documentation? What’s missing?\n\nIdentify elements of FAIR and CARE\n\nIs it clear that the data package used a FAIR and CARE lens?\nIf not, what documentation or considerations would you add?\n\n\nElect someone to share back to the group the following:\n\nHow easy or challenging was it to find the metadata and other data documentation you were evaluating? Why or why not?\nWhat documentation stood out to you? What did you like or not like about it?\nHow well did these data packages uphold FAIR and CARE Principles?\nDo you feel like you understand the research project enough to use the data yourself (aka reproducibility?\n\n\nIf you and your group finish early, check out more datasets in the bonus question.",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Data Management Essentials</span>"
    ]
  },
  {
    "objectID": "session_15.html#bonus-investigate-metadata-and-data-documentation-in-other-data-repositories",
    "href": "session_15.html#bonus-investigate-metadata-and-data-documentation-in-other-data-repositories",
    "title": "15  Data Management Essentials",
    "section": "15.10 Bonus: Investigate metadata and data documentation in other Data Repositories",
    "text": "15.10 Bonus: Investigate metadata and data documentation in other Data Repositories\nNot all environmental data repositories document and publish datasets and data packages in the same way. Nor do they have the same submission requirements. It’s helpful to become familiar with metadata and data documentation jargon so it’s easier to identify the information you’re looking for. It’s also helpful for when you’re nearing the end of your project and are getting ready to publish your datasets.\nEvaluate the following data packages at these data repositories:\n\nKNB Arthropod pitfall trap biomass captured (weekly) and pitfall biomass model predictions (daily) near Toolik Field Station, Alaska, summers 2012-2016\nDataOne USDA-NOAA NWS Daily Climatological Data\nArctic Data Center Landscape evolution and adapting to change in ice-rich permafrost systems 2021-2022\n\nHow different are these data repositories from the EDI Data Portal? Would you consider publishing you data at one or multiple of these repositories?",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Data Management Essentials</span>"
    ]
  },
  {
    "objectID": "session_15.html#resources",
    "href": "session_15.html#resources",
    "title": "15  Data Management Essentials",
    "section": "Resources",
    "text": "Resources\n\nDMP Example: Using NASA Remote Sensing Data to Reduce Uncertainty of Land-Use Transitions in Global Carbon-Climate Models\nDPM Example: USGS Coastal and Marine Science Center Data Management Plan\nUSGS Data Management Plan Checklist\nSOP for data management for Ocean Health Index assessments (2023 version)",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Data Management Essentials</span>"
    ]
  },
  {
    "objectID": "session_15.html#references",
    "href": "session_15.html#references",
    "title": "15  Data Management Essentials",
    "section": "References",
    "text": "References\n\n\n\n\nCarroll, Stephanie Russo, Ibrahim Garba, Oscar L. Figueroa-Rodríguez, Jarita Holbrook, Raymond Lovett, Simeon Materechera, Mark Parsons, et al. 2020. “The CARE Principles for Indigenous Data Governance.” Data Science Journal 19 (1): 43. https://doi.org/10.5334/dsj-2020-043.\n\n\nCarroll, Stephanie Russo, Edit Herczog, Maui Hudson, Keith Russell, and Shelley Stall. 2021. “Operationalizing the CARE and FAIR Principles for Indigenous Data Futures.” Scientific Data 8 (1): 108. https://doi.org/10.1038/s41597-021-00892-0.\n\n\nMichener, William K. 2015. “Ten Simple Rules for Creating a Good Data Management Plan.” PLOS Computational Biology 11 (10): 1–9. https://doi.org/10.1371/journal.pcbi.1004525.\n\n\nWilkinson, Mark D., Michel Dumontier, IJsbrand Jan Aalbersberg, Gabrielle Appleton, Myles Axton, Arie Baak, Niklas Blomberg, et al. 2016. “The FAIR Guiding Principles for Scientific Data Management and Stewardship.” Scientific Data 3 (1): 160018. https://doi.org/10.1038/sdata.2016.18.",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Data Management Essentials</span>"
    ]
  },
  {
    "objectID": "session_16.html",
    "href": "session_16.html",
    "title": "16  Working with Spatial Data",
    "section": "",
    "text": "Learning Objectives",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Working with Spatial Data</span>"
    ]
  },
  {
    "objectID": "session_16.html#learning-objectives",
    "href": "session_16.html#learning-objectives",
    "title": "16  Working with Spatial Data",
    "section": "",
    "text": "How to use the sf package to wrangle spatial data\nStatic mapping with ggplot\nAdding basemaps to static maps\nInteractive mapping with leaflet",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Working with Spatial Data</span>"
    ]
  },
  {
    "objectID": "session_16.html#brief-introduction-to-sf",
    "href": "session_16.html#brief-introduction-to-sf",
    "title": "16  Working with Spatial Data",
    "section": "16.1 Brief introduction to sf",
    "text": "16.1 Brief introduction to sf\nFrom the sf vignette:\n\nSimple features or simple feature access refers to a formal standard (ISO 19125-1:2004) that describes how objects in the real world can be represented in computers, with emphasis on the spatial geometry of these objects. It also describes how such objects can be stored in and retrieved from databases, and which geometrical operations should be defined for them.\n\nThe sf package is an R implementation of Simple Features. This package incorporates:\n\na new spatial data class system in R\n\nfunctions for reading and writing spatial data\n\ntools for spatial operations on vectors\n\nMost of the functions in this package starts with prefix st_ which stands for spatial and temporal.\nIn this lesson, our goal is to use a shapefile of Alaska regions and rivers, and data on population in Alaska by community to create a map that looks like this:",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Working with Spatial Data</span>"
    ]
  },
  {
    "objectID": "session_16.html#about-the-data",
    "href": "session_16.html#about-the-data",
    "title": "16  Working with Spatial Data",
    "section": "16.2 About the data",
    "text": "16.2 About the data\nAll of the data used in this tutorial are simplified versions of real datasets available on the KNB Data Repository. We are using simplified datasets to ease the processing burden on all our computers since the original geospatial datasets are high-resolution. These simplified versions of the datasets may contain topological errors.\nThe spatial data we will be using to create the map are:\n\n\n\nData\nOriginal datasets\n\n\n\n\nAlaska regional boundaries\nJared Kibele and Jeanette Clark. 2018. State of Alaska’s Salmon and People Regional Boundaries. Knowledge Network for Biocomplexity. doi:10.5063/F1125QWP.\n\n\nCommunity locations and population\nJeanette Clark, Sharis Ochs, Derek Strong, and National Historic Geographic Information System. 2018. Languages used in Alaskan households, 1990-2015. Knowledge Network for Biocomplexity. doi:10.5063/F11G0JHX.\n\n\nAlaska rivers\nThe rivers shapefile is a simplified version of Jared Kibele and Jeanette Clark. Rivers of Alaska grouped by SASAP region, 2018. Knowledge Network for Biocomplexity. doi:10.5063/F1SJ1HVW.\n\n\n\n\n\n\n\n\n\nSetup\n\n\n\n\nNavigate to this dataset on KNB’s test site and download the zip folder.\nUpload the zip folder to the data folder in the training_{USERNAME} project. You don’t need to unzip the folder ahead of time, uploading will automatically unzip the folder.\n\nAlternatively, programmatically download and extract the demo data with: \n\n\n\nknb_url &lt;- \"https://dev.nceas.ucsb.edu/knb/d1/mn/v2/object/urn%3Auuid%3Aaceaecb2-1ce0-4d41-a839-d3607d32bb58\"\n\ndownload.file(url = knb_url, destfile = 'shapefile_demo_data.zip')\n\nunzip('shapefile_demo_data.zip', exdir = 'data')\n\nfile.remove('shapefile_demo_data.zip')\n\n\nCreate a new Quarto file.\n\nTitle it “Working with Spatial Data in R”\nSave the file and name it “intro-to-spatial-data”.\n\nLoad the following libraries at the top of your Quarto file.\n\n\nlibrary(readr)\nlibrary(sf)\nlibrary(ggplot2)\nlibrary(leaflet)\nlibrary(scales)\nlibrary(ggspatial)\nlibrary(dplyr)",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Working with Spatial Data</span>"
    ]
  },
  {
    "objectID": "session_16.html#exploring-the-data-using-plot-and-st_crs",
    "href": "session_16.html#exploring-the-data-using-plot-and-st_crs",
    "title": "16  Working with Spatial Data",
    "section": "16.3 Exploring the data using plot() and st_crs()",
    "text": "16.3 Exploring the data using plot() and st_crs()\nFirst let’s read in the shapefile of regional boundaries in Alaska using read_sf() and then create a basic plot of the data plot().\n\n# read in shapefile using read_sf()\nak_regions &lt;- read_sf(\"data/ak_regions_simp.shp\")\n\n\n# quick plot\nplot(ak_regions)\n\n\n\n\n\n\n\n\nWe can also examine its class using class().\n\nclass(ak_regions)\n\n[1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\nsf objects usually have two types of classes: sf and data.frame.\nSince our shapefile object has the data.frame class, viewing the contents of the object using the head() function or other exploratory functions shows similar results as if we read in data using read.csv() or read_csv().\nBut, unlike a typical data.frame, an sf object has spatial metadata (geometry type, dimension, bbox, epsg (SRID), proj4string) and an additional column typically named geometry that contains the spatial data.\n\nhead(ak_regions)\n\nSimple feature collection with 6 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -179.2296 ymin: 51.15702 xmax: 179.8567 ymax: 71.43957\nGeodetic CRS:  WGS 84\n# A tibble: 6 × 4\n  region_id region           mgmt_area                                  geometry\n      &lt;int&gt; &lt;chr&gt;                &lt;dbl&gt;                        &lt;MULTIPOLYGON [°]&gt;\n1         1 Aleutian Islands         3 (((-171.1345 52.44974, -171.1686 52.4174…\n2         2 Arctic                   4 (((-139.9552 68.70597, -139.9893 68.7051…\n3         3 Bristol Bay              3 (((-159.8745 58.62778, -159.8654 58.6137…\n4         4 Chignik                  3 (((-155.8282 55.84638, -155.8049 55.8655…\n5         5 Copper River             2 (((-143.8874 59.93931, -143.9165 59.9403…\n6         6 Kodiak                   3 (((-151.9997 58.83077, -152.0358 58.8271…\n\nglimpse(ak_regions)\n\nRows: 13\nColumns: 4\n$ region_id &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13\n$ region    &lt;chr&gt; \"Aleutian Islands\", \"Arctic\", \"Bristol Bay\", \"Chignik\", \"Cop…\n$ mgmt_area &lt;dbl&gt; 3, 4, 3, 3, 2, 3, 4, 4, 2, 4, 2, 1, 4\n$ geometry  &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((-171.1345 5..., MULTIPOLYGON (((-139.9552 6.…\n\n\n\n16.3.1 Coordinate Reference System (CRS)\n\n\n\nSource: ESRI\n\n\nEvery sf object needs a coordinate reference system (or crs) defined in order to work with it correctly. A coordinate reference system contains both a datum and a projection.\n\n\n\n\n\nThe datum is how you georeference your points (in 3 dimensions!) onto a spheroid, or the Earth. The Earth is not a perfect sphere and there are many ways to describe its shape. For example, is the Earth shaped like a lemon, lime, or orange? The shape, or datum, that you choose will depend on the scope of your project (for instance, local vs. global) and the specific locations.\nThe projection is how these points are mathematically transformed to represent the georeferenced point on a flat piece of paper. Since you will visualize a 3D object onto a 2D space, there will be some distortions depending on the projection that you choose. Analogously, how do you peel the fruit (representing the Earth) and flatten the peel?\n\n\n\nSource: ESRI\n\n\nAll coordinate reference systems require a datum. However, some coordinate reference systems are “unprojected” (also called geographic coordinate systems). Coordinates in latitude/longitude use a geographic (unprojected) coordinate system. One of the most commonly used geographic coordinate systems is WGS 1984.\nESRI has a blog post that explains these concepts in more detail with very helpful diagrams and examples.\nYou can view what crs is set by using the function st_crs().\n\nst_crs(ak_regions)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nThis looks pretty confusing. Without getting into the details, that long string says that this data has a geographic coordinate system (WGS84) with no projection. A convenient way to reference crs quickly is by using the EPSG code, a number that represents a standard projection and datum. You can check out a list of (lots!) of EPSG codes here.\nWe will use multiple EPSG codes in this lesson. Here they are, along with their more readable names:\n\n3338: Alaska Albers (projected CRS)\n4326: WGS84 (World Geodetic System 1984), used in GPS (unprojected CRS)\n3857: Pseudo-Mercator, used in Google Maps, OpenStreetMap, Bing, ArcGIS, ESRI (projected CRS)\n\nYou will often need to transform your geospatial data from one coordinate system to another. The st_transform() function does this quickly for us. You may have noticed the maps above looked wonky because of the dateline. We might want to set a different projection for this data so it plots nicer. A good one for Alaska is called the Alaska Albers projection, with an EPSG code of 3338.\n\nak_regions_3338 &lt;- ak_regions %&gt;%\n    st_transform(crs = 3338)\n\nst_crs(ak_regions_3338)\n\nCoordinate Reference System:\n  User input: EPSG:3338 \n  wkt:\nPROJCRS[\"NAD83 / Alaska Albers\",\n    BASEGEOGCRS[\"NAD83\",\n        DATUM[\"North American Datum 1983\",\n            ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4269]],\n    CONVERSION[\"Alaska Albers (meters)\",\n        METHOD[\"Albers Equal Area\",\n            ID[\"EPSG\",9822]],\n        PARAMETER[\"Latitude of false origin\",50,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8821]],\n        PARAMETER[\"Longitude of false origin\",-154,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8822]],\n        PARAMETER[\"Latitude of 1st standard parallel\",55,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8823]],\n        PARAMETER[\"Latitude of 2nd standard parallel\",65,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8824]],\n        PARAMETER[\"Easting at false origin\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8826]],\n        PARAMETER[\"Northing at false origin\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8827]]],\n    CS[Cartesian,2],\n        AXIS[\"easting (X)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"northing (Y)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Topographic mapping (small scale).\"],\n        AREA[\"United States (USA) - Alaska.\"],\n        BBOX[51.3,172.42,71.4,-129.99]],\n    ID[\"EPSG\",3338]]\n\n\n\nplot(ak_regions_3338)\n\n\n\n\n\n\n\n\nMuch better!",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Working with Spatial Data</span>"
    ]
  },
  {
    "objectID": "session_16.html#sf-the-tidyverse",
    "href": "session_16.html#sf-the-tidyverse",
    "title": "16  Working with Spatial Data",
    "section": "16.4 sf & the Tidyverse",
    "text": "16.4 sf & the Tidyverse\nsf objects can be used as a regular data.frame object in many operations. We already saw the results of plot() and head().\nSince sf objects are data.frames, they play nicely with packages in the tidyverse. Here are a couple of simple examples:\n\n16.4.1 select()\n\n# returns the names of all the columns in dataset\ncolnames(ak_regions_3338)\n\n[1] \"region_id\" \"region\"    \"mgmt_area\" \"geometry\" \n\n\n\nak_regions_3338 %&gt;%\n    select(region)\n\nSimple feature collection with 13 features and 1 field\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -2175328 ymin: 405653 xmax: 1579226 ymax: 2383770\nProjected CRS: NAD83 / Alaska Albers\n# A tibble: 13 × 2\n   region                                                               geometry\n   &lt;chr&gt;                                                      &lt;MULTIPOLYGON [m]&gt;\n 1 Aleutian Islands     (((-1156666 420855.1, -1159837 417990.3, -1161898 41694…\n 2 Arctic               (((571289.9 2143072, 569941.5 2142691, 569158.2 2142146…\n 3 Bristol Bay          (((-339688.6 973904.9, -339302 972297.3, -339229.2 9710…\n 4 Chignik              (((-114381.9 649966.8, -112866.8 652065.8, -108836.8 65…\n 5 Copper River         (((561012 1148301, 559393.7 1148169, 557797.7 1148492, …\n 6 Kodiak               (((115112.5 983293, 113051.3 982825.9, 110801.3 983211.…\n 7 Kotzebue             (((-678815.3 1819519, -677555.2 1820698, -675557.8 1821…\n 8 Kuskokwim            (((-1030125 1281198, -1029858 1282333, -1028980 1284032…\n 9 Cook Inlet           (((35214.98 1002457, 36660.3 1002038, 36953.11 1001186,…\n10 Norton Sound         (((-848357 1636692, -846510 1635203, -840513.7 1632225,…\n11 Prince William Sound (((426007.1 1087250, 426562.5 1088591, 427711.6 1089991…\n12 Southeast            (((1287777 744574.1, 1290183 745970.8, 1292940 746262.7…\n13 Yukon                (((-375318 1473998, -373723.9 1473487, -373064.8 147393…\n\n\nNote the sticky geometry column! The geometry column will stay with your sf object even if it is not called explicitly.\n\n\n16.4.2 filter()\n\nunique(ak_regions_3338$region)\n\n [1] \"Aleutian Islands\"     \"Arctic\"               \"Bristol Bay\"         \n [4] \"Chignik\"              \"Copper River\"         \"Kodiak\"              \n [7] \"Kotzebue\"             \"Kuskokwim\"            \"Cook Inlet\"          \n[10] \"Norton Sound\"         \"Prince William Sound\" \"Southeast\"           \n[13] \"Yukon\"               \n\n\n\nak_regions_3338 %&gt;%\n    filter(region == \"Southeast\")\n\nSimple feature collection with 1 feature and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 559475.7 ymin: 722450 xmax: 1579226 ymax: 1410576\nProjected CRS: NAD83 / Alaska Albers\n# A tibble: 1 × 4\n  region_id region    mgmt_area                                         geometry\n*     &lt;int&gt; &lt;chr&gt;         &lt;dbl&gt;                               &lt;MULTIPOLYGON [m]&gt;\n1        12 Southeast         1 (((1287777 744574.1, 1290183 745970.8, 1292940 …",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Working with Spatial Data</span>"
    ]
  },
  {
    "objectID": "session_16.html#spatial-joins",
    "href": "session_16.html#spatial-joins",
    "title": "16  Working with Spatial Data",
    "section": "16.5 Spatial Joins",
    "text": "16.5 Spatial Joins\nYou can also use the sf package to create spatial joins, useful for when you want to utilize two datasets together.\n\n\n\n\n\n\nExercise: How many people live in each of these Alaska regions?\n\n\n\nWe have some population data, but it gives the population by city, not by region. To determine the population per region we will need to:\n\nRead in the population data from a csv and turn it into an sf object\nUse a spatial join (st_join()) to assign each city to a region\nUse group_by() and summarize() to calculate the total population by region\nSave the spatial object you created using write_sf()\n\n\n\n1. Read in alaska_population.csv using read.csv()\n\n# read in population data\npop &lt;- read_csv(\"data/alaska_population.csv\")\n\nTurn pop into a spatial object\nThe st_join() function is a spatial left join. The arguments for both the left and right tables are objects of class sf which means we will first need to turn our population data.frame with latitude and longitude coordinates into an sf object.\nWe can do this easily using the st_as_sf() function, which takes as arguments the coordinates and the crs. The remove = F specification here ensures that when we create our geometry column, we retain our original lat lng columns, which we will need later for plotting. Although it isn’t said anywhere explicitly in the file, let’s assume that the coordinate system used to reference the latitude longitude coordinates is WGS84, which has a crs number of 4326.\n\npop_4326 &lt;- st_as_sf(pop,\n                     coords = c('lng', 'lat'),\n                     crs = 4326,\n                     remove = F)\n\nhead(pop_4326)\n\nSimple feature collection with 6 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -176.6581 ymin: 51.88 xmax: -154.1703 ymax: 62.68889\nGeodetic CRS:  WGS 84\n# A tibble: 6 × 6\n   year city       lat   lng population             geometry\n  &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;          &lt;POINT [°]&gt;\n1  2015 Adak      51.9 -177.        122    (-176.6581 51.88)\n2  2015 Akhiok    56.9 -154.         84 (-154.1703 56.94556)\n3  2015 Akiachak  60.9 -161.        562 (-161.4314 60.90944)\n4  2015 Akiak     60.9 -161.        399 (-161.2139 60.91222)\n5  2015 Akutan    54.1 -166.        899 (-165.7731 54.13556)\n6  2015 Alakanuk  62.7 -165.        777 (-164.6153 62.68889)\n\n\n2. Join population data with Alaska regions data using st_join()\nNow we can do our spatial join! You can specify what geometry function the join uses (st_intersects, st_within, st_crosses, st_is_within_distance…) in the join argument. The geometry function you use will depend on what kind of operation you want to do, and the geometries of your shapefiles.\nIn this case, we want to find what region each city falls within, so we will use st_within.\n\npop_joined &lt;- st_join(pop_4326, \n                      ak_regions_3338, \n                      join = st_within)\n\nThis gives an error!\nError: st_crs(x) == st_crs(y) is not TRUE\nTurns out, this won’t work right now because our coordinate reference systems are not the same. Luckily, this is easily resolved using st_transform(), and projecting our population object into Alaska Albers.\n\npop_3338 &lt;- st_transform(pop_4326, \n                         crs = 3338)\n\n\npop_joined &lt;- st_join(pop_3338, \n                      ak_regions_3338, \n                      join = st_within)\n\nhead(pop_joined)\n\nSimple feature collection with 6 features and 8 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -1537925 ymin: 472626.9 xmax: -10340.71 ymax: 1456223\nProjected CRS: NAD83 / Alaska Albers\n# A tibble: 6 × 9\n   year city     lat   lng population             geometry region_id region     \n  &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;          &lt;POINT [m]&gt;     &lt;int&gt; &lt;chr&gt;      \n1  2015 Adak    51.9 -177.        122  (-1537925 472626.9)         1 Aleutian I…\n2  2015 Akhiok  56.9 -154.         84 (-10340.71 770998.4)         6 Kodiak     \n3  2015 Akiac…  60.9 -161.        562  (-400885.5 1236460)         8 Kuskokwim  \n4  2015 Akiak   60.9 -161.        399  (-389165.7 1235475)         8 Kuskokwim  \n5  2015 Akutan  54.1 -166.        899 (-766425.7 526057.8)         1 Aleutian I…\n6  2015 Alaka…  62.7 -165.        777  (-539724.9 1456223)        13 Yukon      \n# ℹ 1 more variable: mgmt_area &lt;dbl&gt;\n\n\n\n\n\n\n\n\nExploring types of joins\n\n\n\nThere are many different types of joins you can do with geospatial data. Examine the help page for these joins (?st_within() will get you there). What other joins types might be appropriate for examining the relationship between points and polygons? What about two sets of polygons?\n\n\n3. Calculate the total population by region using group_by() and summarize()\nNext we compute the total population for each region. In this case, we want to do a group_by() and summarize() as this were a regular data.frame. Otherwise all of our point geometries would be included in the aggregation, which is not what we want. Our goal is just to get the total population by region. We remove the sticky geometry using as.data.frame(), on the advice of the sf::tidyverse help page.\n\npop_region &lt;- pop_joined %&gt;%\n    as.data.frame() %&gt;%\n    group_by(region) %&gt;%\n    summarise(total_pop = sum(population))\n\nhead(pop_region)\n\n# A tibble: 6 × 2\n  region           total_pop\n  &lt;chr&gt;                &lt;dbl&gt;\n1 Aleutian Islands      8840\n2 Arctic                8419\n3 Bristol Bay           6947\n4 Chignik                311\n5 Cook Inlet          408254\n6 Copper River          2294\n\n\nAnd use a regular left_join() to get the information back to the Alaska region shapefile. Note that we need this step in order to regain our region geometries so that we can make some maps.\n\npop_region_3338 &lt;- left_join(ak_regions_3338, \n                             pop_region, \n                             by = \"region\")\n\n# plot to check\nplot(pop_region_3338[\"total_pop\"])\n\n\n\n\n\n\n\n\nSo far, we have learned how to use sf and dplyr to use a spatial join on two datasets and calculate a summary metric from the result of that join.\n\n\n\n\n\n\nsf and tidyverse best practices\n\n\n\nThe group_by() and summarize() functions can also be used on sf objects to summarize within a dataset and combine geometries. Many of the tidyverse functions have methods specific for sf objects, some of which have additional arguments that wouldn’t be relevant to the data.frame methods. You can run ?sf::tidyverse to get documentation on the tidyverse sf methods.\n\n\nSay we want to calculate the population by Alaska management area, as opposed to region.\n\npop_mgmt_3338 &lt;- pop_region_3338 %&gt;%\n    group_by(mgmt_area) %&gt;%\n    summarize(total_pop = sum(total_pop))\n\nplot(pop_mgmt_3338[\"total_pop\"])\n\n\n\n\n\n\n\n\nNotice that the region geometries were combined into a single polygon for each management area.\nIf we don’t want to combine geometries, we can specify do_union = F as an argument.\n\npop_mgmt_3338 &lt;- pop_region_3338 %&gt;%\n    group_by(mgmt_area) %&gt;%\n    summarize(total_pop = sum(total_pop), do_union = F)\n\nplot(pop_mgmt_3338[\"total_pop\"])\n\n\n\n\n\n\n\n\n4. Save the spatial object to a new file using write_sf()\nSave the spatial object to disk using write_sf() and specifying the filename. Writing your file with the extension .shp will assume an ESRI driver driver, but there are many other format options available.\n\nwrite_sf(pop_region_3338, \"data/ak_regions_population.shp\")",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Working with Spatial Data</span>"
    ]
  },
  {
    "objectID": "session_16.html#visualize-with-ggplot",
    "href": "session_16.html#visualize-with-ggplot",
    "title": "16  Working with Spatial Data",
    "section": "16.6 Visualize with ggplot",
    "text": "16.6 Visualize with ggplot\nggplot2 now has integrated functionality to plot sf objects using geom_sf().\nWe can plot sf objects just like regular data.frames using geom_sf.\n\nggplot(pop_region_3338) +\n    geom_sf(aes(fill = total_pop)) +\n    labs(fill = \"Total Population\") +\n    scale_fill_continuous(low = \"khaki\",\n                          high =  \"firebrick\",\n                          labels = comma) +\n    theme_bw()\n\n\n\n\n\n\n\n\nWe can also plot multiple shapefiles in the same plot. Say if we want to visualize rivers in Alaska, in addition to the location of communities, since many communities in Alaska are on rivers. We can read in a rivers shapefile, double-check the crs to make sure it is what we need, and then plot all three shapefiles\n\nthe regional population (polygons),\nthe locations of cities (points), and\nthe rivers (linestrings).\n\n\nrivers_3338 &lt;- read_sf(\"data/ak_rivers_simp.shp\")\n\n\nst_crs(rivers_3338)\n\nCoordinate Reference System:\n  User input: Albers \n  wkt:\nPROJCRS[\"Albers\",\n    BASEGEOGCRS[\"GCS_GRS 1980(IUGG, 1980)\",\n        DATUM[\"D_unknown\",\n            ELLIPSOID[\"GRS80\",6378137,298.257222101,\n                LENGTHUNIT[\"metre\",1,\n                    ID[\"EPSG\",9001]]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Albers Equal Area\",\n            ID[\"EPSG\",9822]],\n        PARAMETER[\"Latitude of false origin\",50,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8821]],\n        PARAMETER[\"Longitude of false origin\",-154,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8822]],\n        PARAMETER[\"Latitude of 1st standard parallel\",55,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8823]],\n        PARAMETER[\"Latitude of 2nd standard parallel\",65,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8824]],\n        PARAMETER[\"Easting at false origin\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8826]],\n        PARAMETER[\"Northing at false origin\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8827]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nNote that although no EPSG code is set explicitly, with some sleuthing we can determine that this is EPSG:3338. This site is helpful for looking up EPSG codes.\n\nggplot() +\n    geom_sf(data = pop_region_3338, \n            aes(fill = total_pop)) +\n    geom_sf(data = pop_3338, \n            size = 0.5) +\n    geom_sf(data = rivers_3338,\n            aes(linewidth = StrOrder)) +\n    scale_linewidth(range = c(0.05, 0.5),\n                    guide = \"none\") +\n    labs(title = \"Total Population by Alaska Region\",\n         fill = \"Total Population\") +\n    scale_fill_continuous(low = \"khaki\",\n                          high =  \"firebrick\",\n                          labels = comma) +\n    theme_bw() \n\n\n\n\n\n\n\n\n\n16.6.1 Incorporate base maps into static maps using ggspatial\nThe ggspatial package has a function that can add tile layers from a few predefined tile sources like OpenStreetMap. Making sure that the tiles will plot correctly can be a finicky, so we will reproject our population data into the OpenStreetMap projection, Pseudo-Mercator (EPSG 3857), first.\nThen we will add ggspatial::annotation_map_tile() function into ggplot to add a base map to our map. This can take a couple of minutes to load.\n\npop_3857 &lt;- st_transform(pop_3338, \n                         crs = 3857)\n\n\nggplot(data = pop_3857) +\n    ggspatial::annotation_map_tile(type = \"osm\", zoom = 4) + # higher zoom values are more detailed \n    geom_sf(aes(color = population),\n            fill = NA) +\n    scale_color_continuous(low = \"darkkhaki\",\n                           high =  \"firebrick\",\n                           labels = comma)\n\n\n\n\n\n\n\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |========                                                              |  11%\n  |                                                                            \n  |================                                                      |  22%\n  |                                                                            \n  |=======================                                               |  33%\n  |                                                                            \n  |===============================                                       |  44%\n  |                                                                            \n  |=======================================                               |  56%\n  |                                                                            \n  |===============================================                       |  67%\n  |                                                                            \n  |======================================================                |  78%\n  |                                                                            \n  |==============================================================        |  89%\n  |                                                                            \n  |======================================================================| 100%",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Working with Spatial Data</span>"
    ]
  },
  {
    "objectID": "session_16.html#visualize-sf-objects-with-leaflet",
    "href": "session_16.html#visualize-sf-objects-with-leaflet",
    "title": "16  Working with Spatial Data",
    "section": "16.7 Visualize sf objects with leaflet",
    "text": "16.7 Visualize sf objects with leaflet\nWe can also make an interactive map from our data above using leaflet.\nleaflet (unlike ggplot) will project data for you. The catch is that you have to give it both a projection (like Alaska Albers), and that your shapefile must use a geographic coordinate system. This means that we need to use our shapefile with the 4326 EPSG code. Remember you can always check what crs you have set using st_crs.\nHere we define a leaflet projection for Alaska Albers, and save it as a variable to use later.\n\nepsg3338 &lt;- leaflet::leafletCRS(\n    crsClass = \"L.Proj.CRS\",\n    code = \"EPSG:3338\",\n    proj4def =  \"+proj=aea +lat_1=55 +lat_2=65 +lat_0=50 +lon_0=-154 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\",\n    resolutions = 2 ^ (16:7)\n)\n\nYou might notice that this looks familiar! The syntax is a bit different, but most of this information is also contained within the crs of our shapefile:\n\nst_crs(pop_region_3338)\n\nCoordinate Reference System:\n  User input: EPSG:3338 \n  wkt:\nPROJCRS[\"NAD83 / Alaska Albers\",\n    BASEGEOGCRS[\"NAD83\",\n        DATUM[\"North American Datum 1983\",\n            ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4269]],\n    CONVERSION[\"Alaska Albers (meters)\",\n        METHOD[\"Albers Equal Area\",\n            ID[\"EPSG\",9822]],\n        PARAMETER[\"Latitude of false origin\",50,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8821]],\n        PARAMETER[\"Longitude of false origin\",-154,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8822]],\n        PARAMETER[\"Latitude of 1st standard parallel\",55,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8823]],\n        PARAMETER[\"Latitude of 2nd standard parallel\",65,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8824]],\n        PARAMETER[\"Easting at false origin\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8826]],\n        PARAMETER[\"Northing at false origin\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8827]]],\n    CS[Cartesian,2],\n        AXIS[\"easting (X)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"northing (Y)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Topographic mapping (small scale).\"],\n        AREA[\"United States (USA) - Alaska.\"],\n        BBOX[51.3,172.42,71.4,-129.99]],\n    ID[\"EPSG\",3338]]\n\n\nSince leaflet requires that we use an unprojected coordinate system, let’s use st_transform() yet again to get back to WGS84.\n\npop_region_4326 &lt;- pop_region_3338 %&gt;% \n    st_transform(crs = 4326)\n\n\nm &lt;- leaflet(options = leafletOptions(crs = epsg3338)) %&gt;%\n    addPolygons(data = pop_region_4326,\n                fillColor = \"gray\",\n                weight = 1)\n\nm\n\n\n\n\n\nWe can add labels, legends, and a color scale.\n\npal &lt;- colorNumeric(palette = \"Reds\", domain = pop_region_4326$total_pop)\n\nm &lt;- leaflet(options = leafletOptions(crs = epsg3338)) %&gt;%\n    addPolygons(\n        data = pop_region_4326,\n        fillColor = ~ pal(total_pop),\n        weight = 1,\n        color = \"black\",\n        fillOpacity = 1,\n        label = ~ region\n    ) %&gt;%\n    addLegend(\n        position = \"bottomleft\",\n        pal = pal,\n        values = range(pop_region_4326$total_pop),\n        title = \"Total Population\"\n    )\n\nm\n\n\n\n\n\nWe can also add the individual communities, with popup labels showing their population, on top of that!\n\npal &lt;- colorNumeric(palette = \"Reds\", domain = pop_region_4326$total_pop)\n\nm &lt;- leaflet(options = leafletOptions(crs = epsg3338)) %&gt;%\n    addPolygons(\n        data = pop_region_4326,\n        fillColor = ~ pal(total_pop),\n        weight = 1,\n        color = \"black\",\n        fillOpacity = 1\n    ) %&gt;%\n    addCircleMarkers(\n        data = pop_4326,\n        lat = ~ lat,\n        lng = ~ lng,\n        radius = ~ log(population / 500),\n        # arbitrary scaling\n        fillColor = \"gray\",\n        fillOpacity = 1,\n        weight = 0.25,\n        color = \"black\",\n        label = ~ paste0(pop_4326$city, \", population \", comma(pop_4326$population))\n    ) %&gt;%\n    addLegend(\n        position = \"bottomleft\",\n        pal = pal,\n        values = range(pop_region_4326$total_pop),\n        title = \"Total Population\"\n    )\n\nm",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Working with Spatial Data</span>"
    ]
  },
  {
    "objectID": "session_16.html#more-spatial-resources",
    "href": "session_16.html#more-spatial-resources",
    "title": "16  Working with Spatial Data",
    "section": "16.8 More Spatial Resources",
    "text": "16.8 More Spatial Resources\nThere is a lot more functionality to sf including the ability to intersect polygons, calculate distance, create a buffer, and more. Here are some more great resources and tutorials for a deeper dive into this great package:\n\nRaster analysis in R\n\nSpatial analysis in R with the sf package\n\nIntro to Spatial Analysis\n\nsf github repo\n\nTidy spatial data in R: using dplyr, tidyr, and ggplot2 with sf\n\nmapping-fall-foliage-with-sf",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Working with Spatial Data</span>"
    ]
  },
  {
    "objectID": "session_16.html#basemaps-resources",
    "href": "session_16.html#basemaps-resources",
    "title": "16  Working with Spatial Data",
    "section": "16.9 Basemaps Resources",
    "text": "16.9 Basemaps Resources\n\nDocumentation for the ggmap package",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Working with Spatial Data</span>"
    ]
  },
  {
    "objectID": "session_17.html",
    "href": "session_17.html",
    "title": "17  Writing Functions and Packages",
    "section": "",
    "text": "Learning Objectives",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Writing Functions and Packages</span>"
    ]
  },
  {
    "objectID": "session_17.html#learning-objectives",
    "href": "session_17.html#learning-objectives",
    "title": "17  Writing Functions and Packages",
    "section": "",
    "text": "Explain the importance of using and developing functions\nCreate custom functions using R code\nDocument functions to improve understanding and code communication",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Writing Functions and Packages</span>"
    ]
  },
  {
    "objectID": "session_17.html#r-functions",
    "href": "session_17.html#r-functions",
    "title": "17  Writing Functions and Packages",
    "section": "17.1 R Functions",
    "text": "17.1 R Functions\n\n\n\n\n\n\nQuick reminder: What is a function?\n\n\n\n\n\nA set of statements or expressions of code that are organized together to perform a specific task.\nThe statements or expressions of code within the function accept accept user input(s), does something with it, and returns a useful output.\nSyntax: result_value &lt;- function_name(argument1 = value1, argument2 = value2, ...)\n\n\n\nMany people write R code as a single, continuous stream of commands, often drawn from the R Console itself and simply pasted into a script. While any script brings benefits over non-scripted solutions, there are advantages to breaking code into small, reusable modules. This is the role of a function in R. In this lesson, we will review the advantages of coding with functions, practice by creating some functions and show how to call them, and then do some exercises to build other simple functions.\n\n17.1.1 Why Functions?\n\n\n\n\n\n\nDRY: Don’t Repeat Yourself\n\n\n\n\n“You should consider writing a function whenever you’ve copied and pasted a block of code more than twice (i.e. you now have three copies of the same code).”\nChapter 19 Functions in R for Data Science (Grolemund & Wickham)\n\nBy creating small functions that only complete one logical task and do it well, we quickly gain:\n\nImproved understanding\nReuse via decomposing tasks into bite-sized chunks\nImproved error testing\n\n\n\n\n\n\n\nNaming Functions\n\n\n\nThe name of a function is important. Ideally, function names should be short, but still clearly captures what the function does.\nBest Practices from Chapter 19 Functions in R for Data Science:\n\nFunction names should be verbs and arguments should be nouns (there are exceptions).\nUse the snake_case naming convention for functions that are multiple words.\nFor a “family” of functions, use a common prefix to indicate that they are connected.\n\n\n\n\n\n17.1.2 Exercise: Temperature Conversion\nImagine you have a bunch of data measured in Fahrenheit and you want to convert that for analytical purposes to Celsius. You might have an R script that does this for you.\n\nairtemps &lt;- c(212, 30.3, 78, 32)\ncelsius1 &lt;- (airtemps[1] - 32) * 5/9\ncelsius2 &lt;- (airtemps[2] - 32) * 5/9\ncelsius3 &lt;- (airtemps[3] - 32) * 5/9\n\nNote the duplicated code, where the same formula is repeated three times. This code would be both more compact and more reliable if we didn’t repeat ourselves.\n\nCreate a Function that Converts Fahrenheit to Celsius\nFunctions in R are a mechanism to process some input and return a value. Similarly to other variables, functions can be assigned to a variable so that they can be used throughout code by reference. To create a function in R, you use the function function (so meta!) and assign its result to a variable. Let’s create a function that calculates Celsius temperature outputs from Fahrenheit temperature inputs.\n\nfahr_to_celsius &lt;- function(fahr) {\n  celsius &lt;- (fahr - 32) * 5/9\n  return(celsius)\n}\n\nBy running this code, we have created a function and stored it in R’s global environment. The fahr argument to the function function indicates that the function we are creating takes a single parameter (the temperature in Fahrenheit), and the return statement indicates that the function should return the value in the celsius variable that was calculated inside the function. Let’s use it, and check if we got the same value as before:\n\ncelsius4 &lt;- fahr_to_celsius(airtemps[1])\ncelsius4\n\n[1] 100\n\ncelsius1 == celsius4\n\n[1] TRUE\n\n\nExcellent. So now we have a conversion function we can use. Note that, because most operations in R can take multiple types as inputs, we can also pass the original vector of airtemps, and calculate all of the results at once:\n\ncelsius &lt;- fahr_to_celsius(airtemps)\ncelsius\n\n[1] 100.0000000  -0.9444444  25.5555556   0.0000000\n\n\nThis takes a vector of temperatures in Fahrenheit, and returns a vector of temperatures in Celsius.\n\n\nYour Turn: Create a Function that Converts Celsius to Fahrenheit\n\n\n\n\n\n\nExercise\n\n\n\nCreate a function named celsius_to_fahr that does the reverse, it takes temperature data in Celsius as input, and returns the data converted to Fahrenheit.\nCreate the function celsius_to_fahr in a new R Script file.\nThen use that formula to convert the celsius vector back into a vector of Fahrenheit values, and compare it to the original airtemps vector to ensure that your answers are correct.\nHint: the formula for Celsius to Fahrenheit conversions is celsius * 9/5 + 32.\n\n\nDid you encounter any issues with rounding or precision?\n\n\n\n\n\n\nSolution, but don’t peek!\n\n\n\n\n\nDon’t peek until you write your own…\n\ncelsius_to_fahr &lt;- function(celsius) {\n    fahr &lt;- celsius * 9/5 + 32\n    return(fahr)\n}\n\nresult &lt;- celsius_to_fahr(celsius)\nairtemps == result\n\n[1] TRUE TRUE TRUE TRUE\n\n\n\n\n\n\n\n\n17.1.3 Documenting R Functions\nFunctions need documentation so that we can communicate what they do, and why. The roxygen2 R package provides a simple means to document your functions so that you can explain what the function does, the assumptions about the input values, a description of the value that is returned, and the rationale for decisions made about implementation.\nDocumentation in roxygen2 is placed immediately before the function definition, and is indicated by a special comment line that always starts with the characters #'. Here’s a documented version of a function:\n\n#' Convert temperature values from Fahrenheit to Celsius\n#'\n#' @param fahr Numeric or numeric vector in degrees Fahrenheit\n#' \n#' @return Numeric or numeric vector in degrees Celsius\n#' @export\n#' \n#' @examples\n#' fahr_to_celsius(32)\n#' fahr_to_celsius(c(32, 212, 72))\n\nfahr_to_celsius &lt;- function(fahr) {\n  celsius &lt;- (fahr - 32) * 5/9\n  return(celsius)\n}\n\nNote the use of the @param keyword to define the expectations of input data, and the @return keyword for defining the value that is returned from the function. The @examples function is useful as a reminder as to how to use the function. Finally, the @export keyword indicates that, if this function were added to a package, then the function should be available to other code and packages to utilize.\n\n\n\n\n\n\nCheck it out: Function Documentation Section from R Packages (2e)\n\n\n\nFor more best practices on function documentation, review Hadley Wickham and Jennifer Bryan’s online book R Packages (2e) - Chapter 10, Section 16: Function Documentation.\n\n\n\n\n17.1.4 Exercise: Minimizing Work with Functions\nFunctions can of course be as simple or complex as needed. They can be be very effective in repeatedly performing calculations, or for bundling a group of commands that are used on many different input data sources. For example, we might create a simple function that takes Fahrenheit temperatures as input, and calculates both Celsius and Kelvin temperatures. All three values are then returned in a list, making it very easy to create a comparison table among the three scales.\n\nconvert_temps &lt;- function(fahr) {\n  celsius &lt;- (fahr - 32) * 5/9\n  kelvin &lt;- celsius + 273.15\n  return(list(fahr = fahr, celsius = celsius, kelvin = kelvin))\n}\n\ntemps_df &lt;- data.frame(convert_temps(seq(-100,100,10)))\n\n\n\n\n\n\n\nOnce we have a dataset like that, we might want to plot it. One thing that we do repeatedly is set a consistent set of display elements for creating graphs and plots. By using a function to create a custom ggplot theme, we can enable to keep key parts of the formatting flexible. For example, in the custom_theme function, we provide a base_size argument that defaults to using a font size of 9 points. Because it has a default set, it can safely be omitted. But if it is provided, then that value is used to set the base font size for the plot.\n\ncustom_theme &lt;- function(base_size = 9) {\n    ggplot2::theme(\n      text             = ggplot2::element_text(family = 'Helvetica', \n                                               color = 'gray30', \n                                               size = base_size),\n      plot.title       = ggplot2::element_text(size = ggplot2::rel(1.25), \n                                               hjust = 0.5, \n                                               face = 'bold'),\n      panel.background = ggplot2::element_blank(),\n      panel.border     = ggplot2::element_blank(),\n      panel.grid.minor = ggplot2::element_blank(),\n      panel.grid.major = ggplot2::element_line(colour = 'grey90', \n                                               linewidth = 0.25),\n      legend.position  = 'right',\n      legend.key       = ggplot2::element_rect(colour = NA, \n                                               fill = NA),\n      axis.ticks       = ggplot2::element_blank(),\n      axis.line        = ggplot2::element_blank()\n      )\n}\n\nlibrary(ggplot2)\n\nggplot(temps_df, mapping = aes(x = fahr, y = celsius, color = kelvin)) +\n    geom_point() +\n    custom_theme(10)\n\n\n\n\n\n\n\n\nIn this case, we set the font size to 10, and plotted the air temperatures. The custom_theme function can be used anywhere that one needs to consistently format a plot.\nBut we can go further. One can wrap the entire call to ggplot in a function, enabling one to create many plots of the same type with a consistent structure. For example, we can create a scatterplot function that takes a data frame as input, along with a point_size for the points on the plot, and a font_size for the text.\n\nscatterplot &lt;- function(df, point_size = 2, font_size = 9) {\n  ggplot(df, mapping = aes(x = fahr, y = celsius, color = kelvin)) +\n    geom_point(size = point_size) +\n    custom_theme(font_size)\n}\n\nCalling that let’s us, in a single line of code, create a highly customized plot but maintain flexibility via the arguments passed in to the function. Let’s set the point size to 3 and font to 16 to make the plot more legible.\n\nscatterplot(temps_df, point_size = 3, font_size = 16)\n\n\n\n\n\n\n\n\nOnce these functions are set up, all of the plots built with them can be reformatted by changing the settings in just the functions, whether they were used to create 1, 10, or 100 plots.\n\n\n17.1.5 Summary\n\nFunctions are useful to reduce redundancy, reuse code, and reduce errors\nBuild functions with function()\nDocument functions with roxygen2 comments\n\n\n\n\n\n\n\nWorkflow for Creating Functions\n\n\n\n\nHave a clear goal (sometimes it helps to create a visual).\nOutline the plan and then add more detailed steps or tasks.\nBuild it up bit-by-bit and start with a minimum viable example. As your function becomes more complex, it can harder to track all the bits.\nAlways check intermediates!",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Writing Functions and Packages</span>"
    ]
  },
  {
    "objectID": "session_17.html#r-packages",
    "href": "session_17.html#r-packages",
    "title": "17  Writing Functions and Packages",
    "section": "17.2 R Packages",
    "text": "17.2 R Packages\nMost R users are familiar with loading and utilizing packages in their work. And they know how rich CRAN is in providing for many conceivable needs. Most people have never created a package for their own work, and most think the process is too complicated. Really it’s pretty straighforward and super useful in your personal work. Creating packages serves two main use cases:\n\nMechanism to redistribute reusable code (even if just for yourself)\nMechanism to reproducibly document analysis and models and their results\n\nEven if you don’t plan on writing a package with such broad appeal such as, say, ggplot2 or dplyr, you still might consider creating a package to contain:\n\nUseful utility functions you write (i.e. a Personal Package). Having a place to put these functions makes it much easier to find and use them later.\nA set of shared routines for your lab or research group, making it easier to remain consistent within your team and also to save time.\nThe analysis accompanying a thesis or manuscript, making it all that much easier for others to reproduce your results.\n\n\n\n\n\n\n\nPackages for Creating and Maintaining Packages\n\n\n\nThe usethis, devtools and roxygen2 packages make creating and maintining a package to be a straightforward experience.\n\n\n\n17.2.1 Create a Basic Package\nTo create a package we’re going to use the following packages:\n\ndevtools: Provides R functions that make package development easier by expediting common development tasks.\nusethis: Commonly referred to as a “workflow package” and provides functions that automate common tasks in project setup and development for both R packages and non-package projects.\nroxygen2: Provides a structure for describing your functions in the scripts you’re creating them in. It will additionally process the source code and the documentation within it to automatically create the necessary files for the documentation to appear in your R Package.\n\nThanks to the great usethis package, it only takes one function call to create the skeleton of an R package using create_package(). Which eliminates pretty much all reasons for procrastination. To create a package called mytools, all you do is:\n\nusethis::create_package(\"~/mytools\")\n\n✔ Creating '/home/dolinh/mytools/'\n✔ Setting active project to '/home/dolinh/mytools'\n✔ Creating 'R/'\n✔ Writing 'DESCRIPTION'\nPackage: mytools\nTitle: What the Package Does (One Line, Title Case)\nVersion: 0.0.0.9000\nAuthors@R (parsed):\n    * First Last &lt;first.last@example.com&gt; [aut, cre] (YOUR-ORCID-ID)\nDescription: What the package does (one paragraph).\nLicense: `use_mit_license()`, `use_gpl3_license()` or friends to\n    pick a license\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.2.3\n✔ Writing 'NAMESPACE'\n✔ Writing 'mytools.Rproj'\n✔ Adding '^mytools\\\\.Rproj$' to '.Rbuildignore'\n✔ Adding '.Rproj.user' to '.gitignore'\n✔ Adding '^\\\\.Rproj\\\\.user$' to '.Rbuildignore'\n✔ Opening '/home/dolinh/mytools/' in new RStudio session\n✔ Setting active project to '&lt;no active project&gt;'\n\n\n\n\n\n\nWhat did the create_package() function do?\n\n\n\n\nOpen a new project called mytools (the name of the package) in a new RStduio session.\nCreate a top-level directory structure, including a number of critical files under the standard R package structure:\n\nDESCRIPTIONfile: The most important file, which provides metadata about your package. Edit this file to provide reasonable values for each of the fields, including your contact information.\nNAMESPACE file declares the functions your package exports for external use and the external functions your package imports from other packages.\nR/ directory is where you save all your function scripts and other .R files.\n.Rbuildignore lists files that we need to have around but that should not be included when building the R package from source.\n.Rproj.user is a directory used internally by RStudio.\n\nAdd the Build Tab to the Environment Pane.\n\n\n\n\n\n17.2.2 Add a License\nInformation about choosing a LICENSE is provided in the R Package (2e) book Chapter 12: Licensing.\nThe DESCRIPTION file expects the license to be chose from a predefined list, but you can use its various utility methods for setting a specific license file, such as the MIT license or the Apache 2 license:\n\nusethis::use_apache_license()\n\n✔ Setting License field in DESCRIPTION to 'Apache License (&gt;= 2.0)'\n✔ Writing 'LICENSE.md'\n✔ Adding '^LICENSE\\\\.md$' to '.Rbuildignore'\nOnce your license has been chosen, and you’ve edited your DESCRIPTION file with your contact information, a title, and a description, it will look like this:\n\n\n\n\n\n\nPackage: mytools\nTitle: Halina Do-Linh's Utility R Functions\nVersion: 0.0.0.9000\nAuthors@R: \n    person(\"Halina\", \"Do-Linh\", email = \"dolinh@nceas.ucsb.edu\", role = c(\"aut\", \"cre\"),\n           comment = c(ORCID = \"YOUR-ORCID-ID\"))\nDescription: A collection of useful R functions that I use for general utilities.\nLicense: Apache License (&gt;= 2)\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.2.3\n\n\n\n\n\n17.2.3 Add Code\nThe skeleton package created contains a directory R which should contain your source files. Add your functions and classes in files to this directory, attempting to choose names that don’t conflict with existing packages. For example, you might add a file custom_theme that contains a function custom_theme() that you might want to reuse. The usethis::use_r() function will help set up you files in the right places. For example, running:\n\nusethis::use_r(\"custom_theme\")\n\n✔ Setting active project to '/home/dolinh/mytools'\n• Modify 'R/custom_theme.R'\n• Call `use_test()` to create a matching test file\ncreates the file R/custom_theme and stores it in the R directory, which you can then modify as needed:\n\ncustom_theme &lt;- function(base_size = 9) {\n    ggplot2::theme(\n      axis.ticks       = ggplot2::element_blank(),\n      text             = ggplot2::element_text(family = 'Helvetica', \n                                               color = 'gray30', \n                                               size = base_size),\n      plot.title       = ggplot2::element_text(size = ggplot2::rel(1.25), \n                                               hjust = 0.5, \n                                               face = 'bold'),\n      panel.background = ggplot2::element_blank(),\n      legend.position  = 'right',\n      panel.border     = ggplot2::element_blank(),\n      panel.grid.minor = ggplot2::element_blank(),\n      panel.grid.major = ggplot2::element_line(colour = 'grey90', \n                                               linewidth = .25),\n      legend.key       = ggplot2::element_rect(colour = NA, \n                                               fill = NA),\n      axis.line        = ggplot2::element_blank()\n      )\n}\n\n\n\n\n\n\n\nPower of Packages\n\n\n\nRemember when we created custom_theme() from the Functions Lesson Section 15.1.4? Now that we’ve added it to our mytools package, we don’t have to worry about coyping the code from another file, sourcing the file from another directory, or copying the script from an R Project.\nInstead we can leverage the portable functionality of a package to easily access our custom functions and maintain the code in one location.\n\n\n\n\n17.2.4 Add Dependencies\nIf your R code depends on functions from another package, you must declare it. In the Imports section in the DESCRIPTION file, list all the packages your functions depend upon.\nIn our custom_theme() function, we depend on the ggplot2 package, and so we need to list it as a dependency.\nOnce again, usethis provides a handy helper method:\n\nusethis::use_package(\"ggplot2\")\n\n✔ Adding 'ggplot2' to Imports field in DESCRIPTION\n• Refer to functions with `ggplot2::fun()`\nTake a look at the DESCRIPTION file again, and you’ll see the Imports section has been added, with ggplot2 underneath.\n\n\n\n\n\n\nPackage: mytools\nTitle: Halina Do-Linh's Utility R Functions\nVersion: 0.0.0.9000\nAuthors@R: \n    person(\"Halina\", \"Do-Linh\", email = \"dolinh@nceas.ucsb.edu\", role = c(\"aut\", \"cre\"),\n           comment = c(ORCID = \"YOUR-ORCID-ID\"))\nDescription: A collection of useful R functions that I use for general utilities.\nLicense: Apache License (&gt;= 2)\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.2.3\nImports: \n    ggplot2\n\n\n\n\n\n17.2.5 Add Documentation\nDocumentation is crucial to add to each of your functions. In the Functions Lesson, we did this using the roxygen2 package and that same package and approach can be used for packages.\nThe roxygen2 approach allows us to add comments in the source code, where are then converted into Help pages that we can access by typing ?function_name in the Console.\nLet’s add documentation for the custom_theme() function.\n\n#' My custom ggplot theme\n#'\n#' @param base_size Numeric value of font size of all text elements in plot\n#'\n#' @return A theme used for ggplot point or line plots\n#' @export\n#'\n#' @examples\n#' library(ggplot2)\n#' \n#'   ggplot(data = mtcars, aes(x = mpg, y = disp)) +\n#'     geom_point() +\n#'     custom_theme(base_size = 30)\ncustom_theme &lt;- function(base_size = 9) {\n  ggplot2::theme(\n    axis.ticks       = ggplot2::element_blank(),\n    text             = ggplot2::element_text(family = 'Helvetica',\n                                             color = 'gray30',\n                                             size = base_size),\n    plot.title       = ggplot2::element_text(size = ggplot2::rel(1.25),\n                                             hjust = 0.5,\n                                             face = 'bold'),\n    panel.background = ggplot2::element_blank(),\n    legend.position  = 'right',\n    panel.border     = ggplot2::element_blank(),\n    panel.grid.minor = ggplot2::element_blank(),\n    panel.grid.major = ggplot2::element_line(colour = 'grey90',\n                                             linewidth = .25),\n    legend.key       = ggplot2::element_rect(colour = NA,\n                                             fill = NA),\n    axis.line        = ggplot2::element_blank()\n  )\n}\n\nOnce your files are documented, you can then process the documentation using devtools::document() to generate the appropriate .Rd files that your package needs. The .Rd files will appear in the man/ directory, which is automatically created by devtools::document().\n\ndevtools::document()\n\nℹ Updating mytools documentation\nℹ Loading mytools\nWriting custom_theme.Rd\nWe now have a package that we can check() and install() and release(). These functions come from the devtools package, but first let’s do some testing.\n\n\n17.2.6 Testing\nYou can test your code using the testthat package’s testing framework. The ussethis::use_testthat() function will set up your package for testing, and then you can use the use_test() function to setup individual test files. For example, in the Functions Lesson we created some tests for our fahr_to_celsius functions but ran them line by line in the console.\nFirst, lets add that function to our package. Run the use_r function in the console:\n\nusethis::use_r(\"fahr_to_celsius\")\n\nThen copy the function and documentation into the R script that opens and save the file.\n\n#' Convert temperature values from Fahrenheit to Celsius\n#'\n#' @param fahr Numeric or numeric vector in degrees Fahrenheit\n#' \n#' @return Numeric or numeric vector in degrees Celsius\n#' @export\n#' \n#' @examples\n#' fahr_to_celsius(32)\n#' fahr_to_celsius(c(32, 212, 72))\n\nfahr_to_celsius &lt;- function(fahr) {\n  celsius &lt;- (fahr-32)*5/9\n  return(celsius)\n}\n\nNow, set up your package for testing:\n\nusethis::use_testthat()\n\n✔ Setting active project to '/home/dolinh/mytools'\n✔ Adding 'testthat' to Suggests field in DESCRIPTION\n✔ Setting Config/testthat/edition field in DESCRIPTION to '3'\n✔ Creating 'tests/testthat/'\n✔ Writing 'tests/testthat.R'\n• Call `use_test()` to initialize a basic test file and open it for editing.\nThen write a test for fahr_to_celsius:\n\nusethis::use_test(\"fahr_to_celsius\")\n\n✔ Writing 'tests/testthat/test-fahr_to_celsius.R'\n• Modify 'tests/testthat/test-fahr_to_celsius.R'\nYou can now add tests to the test-fahr_to_celsius.R, and you can run all of the tests using devtools::test(). For example, if you add a test to the test-fahr_to_celsius.R file:\n\ntest_that(\"fahr_to_celsius works\", {\n  expect_equal(fahr_to_celsius(32), 0)\n  expect_equal(fahr_to_celsius(212), 100)\n})\n\nThen you can run the tests to be sure all of your functions are working using devtools::test():\n\ndevtools::test()\n\nℹ Testing mytools\n✔ | F W S  OK | Context\n✔ |         2 | fahr_to_celsius [0.2s]                                                                                             \n\n══ Results ════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════\nDuration: 0.4 s\n\n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 2 ]\nYay, all tests passed!\n\n\n17.2.7 Checking and Installing\nNow that you’ve completed testing your package, you can check it for consistency and completeness using devtools::check().\n\ndevtools::check()\n\n══ Documenting ════════════════════════════════════════════════════════════════════════════════════════════════════════════════════\nℹ Updating mytools documentation\nℹ Loading mytools\n\n══ Building ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════\nSetting env vars:\n• CFLAGS    : -Wall -pedantic -fdiagnostics-color=always\n• CXXFLAGS  : -Wall -pedantic -fdiagnostics-color=always\n• CXX11FLAGS: -Wall -pedantic -fdiagnostics-color=always\n• CXX14FLAGS: -Wall -pedantic -fdiagnostics-color=always\n• CXX17FLAGS: -Wall -pedantic -fdiagnostics-color=always\n• CXX20FLAGS: -Wall -pedantic -fdiagnostics-color=always\n── R CMD build ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n✔  checking for file ‘/home/dolinh/mytools/DESCRIPTION’ (610ms)\n─  preparing ‘mytools’:\n✔  checking DESCRIPTION meta-information (338ms)\n─  checking for LF line-endings in source and make files and shell scripts\n─  checking for empty or unneeded directories\n─  building ‘mytools_0.0.0.9000.tar.gz’\n   \n══ Checking ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════\nSetting env vars:\n• _R_CHECK_CRAN_INCOMING_REMOTE_               : FALSE\n• _R_CHECK_CRAN_INCOMING_                      : FALSE\n• _R_CHECK_FORCE_SUGGESTS_                     : FALSE\n• _R_CHECK_PACKAGES_USED_IGNORE_UNUSED_IMPORTS_: FALSE\n• NOT_CRAN                                     : true\n── R CMD check ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n─  using log directory ‘/tmp/Rtmp1UgqFD/file6d79323df6fae/mytools.Rcheck’ (649ms)\n─  using R version 4.2.2 (2022-10-31)\n─  using platform: x86_64-pc-linux-gnu (64-bit)\n─  using session charset: UTF-8\n─  using options ‘--no-manual --as-cran’\n✔  checking for file ‘mytools/DESCRIPTION’\n─  this is package ‘mytools’ version ‘0.0.0.9000’\n─  package encoding: UTF-8\n✔  checking package namespace information\n✔  checking package dependencies (2.1s)\n✔  checking if this is a source package\n✔  checking if there is a namespace\n✔  checking for executable files\n✔  checking for hidden files and directories\n✔  checking for portable file names\n✔  checking for sufficient/correct file permissions\n✔  checking serialization versions\n✔  checking whether package ‘mytools’ can be installed (3.2s)\n✔  checking installed package size\n✔  checking package directory\n✔  checking for future file timestamps (412ms)\n✔  checking DESCRIPTION meta-information (584ms)\n✔  checking top-level files ...\n✔  checking for left-over files\n✔  checking index information\n✔  checking package subdirectories ...\n✔  checking R files for non-ASCII characters ...\n✔  checking R files for syntax errors ...\n✔  checking whether the package can be loaded (481ms)\n✔  checking whether the package can be loaded with stated dependencies ...\n✔  checking whether the package can be unloaded cleanly ...\n✔  checking whether the namespace can be loaded with stated dependencies ...\n✔  checking whether the namespace can be unloaded cleanly (450ms)\n✔  checking loading without being on the library search path (522ms)\n✔  checking dependencies in R code (1.2s)\n✔  checking S3 generic/method consistency (1s)\n✔  checking replacement functions ...\n✔  checking foreign function calls ...\n✔  checking R code for possible problems (5.2s)\n✔  checking Rd files (449ms)\n✔  checking Rd metadata ...\n✔  checking Rd line widths ...\n✔  checking Rd cross-references ...\n✔  checking for missing documentation entries ...\n✔  checking for code/documentation mismatches (885ms)\n✔  checking Rd \\usage sections (1.3s)\n✔  checking Rd contents ...\n✔  checking for unstated dependencies in examples ...\n✔  checking examples (2.7s)\n✔  checking for unstated dependencies in ‘tests’ ...\n─  checking tests (418ms)\n✔  Running ‘testthat.R’ (1.4s)\n✔  checking for non-standard things in the check directory\n✔  checking for detritus in the temp directory\n   \n   \n── R CMD check results ──────────────────────────────────────────────────────────────────────────────────── mytools 0.0.0.9000 ────\nDuration: 27.3s\n\n0 errors ✔ | 0 warnings ✔ | 0 notes ✔\nThen you can install it locally using devtools::install(), which needs to be run from the parent directory of your module\n\ndevtools::install()\n\n── R CMD build ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n✔  checking for file ‘/home/dolinh/mytools/DESCRIPTION’ (541ms)\n─  preparing ‘mytools’:\n✔  checking DESCRIPTION meta-information ...\n─  checking for LF line-endings in source and make files and shell scripts\n─  checking for empty or unneeded directories\n─  building ‘mytools_0.0.0.9000.tar.gz’\n   \nRunning /opt/R/4.2.2/lib/R/bin/R CMD INSTALL /tmp/Rtmp1UgqFD/mytools_0.0.0.9000.tar.gz --install-tests \n* installing to library ‘/home/dolinh/R/x86_64-pc-linux-gnu-library/4.2’\n* installing *source* package ‘mytools’ ...\n** using staged installation\n** R\n** tests\n** byte-compile and prepare package for lazy loading\n** help\n*** installing help indices\n** building package indices\n** testing if installed package can be loaded from temporary location\n** testing if installed package can be loaded from final location\n** testing if installed package keeps a record of temporary installation path\n* DONE (mytools)\nAfter installing, your package is now available for use in your local environment, yay!\n\n\n\n\n\n\nCheck out the Build Tab\n\n\n\nRemember when we ran usethis::create_package() and after we ran it we saw the Build Tab added to the Environment pane?\nIn the Build Tab, each of the buttons correspond with one of the devtools functions we ran, meaning:\n\nTest button is equivalent to running devtools::test() in the Console\nCheck button is equivalent to running devtools::check() in the Console\nInstall button is equivalent to running devtools::install() in the Console\n\n\n\n\n\n17.2.8 Sharing and Releasing\n\nGitHub: The simplest way to share your package with others is to upload it to a GitHub repository, which allows others to install your package using the install_github('mytools','github_username') function from devtools.\nCRAN: If your package might be broadly useful, also consider releasing it to CRAN, using the release() method from devtools(). Releasing a package to CRAN requires a significant amount of work to ensure it follows the standards set by the R community, but it is entirely tractable and a valuable contribution to the science community. If you are considering releasing a package more broadly, you may find that the supportive community at ROpenSci provides incredible help and valuable feeback through their onboarding process.\nR-Universe: A newer approach is to link your package release to R-Universe, which is an effective way to make it easy to test and maintain packages so that many people can install them using the familiar install.pacakges() function in R. In R-Universe, people and organizations can create their own universe of packages, which represent a collection of packages that appear as a CRAN-compatible repository in R. For example, for DataONE we maintain the DataONE R-Universe, which lists the packages we actively maintain as an organization. So, any R-user that wants to install these packages can do so by adding our universe to their list of repositories, and then installing packages as normal. For example, to install the codyn package, one could use:\n\n\ninstall.packages('codyn', repos = c('https://dataoneorg.r-universe.dev', 'https://cloud.r-project.org'))\n\n\n\n17.2.9 Exercise: Add More Functions\nAdd additional temperature conversion functions to the mytools package and:\n\nAdd full documentation for each function\nWrite tests to ensure the functions work properly\nRebuild the package using document(), check(), and install()\n\n\n\n\n\n\n\nDon’t forget to update the version number before you install!\n\n\n\nVersion information is located in the DESCRIPTION file and when you first create a package the version is 0.0.0.9000.\nThis version number follows the format major.minor.patch.dev. The different parts of the version represent different things:\n\nMajor: A significant change to the package that would be expected to break users code. This is updated very rarely when the package has been redesigned in some way.\nMinor: A minor version update means that new functionality has been added to the package. It might be new functions to improvements to existing functions that are compatible with most existing code.\nPatch: Patch updates are bug fixes. They solve existing issues but don’t do anything new.\nDev: Dev versions are used during development and this part is missing from release versions. For example you might use a dev version when you give someone a beta version to test. A package with a dev version can be expected to change rapidly or have undiscovered issues.\n\nAfter you’ve made some changes to a package, but before you install run the code:\n\nusethis::use_version()\n\nCurrent version is 0.0.0.9000.\nWhat should the new version be? (0 to exit) \n\n1: major --&gt; 1.0.0\n2: minor --&gt; 0.1.0\n3: patch --&gt; 0.0.1\n4:   dev --&gt; 0.0.0.9001\nSince we’re adding new functions, we can consider this a minor change and can select option 2.\nSelection: 2\n✔ Setting Version field in DESCRIPTION to '0.1.0'\nSource: COMBINE’s R package workshop, Ch 9: Versioning\n\n\n\n\n17.2.10 Additional Resources\n\nHadley Wickham and Jenny Bryan’s awesome book: R Packages\nROpenSci Blog Post: How to create your personal CRAN-like repository on R-universe\nKarl Broman’s: R package primer: a minimal tutorial on writing R packages\nThomas Westlake’s Short Tutorial: Writing an R package from scratch (his post is an updated version of Hilary Parker’s blog post)",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Writing Functions and Packages</span>"
    ]
  },
  {
    "objectID": "session_21.html",
    "href": "session_21.html",
    "title": "21  Reproducibility & Provenance",
    "section": "",
    "text": "Learning Objectives",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Reproducibility & Provenance</span>"
    ]
  },
  {
    "objectID": "session_21.html#learning-objectives",
    "href": "session_21.html#learning-objectives",
    "title": "21  Reproducibility & Provenance",
    "section": "",
    "text": "Discuss the concept of reproducible workflows including computational reproducibility and provenance metadata\nLearn how to use R to package your work by building a reproducible paper in RMarkdown/Quarto\nIntroduce tools and techniques for reproducibility supported by the NCEAS and DataONE\n\n\n\n\n\n\n\n\nTip\n\n\n\nIn this lesson, we will be leveraging RMarkdown instead of Quarto so that we can use a very cool R package called rticles. Quarto has the same functionality as RMarkdown with rticles - making journal formatted articles from a code notebook - but it is done from the command line without additional R packages. See the Quarto documentation for details\n\n\n\n21.0.1 Reproducible Research: Recap\nWorking in a reproducible manner:\n\nIncreases research efficiency, accelerating the pace of your research and collaborations.\nProvides transparency by capturing and communicating scientific workflows.\nEnables research to stand on the shoulders of giants (build on work that came before).\nAllows credit for secondary usage and supports easy attribution.\nIncreases trust in science.\n\nTo enable others to fully interpret, reproduce or build upon our research, we need to provide more comprehensive information than is typically included in a figure or publication. The methods sections of papers are typically inadequate to fully reproduce the work described in the paper.\n\nFor example, if we look at the figure above convey multiple messages. But, by looking at the figure we don’t get the full story how did scientist got to make this plot. What data were used in this study? What methods applied? What were the parameter settings? What documentation or code are available to us to evaluate the results? Can we trust these data and methods? Are the results reproducible?\nComputational reproducibility is the ability to document data, analyses, and models sufficiently for other researchers to be able to understand and ideally re-execute the computations that led to scientific results and conclusions.\nPractically speaking, reproducibility includes:\n\nPreserving the data\nPreserving the software workflow\nDocumenting what you did\nDescribing how to interpret it all\n\nA recent study of publicly-available datasets in the Harvard Database repository containing R files found that only 26% of R files ran without error in the initial execution. 44% were able to be run after code cleaning, showing the importance of good programming practice (Trisovic et al. 2022). The figure below from Trisovic et al. shows a sankey diagram of how code cleaning was able to fix common errors.\n\n\n\n21.0.2 Computational Provenance and Workflows\nComputational provenance refers to the origin and processing history of data including:\n\nInput data\nWorkflow/scripts\nOutput data\nFigures\nMethods, dataflow, and dependencies\n\nWhen we put these all together with formal documentation, we create a computational workflow that captures all of the steps from initial data cleaning and integration, through analysis, modeling, and visualization. In other words, computational provenance is a formalized description of a workflow from the origin of the data to it’s final outcome.\nHere’s an example of a computational workflow from Mark Carls: Mark Carls. Analysis of hydrocarbons following the Exxon Valdez oil spill, Gulf of Alaska, 1989 - 2014. Gulf of Alaska Data Portal. urn:uuid:3249ada0-afe3-4dd6-875e-0f7928a4c171., that represents a three step workflow comprising four source data files and two output visualizations.\n\n\nThis image is a screenshot of an interactive user interface of a workflow built by DataONE. You can clearly see which data files were inputs to the process, the scripts that are used to process and visualize the data, and the final output objects that are produced, in this case two graphical maps of Prince William Sound in Alaska.\n\n\n21.0.3 From Provenance to Reproducibility\n\nDataONE provides a tool to track and visualize provenance. It facilitates reproducible science through provenance by:\n\nTracking data derivation history\nTracking data inputs and outputs of analyses\nPreserving and documenting software workflows\nTracking analysis and model executions\nLinking all of these to publications\n\n\nOne way to illustrate this is to look into the structure of a data package. A data package is the unit of publication of your data, including datasets, metadata, software and provenance. The image below represents a data package and all it’s components and how these components relate to each other.\n\n\n\n\n21.0.4 Data Citation and Transitive Credit\nWe want to move towards a model such that when a user cites a research publication we will also know:\n\nWhich data produced it\nWhat software produced it\nWhat was derived from it\nWho to credit down the attribution stack\n\n\nThis is transitive credit. And it changes the way in which we think about science communication and traditional publications.\n\n\n21.0.5 Reproducible Papers with rrtools\nA great overview of this approach to reproducible papers comes from:\n\nBen Marwick, Carl Boettiger & Lincoln Mullen (2018) Packaging Data Analytical Work Reproducibly Using R (and Friends), The American Statistician, 72:1, 80-88, doi:10.1080/00031305.2017.1375986\n\nThe key idea in Marwick et al. (2018) is that of the research compendium: A single container for not just the journal article associated with your research but also the underlying analysis, data, and even the required software environment required to reproduce your work.\nResearch compendium makes it easy for researchers to do their work but also for others to inspect or even reproduce the work because all necessary materials are readily at hand due to being kept in one place. Rather than a constrained set of rules, the research compendium is a scaffold upon which to conduct reproducible research using open science tools such as:\n\nR\nRMarkdown\nQuarto\ngit and GitHub\n\nFortunately for us, Ben Marwick (and others) have written an R package called rrtools that helps us create a research compendium from scratch.\n\n\n\n\n\n\nSet up\n\n\n\nTo start a reproducible paper with rrtools:\n\nClose your username-training project. Go to the project switcher dropdown, just click “close project.” This will set your working directory back to your home directory.\nIn console run the following line of code\n\n\n## \"mypaper\" is the name of the Rproj with my research compendia\nrrtools::use_compendium(\"mypaper\")\n\nrrtools has created the beginnings of a research compendium for us. The structure of this compendium is similar to the one needed to built an R package. That’s because it uses the same underlying folder structure and metadata and therefore it technically is an R package (called mypaper). And this means our research compendium could be easy to install in someone elses’ computer, similar to an R package.\n\nrrtools also helps you set up some key information like:\n\n\nSet up a README file in the RMarkdown format\nCreate an analysis folder to hold our reproducible paper\n\n\nrrtools::use_readme_rmd()\nrrtools::use_analysis()\n\nThis creates a standard, predictable layout for our code and data and outputs that multiple people can understand. At this point, we’re technically ready to start writing the paper. But.. What about GitHub?\n\n\n\n21.0.5.1 Creating a git and GitHub repository with usethis\n\nusethis is a package that facilitates interactive workflows for R project creation and development. It automates repetitive tasks that arise during project setup and development.\n\nWe are going to use two functions to start tracking our work in git, create a remote repository in GitHub and be able to push and pull between the local version and the remote. To learn more about this package checkout the package documentation.\n\n\n\n\n\n\nSet up\n\n\n\n\nMake sure your are in “mypaper” Rproj.\nIn the Console run usethis::use_git() to create a local git repo. Choose yes to both questions when prompted (to commit files, and to restart R).\nThen, in the Console, run usethis::use_github() to create an upstream remote repo (in GitHub).\n\nAnd that’s it! Now your have your research compendium in your local computer and your changes are being tracked by git and your can pull and push to GitHub.\n\n\nLet’s explore the structure rrtools has put in place for us. Inside the analysis folder we have 5 folders. Different parts of our project will go into this different folders. Our data into the data folder, when the time comes to save any figure, we should save them into the figures folder, and so on.\n\n\n\nResearch compendia from Marwick et al.\n\n\nYou’ll notice a analysis/templates directory that contains journal citation style language (CSL) files which set the style of citations and reference list for the journal (the Journal of Archaeological Science, in this example). The template.Rmd renders into the template.docx. This document is called in the paper.qmd YAML to style the output of the paper created in paper.qmd.\nWhat if I want a template from another journal, different from the Journal of Archeological Science? We can create other journal’s template with the rticles package. This package will provide the templates and necessary information to render your paper in the journal of your choice (note: not all journal are in the rticles package). With that in mind, we will delete the existing paper directory and create a new one shortly.\n\n\n\n21.0.6 RMarkdown templates with rticles\nThe rticles package provides a lot of other great templates for formatting your paper specifically to the requirements of many journals. In addition to a custom CSL file for reference customization, rticles supports custom LATeX templates that fit the formatting requirements of each journals.\n\n\n\n\n\n\nTinytex and rendering to PDF\n\n\n\nTo be able to render your document to PDF you need to have tinytex installed in your machine.\nIn the console run:\n\ninstall.packages('tinytex') ## this package is already installed in our server\n\ntinytex::install_tinytex() ## this may take several minutes\n\n\n\n\n\n\n\n\n\nSet up\n\n\n\n\nIf you do not have rticle installed, go aherad and inatall calling the following function in the console: install.packages('rticles') Restart your RStudio session\nTo create a new file from rticlescustom templates, got to File | New File | R Markdown... menu, which shows the following dialog:\n\n\n\nGo to “From Template” in the left side menu.\nSelect the “PNAS” template, give the file a name and set the location of the files to be mypaper/analysis, and click “OK”.\nYou can now Knit the Rmd file to see a highly-targeted article format, like this one for PNAS:\n\n\n\n\n\n\n21.0.7 Workflow in a nutshell\n\n\n\n\n\n\nSummary\n\n\n\n\nUse rrtools to generate the core directory layout and approach to data handling.\nThen use rticles to create the structure of the paper itself. The combination is incredibly flexible.\n\n\n\nThings we can do with our research compendium:\n\nEdit ./analysis/paper/paper.Rmd to begin writing your paper and your analysis in the same document\nAdd any citations to ./analysis/paper/pnas-sample.bib\nAdd any longer R scripts that don’t fit in your paper in an R folder at the top level\nAdd raw data to ./data/raw_data\nWrite out any derived data (generated in paper.Rmd) to ./data/derived_data\nWrite out any figures in ./analysis/figures\n\nYou can then write all of your R code in your RMarkdown/Quarto, and generate your manuscript all in the format needed for your journal (using it’s .csl file, stored in the paper directory).\n\n\n21.0.8 Adding renv to conserve your environment\n\nrrtools has a couple more tricks up it’s sleeve to help your compendium be as reproducible and portable as possible.\nTo capture the R packages and versions this project depends on, we can use the renv package.\nRunning renv::init(), will initiate tracking of the R packages in your project.\nThis action will create a new folder called renv in your top directory.\nrenv::init() automatically detects dependencies in your code (by looking for library calls, at the DESCRIPTION file, etc.) and installs them to a private project specific library. This means that your project mypaper can use a different version of dplyr than another project which may need an older version without any hassle.\nrenv also write the package dependencies to a special file in the repository called renv.lock.\nIf any of your packages you are using is updated, while your are working on your project, you can run renv::snapshot() to update the renv.lock file and your project-installed packages.\nYou can read the renv.lock file using renv::restore(), when needed. This will install the versions of the packages needed.\n\n\n\n21.0.9 Conserve your computational environement with Docker\n\nThe rrtools package then uses this renv.lock file to build what is called a Dockerfile.\nDocker allows you to build containers, a standard unit of software that packages up code and all its dependencies so an application runs quickly and reliably from one computing environment to another.\nA container is an “image” of all the software specified, and this image can be run on other computers such that the software stack looks exactly as you specify.\nThis is important when it comes to reproducibility, because when running someone else code, you may get different results or errors if you are using different versions of software (like an old version of dplyr).\nA Dockerfile contains the instructions for how to recreate the computational environment where your analysis was run.\n\nIn practice\n\nOnce you have your research compendium, you can called rrtools::use_dockerfile(). If needed, re-install rrtools directly from GitHub remotes::install_github(\"benmarwick/rrtools\")\nThis, first creates a Dockerfile that loads a standard image for using R with the tidyverse,\nAnd then has more instructions for how to create the environment so that it has the very specific R packages and versions you need.\nIf we look at the Dockerfile (example below), it calls to renv::restore(), as described above.\nThe last line of the docker file renders our Quarto/RMarkdown reproducible paper!\n\n# get the base image, the rocker/verse has R, RStudio and pandoc\nFROM rocker/verse:4.2.2\n\n# required\nMAINTAINER Your Name &lt;your_email@somewhere.com&gt;\n\nCOPY . /&lt;REPO&gt;\n\n# go into the repo directory\nRUN . /etc/environment \\\n  # Install linux depedendencies here\n  # e.g. need this for ggforce::geom_sina\n  && sudo apt-get update \\\n  && sudo apt-get install libudunits2-dev -y \\\n  # build this compendium package\n  && R -e \"install.packages('remotes', repos = c(CRAN = 'https://cloud.r-project.org'))\" \\\n  && R -e \"remotes::install_github(c('rstudio/renv', 'quarto-dev/quarto-r'))\" \\\n  # install pkgs we need\n  && R -e \"renv::restore()\" \\\n  # render the manuscript into a docx, you'll need to edit this if you've\n  # customised the location and name of your main qmd file\n  && R -e \"quarto::quarto_render('/&lt;REPO&gt;/analysis/paper/paper.qmd')\"\n\nAfter running rrtools::use_dockerfile(), the package also sets up GitHub Actions for you.\nActions are processes that are triggered in GitHub events (like a push) and run automatically.\nIn this case, the Action that is set up will build your Docker image on GitHub.\nThis means that the code that knits your paper is run, and an updated version of your paper is knit.\nThis is called continuous integration, and is extremely convenient for developing products like this, since the build step can be taken care of automatically as you push to your repository.\n\n\n\n\n21.0.10 The 5th Generation of Reproducible Papers\n\nWhole Tale is a project that aims to simplify computational reproducibility. It enables researchers to easily package and share ‘tales’. Tales are executable research objects captured in a standards-based tale format complete with metadata. They can contain:\n\nData (references)\nCode (computational methods)\nNarrative (traditional science story)\nCompute environment (e.g. RStudio, Jupyter)\n\n\nBy combining data, code and the compute environment, tales allow researchers to:\n\nRe-create the computational results from a scientific study\nAchieve computational reproducibility\n“Set the default to reproducible.”\n\nFull circle reproducibility can be achieved by publishing data, code AND the computational environment.\n\n\n21.0.11 Resources\n\nrrtools documentation\nThe rticles\nusethis documentation\n\n\n\n\n\nTrisovic, Ana, Matthew K. Lau, Thomas Pasquier, and Mercè Crosas. 2022. “A Large-Scale Study on Research Code Quality and Execution.” Scientific Data 9 (1). https://doi.org/10.1038/s41597-022-01143-6.",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Reproducibility & Provenance</span>"
    ]
  }
]