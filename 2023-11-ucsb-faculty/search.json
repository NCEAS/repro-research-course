[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "UCSB Faculty Seminar Series: Grow Your Data & Team Science Skills",
    "section": "",
    "text": "Seminar Series Overview\nRemote Sessions November 2023 though February 2024\nHosted by the National Center for Ecological Anlysis and Synthesis (NCEAS) and in partnership with UCSB’s Office of Research, this seminar series is a training program where participants engage in synthesis research in a small cohort. It will equip participants with data science and team science tools, and provide them with a platform to conduct collaborative synthesis research. The overall aim is to grow cross-departmental relationships and interdisciplinary research outputs."
  },
  {
    "objectID": "index.html#nceas-expertise",
    "href": "index.html#nceas-expertise",
    "title": "UCSB Faculty Seminar Series: Grow Your Data & Team Science Skills",
    "section": "NCEAS Expertise",
    "text": "NCEAS Expertise\nNCEAS, a research affiliate of UCSB, is a leading expert on interdisciplinary data science and works collaboratively to answer the world’s largest and most complex questions. The NCEAS approach leverages existing data and employs a team science philosophy to squeeze out all potential insights and solutions efficiently - this is called synthesis science. NCEAS has over 25 years of success with this model among working groups and environmental professionals."
  },
  {
    "objectID": "index.html#full-schedule",
    "href": "index.html#full-schedule",
    "title": "UCSB Faculty Seminar Series: Grow Your Data & Team Science Skills",
    "section": "Full Schedule",
    "text": "Full Schedule\n\n\n\n\n\n\n\n\n\nSession\nDates\nLocation\nTime\n\n\n\n\nSession One\nSeptember 11-15, 2023\nNCEAS\n9:00AM-5:00PM\n\n\nSession Two\nRemote session every second Tuesday throughout October-February\nOctober 10, 2023\n\nNovember 14, 2023\n\nDecember 12, 2023\n\nJanuary 9, 2024\n\nFebruary 13, 2024\nTeach Me How To Google\nFunctions and Packages in R\nWorking with Spatial Data in R\nHow to Manage Dependencies in Projects (e.g. Containers)\nUC Love Data Week + Office Hours with Learning Hub\n3:00PM-5:00PM\n\n\nSession Three\nMarch 25-28, 2024\nNCEAS\n9:00AM-5:00PM"
  },
  {
    "objectID": "index.html#code-of-conduct",
    "href": "index.html#code-of-conduct",
    "title": "UCSB Faculty Seminar Series: Grow Your Data & Team Science Skills",
    "section": "Code of Conduct",
    "text": "Code of Conduct\nBy participating in this activity you agree to abide by the NCEAS Code of Conduct."
  },
  {
    "objectID": "index.html#about-this-book",
    "href": "index.html#about-this-book",
    "title": "UCSB Faculty Seminar Series: Grow Your Data & Team Science Skills",
    "section": "About this book",
    "text": "About this book\nThese written materials are the result of a continuous and collaborative effort at NCEAS to help researchers make their work more transparent and reproducible. This work began in the early 2000’s, and reflects the expertise and diligence of many, many individuals. The primary authors are listed in the citation below, with additional contributors recognized for their role in developing previous iterations of these or similar materials.\nThis work is licensed under a Creative Commons Attribution 4.0 International License.\nCitation: Halina Do-Linh and Camila Vargas Poulsen (2023). UCSB Faculty Seminar Series: Grow Your Data & Team Science Skills. NCEAS Learning Hub. URL learning.nceas.ucsb.edu/2023-11-ucsb-faculty.\nAdditional contributors: Ben Bolker, Amber E. Budden, Julien Brun, Samantha Csik, Natasha Haycock-Chavez, S. Jeanette Clark, Julie Lowndes, Stephanie Hampton, Matthew B. Jones, Samanta Katz, Erin McLean, Bryce Mecum, Deanna Pennington, Karthik Ram, Jim Regetz, Tracy Teal, Daphne Virlar-Knight, Leah Wasser.\nThis is a Quarto book. To learn more about Quarto books visit https://quarto.org/docs/books."
  },
  {
    "objectID": "session_01.html#create-a-new-repository-on-github",
    "href": "session_01.html#create-a-new-repository-on-github",
    "title": "1  Setup",
    "section": "1.1 Create a new Repository on GitHub",
    "text": "1.1 Create a new Repository on GitHub\nTo start fresh and review the Git & GitHub workflow, we are going to create a new repository just for this session.\n\n\n\n\n\n\nStep 1: Create a remote repository on GitHub\n\n\n\n\nLogin to GitHub\nClick the New repository button\nName it {LASTNAME}-functions-and-packages\nAdd a short description\nCheck the box to add a README.md file\nAdd a .gitignore file using the R template\nSet the LICENSE to Apache 2.0\n\n\n\nYou’ve now successfully created a GitHub repository! It has a couple of files that GitHub created for you: README.md, LICENSE, and .gitignore.\n\n\n\n\n\n\nREADME.md files are used to share important information about your repository\n\n\n\nYou should always add a README.md to the root directory of your repository – it is a markdown file that is rendered as HTML and displayed on the landing page of your repository. This is a common place to include any pertinent information about what your repository contains, how to use it, etc.\n\n\nCurrently, our repository just exists on GitHub as a remote repository. Next, we’ll bring a copy of this remote repository down to our local computer (aka clone this repository) so that we can work comfortably in RStudio.\n\n\n\n\n\n\nAn important distinction\n\n\n\nWe refer to the remote copy of the repository that is on GitHub as the origin repository (the one that we cloned from), and the copy on our local computer as the local repository.\n\n\nRStudio makes working with Git and version controlled files easy – to do so, you’ll need to be working within an R project folder. The following steps will look similar to those you followed when first creating an R Project. Let’s follow the instructions below and remind ourselves about this process.\n\n\n\n\n\n\nStep 2: clone your repository and use Git locally in RStudio\n\n\n\n\nStart by clicking the green Code button (top right of your file listing) and copying the URL to your clipboard (this URL represents the repository location).\nGo to RStudio\nClick File &gt; New Project\nSelect Version Control and paste the remote repository URL (which should be copied to your clipboard) in the Repository ULR field\nPress Tab, which will auto-fill the Project directory name field with the same name as that of your remote repo – while you can name the local copy of the repository anything, it’s typical (and highly recommended) to use the same name as the GitHub repository to maintain the correspondence\n\n\n\n\n\n\n\n\n\nOnce you click Create Project, a new RStudio window will open with all of the files from the remote repository copied locally. Depending on how your version of RStudio is configured, the location and size of the panes may differ, but they should all be present – you should see a Git tab, as well as the Files tab, where you can view all of the files copied from the remote repo to this local repo.\nFinally, we will share our project with the instructors. This step is only necessary and possible when working on included-crab. We do this step in case any of you need help debugging your code. Sharing you project allows the instructors to see your code in their screen.\n\n\n\n\n\n\nStep 3: Share your project with the instructors\n\n\n\n\nlocate the “project switcher” dropdown menu in the upper right of your RStudio window. This dropdown has the name of your project (eg: vargas-functions-and-packages), and a dropdown arrow.\nClick the dropdown menu, then “Share Project.”\nWhen the dialog box pops up, add the following usernames to your project:\n\n\nnjlyon\nvargas-pouslen\n\n\nOnce those names show up in the list, click “OK.”"
  },
  {
    "objectID": "session_02.html#learning-objectives",
    "href": "session_02.html#learning-objectives",
    "title": "2  Writing Functions and Packages",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nExplain the importance of using and developing functions\nCreate custom functions using R code\nDocument functions to improve understanding and code communication"
  },
  {
    "objectID": "session_02.html#r-functions",
    "href": "session_02.html#r-functions",
    "title": "2  Writing Functions and Packages",
    "section": "2.1 R Functions",
    "text": "2.1 R Functions\n\n\n\n\n\n\nQuick reminder: What is a function?\n\n\n\n\n\nA set of statements or expressions of code that are organized together to perform a specific task.\nThe statements or expressions of code within the function accept user input(s), does something with it, and returns a useful output.\nSyntax: result_value &lt;- function_name(argument1 = value1, argument2 = value2, ...)\n\n\n\nMany people write R code as a single, continuous stream of commands, often drawn from the R Console itself and simply pasted into a script. While any script brings benefits over non-scripted solutions, there are advantages to breaking code into small, reusable modules. This is the role of a function in R. In this lesson, we will review the advantages of coding with functions, practice by creating some functions and show how to call them, and then do some exercises to build other simple functions.\n\n2.1.1 Why Functions?\n\n\n\n\n\n\nDRY: Don’t Repeat Yourself\n\n\n\n\n“You should consider writing a function whenever you’ve copied and pasted a block of code more than twice (i.e. you now have three copies of the same code).”\nChapter 19 Functions in R for Data Science (Grolemund & Wickham)\n\nBy creating small functions that only complete one logical task and do it well, we quickly gain:\n\nImproved understanding\nReuse via decomposing tasks into bite-sized chunks\nImproved error testing\n\n\n\n\n\n\n\nNaming Functions\n\n\n\nThe name of a function is important. Ideally, function names should be short, but still clearly captures what the function does.\nBest Practices from Chapter 19 Functions in R for Data Science:\n\nFunction names should be verbs and arguments should be nouns (there are exceptions).\nUse the snake_case naming convention for functions that are multiple words.\nFor a “family” of functions, use a common prefix to indicate that they are connected.\n\n\n\n\n\n2.1.2 Exercise: Temperature Conversion\nImagine you have a bunch of data measured in Fahrenheit and you want to convert that for analytical purposes to Celsius. You might have an R script that does this for you.\n\nairtemps &lt;- c(212, 30.3, 78, 32)\ncelsius1 &lt;- (airtemps[1] - 32) * 5/9\ncelsius2 &lt;- (airtemps[2] - 32) * 5/9\ncelsius3 &lt;- (airtemps[3] - 32) * 5/9\n\nNote the duplicated code, where the same formula is repeated three times. This code would be both more compact and more reliable if we didn’t repeat ourselves.\n\nCreate a Function that Converts Fahrenheit to Celsius\nFunctions in R are a mechanism to process some input and return a value. Similarly to other variables, functions can be assigned to a variable so that they can be used throughout code by reference. To create a function in R, you use the function function (so meta!) and assign its result to a variable. Let’s create a function that calculates Celsius temperature outputs from Fahrenheit temperature inputs.\n\nfahr_to_celsius &lt;- function(fahr) {\n  celsius &lt;- (fahr - 32) * 5/9\n  return(celsius)\n}\n\nBy running this code, we have created a function and stored it in R’s global environment. The fahr argument to the function function indicates that the function we are creating takes a single parameter (the temperature in Fahrenheit), and the return statement indicates that the function should return the value in the celsius variable that was calculated inside the function. Let’s use it, and check if we got the same value as before:\n\ncelsius4 &lt;- fahr_to_celsius(airtemps[1])\ncelsius4\n\n[1] 100\n\ncelsius1 == celsius4\n\n[1] TRUE\n\n\nExcellent. So now we have a conversion function we can use. Note that, because most operations in R can take multiple types as inputs, we can also pass the original vector of airtemps, and calculate all of the results at once:\n\ncelsius &lt;- fahr_to_celsius(airtemps)\ncelsius\n\n[1] 100.0000000  -0.9444444  25.5555556   0.0000000\n\n\nThis takes a vector of temperatures in Fahrenheit, and returns a vector of temperatures in Celsius.\n\n\nYour Turn: Create a Function that Converts Celsius to Fahrenheit\n\n\n\n\n\n\nExercise\n\n\n\nCreate a function named celsius_to_fahr that does the reverse, it takes temperature data in Celsius as input, and returns the data converted to Fahrenheit.\nCreate the function celsius_to_fahr in a new R Script file.\nThen use that formula to convert the celsius vector back into a vector of Fahrenheit values, and compare it to the original airtemps vector to ensure that your answers are correct.\nHint: the formula for Celsius to Fahrenheit conversions is celsius * 9/5 + 32.\n\n\nDid you encounter any issues with rounding or precision?\n\n\n\n\n\n\nSolution, but don’t peek!\n\n\n\n\n\nDon’t peek until you write your own…\n\ncelsius_to_fahr &lt;- function(celsius) {\n    fahr &lt;- celsius * 9/5 + 32\n    return(fahr)\n}\n\nresult &lt;- celsius_to_fahr(celsius)\nairtemps == result\n\n[1] TRUE TRUE TRUE TRUE\n\n\n\n\n\n\n\n\n2.1.3 Documenting R Functions\nFunctions need documentation so that we can communicate what they do, and why. The roxygen2 R package provides a simple means to document your functions so that you can explain what the function does, the assumptions about the input values, a description of the value that is returned, and the rationale for decisions made about implementation.\nDocumentation in roxygen2 is placed immediately before the function definition, and is indicated by a special comment line that always starts with the characters #'. Here’s a documented version of a function:\n\n#' Convert temperature values from Fahrenheit to Celsius\n#'\n#' @param fahr Numeric or numeric vector in degrees Fahrenheit\n#' \n#' @return Numeric or numeric vector in degrees Celsius\n#' @export\n#' \n#' @examples\n#' fahr_to_celsius(32)\n#' fahr_to_celsius(c(32, 212, 72))\n\nfahr_to_celsius &lt;- function(fahr) {\n  celsius &lt;- (fahr - 32) * 5/9\n  return(celsius)\n}\n\nNote the use of the @param keyword to define the expectations of input data, and the @return keyword for defining the value that is returned from the function. The @examples function is useful as a reminder as to how to use the function. Finally, the @export keyword indicates that, if this function were added to a package, then the function should be available to other code and packages to utilize.\n\n\n\n\n\n\nCheck it out: Function Documentation Section from R Packages (2e)\n\n\n\nFor more best practices on function documentation, review Hadley Wickham and Jennifer Bryan’s online book R Packages (2e) - Chapter 10, Section 16: Function Documentation.\n\n\n\n\n2.1.4 Exercise: Minimizing Work with Functions\nFunctions can of course be as simple or complex as needed. They can be very effective in repeatedly performing calculations, or for bundling a group of commands that are used on many different input data sources. For example, we might create a simple function that takes Fahrenheit temperatures as input, and calculates both Celsius and Kelvin temperatures. All three values are then returned in a list, making it very easy to create a comparison table among the three scales.\n\nconvert_temps &lt;- function(fahr) {\n  celsius &lt;- (fahr - 32) * 5/9\n  kelvin &lt;- celsius + 273.15\n  return(list(fahr = fahr, celsius = celsius, kelvin = kelvin))\n}\n\ntemps_df &lt;- data.frame(convert_temps(seq(-100,100,10)))\n\n\n\n\n\n\n\n\nOnce we have a dataset like that, we might want to plot it. One thing that we do repeatedly is set a consistent set of display elements for creating graphs and plots. By using a function to create a custom ggplot theme, we can enable to keep key parts of the formatting flexible. For example, in the custom_theme function, we provide a base_size argument that defaults to using a font size of 9 points. Because it has a default set, it can safely be omitted. But if it is provided, then that value is used to set the base font size for the plot.\n\ncustom_theme &lt;- function(base_size = 9) {\n    ggplot2::theme(\n      text             = ggplot2::element_text(family = 'Helvetica', \n                                               color = 'gray30', \n                                               size = base_size),\n      plot.title       = ggplot2::element_text(size = ggplot2::rel(1.25), \n                                               hjust = 0.5, \n                                               face = 'bold'),\n      panel.background = ggplot2::element_blank(),\n      panel.border     = ggplot2::element_blank(),\n      panel.grid.minor = ggplot2::element_blank(),\n      panel.grid.major = ggplot2::element_line(colour = 'grey90', \n                                               linewidth = 0.25),\n      legend.position  = 'right',\n      legend.key       = ggplot2::element_rect(colour = NA, \n                                               fill = NA),\n      axis.ticks       = ggplot2::element_blank(),\n      axis.line        = ggplot2::element_blank()\n      )\n}\n\nlibrary(ggplot2)\n\nggplot(temps_df, mapping = aes(x = fahr, y = celsius, color = kelvin)) +\n    geom_point() +\n    custom_theme(10)\n\n\n\n\nIn this case, we set the font size to 10, and plotted the air temperatures. The custom_theme function can be used anywhere that one needs to consistently format a plot.\nBut we can go further. One can wrap the entire call to ggplot in a function, enabling one to create many plots of the same type with a consistent structure. For example, we can create a scatterplot function that takes a data frame as input, along with a point_size for the points on the plot, and a font_size for the text.\n\nscatterplot &lt;- function(df, point_size = 2, font_size = 9) {\n  ggplot(df, mapping = aes(x = fahr, y = celsius, color = kelvin)) +\n    geom_point(size = point_size) +\n    custom_theme(font_size)\n}\n\nCalling that let’s us, in a single line of code, create a highly customized plot but maintain flexibility via the arguments passed in to the function. Let’s set the point size to 3 and font to 16 to make the plot more legible.\n\nscatterplot(temps_df, point_size = 3, font_size = 16)\n\n\n\n\nOnce these functions are set up, all of the plots built with them can be reformatted by changing the settings in just the functions, whether they were used to create 1, 10, or 100 plots.\n\n\n2.1.5 Summary\n\nFunctions are useful to reduce redundancy, reuse code, and reduce errors\nBuild functions with function()\nDocument functions with roxygen2 comments\n\n\n\n\n\n\n\nWorkflow for Creating Functions\n\n\n\n\nHave a clear goal (sometimes it helps to create a visual).\nOutline the plan and then add more detailed steps or tasks.\nBuild it up bit-by-bit and start with a minimum viable example. As your function becomes more complex, it can harder to track all the bits.\nAlways check intermediates!"
  },
  {
    "objectID": "session_02.html#r-packages",
    "href": "session_02.html#r-packages",
    "title": "2  Writing Functions and Packages",
    "section": "2.2 R Packages",
    "text": "2.2 R Packages\nMost R users are familiar with loading and utilizing packages in their work. And they know how rich CRAN is in providing for many conceivable needs. Most people have never created a package for their own work, and most think the process is too complicated. Really it’s pretty straighforward and super useful in your personal work. Creating packages serves two main use cases:\n\nMechanism to redistribute reusable code (even if just for yourself)\nMechanism to reproducibly document analysis and models and their results\n\nEven if you don’t plan on writing a package with such broad appeal such as, say, ggplot2 or dplyr, you still might consider creating a package to contain:\n\nUseful utility functions you write (i.e. a Personal Package). Having a place to put these functions makes it much easier to find and use them later.\nA set of shared routines for your lab or research group, making it easier to remain consistent within your team and also to save time.\nThe analysis accompanying a thesis or manuscript, making it all that much easier for others to reproduce your results.\n\n\n\n\n\n\n\nPackages for Creating and Maintaining Packages\n\n\n\nThe usethis, devtools and roxygen2 packages make creating and maintining a package to be a straightforward experience.\n\n\n\n2.2.1 Create a Basic Package\nTo create a package we’re going to use the following packages:\n\ndevtools: Provides R functions that make package development easier by expediting common development tasks.\nusethis: Commonly referred to as a “workflow package” and provides functions that automate common tasks in project setup and development for both R packages and non-package projects.\nroxygen2: Provides a structure for describing your functions in the scripts you’re creating them in. It will additionally process the source code and the documentation within it to automatically create the necessary files for the documentation to appear in your R Package.\n\nThanks to the great usethis package, it only takes one function call to create the skeleton of an R package using create_package(). Which eliminates pretty much all reasons for procrastination. To create a package called mytools, all you do is:\n\nusethis::create_package(\"~/mytools\")\n\n✔ Creating '/home/dolinh/mytools/'\n✔ Setting active project to '/home/dolinh/mytools'\n✔ Creating 'R/'\n✔ Writing 'DESCRIPTION'\nPackage: mytools\nTitle: What the Package Does (One Line, Title Case)\nVersion: 0.0.0.9000\nAuthors@R (parsed):\n    * First Last &lt;first.last@example.com&gt; [aut, cre] (YOUR-ORCID-ID)\nDescription: What the package does (one paragraph).\nLicense: `use_mit_license()`, `use_gpl3_license()` or friends to\n    pick a license\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.2.3\n✔ Writing 'NAMESPACE'\n✔ Writing 'mytools.Rproj'\n✔ Adding '^mytools\\\\.Rproj$' to '.Rbuildignore'\n✔ Adding '.Rproj.user' to '.gitignore'\n✔ Adding '^\\\\.Rproj\\\\.user$' to '.Rbuildignore'\n✔ Opening '/home/dolinh/mytools/' in new RStudio session\n✔ Setting active project to '&lt;no active project&gt;'\n\n\n\n\n\n\nWhat did the create_package() function do?\n\n\n\n\nOpen a new project called mytools (the name of the package) in a new RStduio session.\nCreate a top-level directory structure, including a number of critical files under the standard R package structure:\n\nDESCRIPTIONfile: The most important file, which provides metadata about your package. Edit this file to provide reasonable values for each of the fields, including your contact information.\nNAMESPACE file declares the functions your package exports for external use and the external functions your package imports from other packages.\nR/ directory is where you save all your function scripts and other .R files.\n.Rbuildignore lists files that we need to have around but that should not be included when building the R package from source.\n.Rproj.user is a directory used internally by RStudio.\n\nAdd the Build Tab to the Environment Pane.\n\n\n\n\n\n2.2.2 Add a License\nInformation about choosing a LICENSE is provided in the R Package (2e) book Chapter 12: Licensing.\nThe DESCRIPTION file expects the license to be chose from a predefined list, but you can use its various utility methods for setting a specific license file, such as the MIT license or the Apache 2 license:\n\nusethis::use_apache_license()\n\n✔ Setting License field in DESCRIPTION to 'Apache License (&gt;= 2.0)'\n✔ Writing 'LICENSE.md'\n✔ Adding '^LICENSE\\\\.md$' to '.Rbuildignore'\nOnce your license has been chosen, and you’ve edited your DESCRIPTION file with your contact information, a title, and a description, it will look like this:\n\n\n\n\n\n\nPackage: mytools\nTitle: Halina Do-Linh's Utility R Functions\nVersion: 0.0.0.9000\nAuthors@R: \n    person(\"Halina\", \"Do-Linh\", email = \"dolinh@nceas.ucsb.edu\", role = c(\"aut\", \"cre\"),\n           comment = c(ORCID = \"YOUR-ORCID-ID\"))\nDescription: A collection of useful R functions that I use for general utilities.\nLicense: Apache License (&gt;= 2)\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.2.3\n\n\n\n\n\n2.2.3 Add Code\nThe skeleton package created contains a directory R which should contain your source files. Add your functions and classes in files to this directory, attempting to choose names that don’t conflict with existing packages. For example, you might add a file custom_theme that contains a function custom_theme() that you might want to reuse. The usethis::use_r() function will help set up you files in the right places. For example, running:\n\nusethis::use_r(\"custom_theme\")\n\n✔ Setting active project to '/home/dolinh/mytools'\n• Modify 'R/custom_theme.R'\n• Call `use_test()` to create a matching test file\ncreates the file R/custom_theme and stores it in the R directory, which you can then modify as needed:\n\ncustom_theme &lt;- function(base_size = 9) {\n    ggplot2::theme(\n      axis.ticks       = ggplot2::element_blank(),\n      text             = ggplot2::element_text(family = 'Helvetica', \n                                               color = 'gray30', \n                                               size = base_size),\n      plot.title       = ggplot2::element_text(size = ggplot2::rel(1.25), \n                                               hjust = 0.5, \n                                               face = 'bold'),\n      panel.background = ggplot2::element_blank(),\n      legend.position  = 'right',\n      panel.border     = ggplot2::element_blank(),\n      panel.grid.minor = ggplot2::element_blank(),\n      panel.grid.major = ggplot2::element_line(colour = 'grey90', \n                                               linewidth = .25),\n      legend.key       = ggplot2::element_rect(colour = NA, \n                                               fill = NA),\n      axis.line        = ggplot2::element_blank()\n      )\n}\n\n\n\n\n\n\n\nPower of Packages\n\n\n\nRemember when we created custom_theme() from the Functions Lesson Section 15.1.4? Now that we’ve added it to our mytools package, we don’t have to worry about coyping the code from another file, sourcing the file from another directory, or copying the script from an R Project.\nInstead we can leverage the portable functionality of a package to easily access our custom functions and maintain the code in one location.\n\n\n\n\n2.2.4 Add Dependencies\nIf your R code depends on functions from another package, you must declare it. In the Imports section in the DESCRIPTION file, list all the packages your functions depend upon.\nIn our custom_theme() function, we depend on the ggplot2 package, and so we need to list it as a dependency.\nOnce again, usethis provides a handy helper method:\n\nusethis::use_package(\"ggplot2\")\n\n✔ Adding 'ggplot2' to Imports field in DESCRIPTION\n• Refer to functions with `ggplot2::fun()`\nTake a look at the DESCRIPTION file again, and you’ll see the Imports section has been added, with ggplot2 underneath.\n\n\n\n\n\n\nPackage: mytools\nTitle: Halina Do-Linh's Utility R Functions\nVersion: 0.0.0.9000\nAuthors@R: \n    person(\"Halina\", \"Do-Linh\", email = \"dolinh@nceas.ucsb.edu\", role = c(\"aut\", \"cre\"),\n           comment = c(ORCID = \"YOUR-ORCID-ID\"))\nDescription: A collection of useful R functions that I use for general utilities.\nLicense: Apache License (&gt;= 2)\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.2.3\nImports: \n    ggplot2\n\n\n\n\n\n2.2.5 Add Documentation\nDocumentation is crucial to add to each of your functions. In the Functions Lesson, we did this using the roxygen2 package and that same package and approach can be used for packages.\nThe roxygen2 approach allows us to add comments in the source code, where are then converted into Help pages that we can access by typing ?function_name in the Console.\nLet’s add documentation for the custom_theme() function.\n\n#' My custom ggplot theme\n#'\n#' @param base_size Numeric value of font size of all text elements in plot\n#'\n#' @return A theme used for ggplot point or line plots\n#' @export\n#'\n#' @examples\n#' library(ggplot2)\n#' \n#'   ggplot(data = mtcars, aes(x = mpg, y = disp)) +\n#'     geom_point() +\n#'     custom_theme(base_size = 30)\ncustom_theme &lt;- function(base_size = 9) {\n  ggplot2::theme(\n    axis.ticks       = ggplot2::element_blank(),\n    text             = ggplot2::element_text(family = 'Helvetica',\n                                             color = 'gray30',\n                                             size = base_size),\n    plot.title       = ggplot2::element_text(size = ggplot2::rel(1.25),\n                                             hjust = 0.5,\n                                             face = 'bold'),\n    panel.background = ggplot2::element_blank(),\n    legend.position  = 'right',\n    panel.border     = ggplot2::element_blank(),\n    panel.grid.minor = ggplot2::element_blank(),\n    panel.grid.major = ggplot2::element_line(colour = 'grey90',\n                                             linewidth = .25),\n    legend.key       = ggplot2::element_rect(colour = NA,\n                                             fill = NA),\n    axis.line        = ggplot2::element_blank()\n  )\n}\n\nOnce your files are documented, you can then process the documentation using devtools::document() to generate the appropriate .Rd files that your package needs. The .Rd files will appear in the man/ directory, which is automatically created by devtools::document().\n\ndevtools::document()\n\nℹ Updating mytools documentation\nℹ Loading mytools\nWriting custom_theme.Rd\nWe now have a package that we can check() and install() and release(). These functions come from the devtools package, but first let’s do some testing.\n\n\n2.2.6 Testing\nYou can test your code using the testthat package’s testing framework. The ussethis::use_testthat() function will set up your package for testing, and then you can use the use_test() function to setup individual test files. For example, in the Functions Lesson we created some tests for our fahr_to_celsius functions but ran them line by line in the console.\nFirst, lets add that function to our package. Run the use_r function in the console:\n\nusethis::use_r(\"fahr_to_celsius\")\n\nThen copy the function and documentation into the R script that opens and save the file.\n\n#' Convert temperature values from Fahrenheit to Celsius\n#'\n#' @param fahr Numeric or numeric vector in degrees Fahrenheit\n#' \n#' @return Numeric or numeric vector in degrees Celsius\n#' @export\n#' \n#' @examples\n#' fahr_to_celsius(32)\n#' fahr_to_celsius(c(32, 212, 72))\n\nfahr_to_celsius &lt;- function(fahr) {\n  celsius &lt;- (fahr-32)*5/9\n  return(celsius)\n}\n\nNow, set up your package for testing:\n\nusethis::use_testthat()\n\n✔ Setting active project to '/home/dolinh/mytools'\n✔ Adding 'testthat' to Suggests field in DESCRIPTION\n✔ Setting Config/testthat/edition field in DESCRIPTION to '3'\n✔ Creating 'tests/testthat/'\n✔ Writing 'tests/testthat.R'\n• Call `use_test()` to initialize a basic test file and open it for editing.\nThen write a test for fahr_to_celsius:\n\nusethis::use_test(\"fahr_to_celsius\")\n\n✔ Writing 'tests/testthat/test-fahr_to_celsius.R'\n• Modify 'tests/testthat/test-fahr_to_celsius.R'\nYou can now add tests to the test-fahr_to_celsius.R, and you can run all of the tests using devtools::test(). For example, if you add a test to the test-fahr_to_celsius.R file:\n\ntest_that(\"fahr_to_celsius works\", {\n  expect_equal(fahr_to_celsius(32), 0)\n  expect_equal(fahr_to_celsius(212), 100)\n})\n\nThen you can run the tests to be sure all of your functions are working using devtools::test():\n\ndevtools::test()\n\nℹ Testing mytools\n✔ | F W S  OK | Context\n✔ |         2 | fahr_to_celsius [0.2s]                                                                                             \n\n══ Results ════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════\nDuration: 0.4 s\n\n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 2 ]\nYay, all tests passed!\n\n\n2.2.7 Checking and Installing\nNow that you’ve completed testing your package, you can check it for consistency and completeness using devtools::check().\n\ndevtools::check()\n\n══ Documenting ════════════════════════════════════════════════════════════════════════════════════════════════════════════════════\nℹ Updating mytools documentation\nℹ Loading mytools\n\n══ Building ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════\nSetting env vars:\n• CFLAGS    : -Wall -pedantic -fdiagnostics-color=always\n• CXXFLAGS  : -Wall -pedantic -fdiagnostics-color=always\n• CXX11FLAGS: -Wall -pedantic -fdiagnostics-color=always\n• CXX14FLAGS: -Wall -pedantic -fdiagnostics-color=always\n• CXX17FLAGS: -Wall -pedantic -fdiagnostics-color=always\n• CXX20FLAGS: -Wall -pedantic -fdiagnostics-color=always\n── R CMD build ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n✔  checking for file ‘/home/dolinh/mytools/DESCRIPTION’ (610ms)\n─  preparing ‘mytools’:\n✔  checking DESCRIPTION meta-information (338ms)\n─  checking for LF line-endings in source and make files and shell scripts\n─  checking for empty or unneeded directories\n─  building ‘mytools_0.0.0.9000.tar.gz’\n   \n══ Checking ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════\nSetting env vars:\n• _R_CHECK_CRAN_INCOMING_REMOTE_               : FALSE\n• _R_CHECK_CRAN_INCOMING_                      : FALSE\n• _R_CHECK_FORCE_SUGGESTS_                     : FALSE\n• _R_CHECK_PACKAGES_USED_IGNORE_UNUSED_IMPORTS_: FALSE\n• NOT_CRAN                                     : true\n── R CMD check ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n─  using log directory ‘/tmp/Rtmp1UgqFD/file6d79323df6fae/mytools.Rcheck’ (649ms)\n─  using R version 4.2.2 (2022-10-31)\n─  using platform: x86_64-pc-linux-gnu (64-bit)\n─  using session charset: UTF-8\n─  using options ‘--no-manual --as-cran’\n✔  checking for file ‘mytools/DESCRIPTION’\n─  this is package ‘mytools’ version ‘0.0.0.9000’\n─  package encoding: UTF-8\n✔  checking package namespace information\n✔  checking package dependencies (2.1s)\n✔  checking if this is a source package\n✔  checking if there is a namespace\n✔  checking for executable files\n✔  checking for hidden files and directories\n✔  checking for portable file names\n✔  checking for sufficient/correct file permissions\n✔  checking serialization versions\n✔  checking whether package ‘mytools’ can be installed (3.2s)\n✔  checking installed package size\n✔  checking package directory\n✔  checking for future file timestamps (412ms)\n✔  checking DESCRIPTION meta-information (584ms)\n✔  checking top-level files ...\n✔  checking for left-over files\n✔  checking index information\n✔  checking package subdirectories ...\n✔  checking R files for non-ASCII characters ...\n✔  checking R files for syntax errors ...\n✔  checking whether the package can be loaded (481ms)\n✔  checking whether the package can be loaded with stated dependencies ...\n✔  checking whether the package can be unloaded cleanly ...\n✔  checking whether the namespace can be loaded with stated dependencies ...\n✔  checking whether the namespace can be unloaded cleanly (450ms)\n✔  checking loading without being on the library search path (522ms)\n✔  checking dependencies in R code (1.2s)\n✔  checking S3 generic/method consistency (1s)\n✔  checking replacement functions ...\n✔  checking foreign function calls ...\n✔  checking R code for possible problems (5.2s)\n✔  checking Rd files (449ms)\n✔  checking Rd metadata ...\n✔  checking Rd line widths ...\n✔  checking Rd cross-references ...\n✔  checking for missing documentation entries ...\n✔  checking for code/documentation mismatches (885ms)\n✔  checking Rd \\usage sections (1.3s)\n✔  checking Rd contents ...\n✔  checking for unstated dependencies in examples ...\n✔  checking examples (2.7s)\n✔  checking for unstated dependencies in ‘tests’ ...\n─  checking tests (418ms)\n✔  Running ‘testthat.R’ (1.4s)\n✔  checking for non-standard things in the check directory\n✔  checking for detritus in the temp directory\n   \n   \n── R CMD check results ──────────────────────────────────────────────────────────────────────────────────── mytools 0.0.0.9000 ────\nDuration: 27.3s\n\n0 errors ✔ | 0 warnings ✔ | 0 notes ✔\nThen you can install it locally using devtools::install(), which needs to be run from the parent directory of your module\n\ndevtools::install()\n\n── R CMD build ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n✔  checking for file ‘/home/dolinh/mytools/DESCRIPTION’ (541ms)\n─  preparing ‘mytools’:\n✔  checking DESCRIPTION meta-information ...\n─  checking for LF line-endings in source and make files and shell scripts\n─  checking for empty or unneeded directories\n─  building ‘mytools_0.0.0.9000.tar.gz’\n   \nRunning /opt/R/4.2.2/lib/R/bin/R CMD INSTALL /tmp/Rtmp1UgqFD/mytools_0.0.0.9000.tar.gz --install-tests \n* installing to library ‘/home/dolinh/R/x86_64-pc-linux-gnu-library/4.2’\n* installing *source* package ‘mytools’ ...\n** using staged installation\n** R\n** tests\n** byte-compile and prepare package for lazy loading\n** help\n*** installing help indices\n** building package indices\n** testing if installed package can be loaded from temporary location\n** testing if installed package can be loaded from final location\n** testing if installed package keeps a record of temporary installation path\n* DONE (mytools)\nAfter installing, your package is now available for use in your local environment, yay!\n\n\n\n\n\n\nCheck out the Build Tab\n\n\n\nRemember when we ran usethis::create_package() and after we ran it we saw the Build Tab added to the Environment pane?\nIn the Build Tab, each of the buttons correspond with one of the devtools functions we ran, meaning:\n\nTest button is equivalent to running devtools::test() in the Console\nCheck button is equivalent to running devtools::check() in the Console\nInstall button is equivalent to running devtools::install() in the Console\n\n\n\n\n\n2.2.8 Sharing and Releasing\n\nGitHub: The simplest way to share your package with others is to upload it to a GitHub repository, which allows others to install your package using the install_github('mytools','github_username') function from devtools.\nCRAN: If your package might be broadly useful, also consider releasing it to CRAN, using the release() method from devtools(). Releasing a package to CRAN requires a significant amount of work to ensure it follows the standards set by the R community, but it is entirely tractable and a valuable contribution to the science community. If you are considering releasing a package more broadly, you may find that the supportive community at ROpenSci provides incredible help and valuable feeback through their onboarding process.\nR-Universe: A newer approach is to link your package release to R-Universe, which is an effective way to make it easy to test and maintain packages so that many people can install them using the familiar install.pacakges() function in R. In R-Universe, people and organizations can create their own universe of packages, which represent a collection of packages that appear as a CRAN-compatible repository in R. For example, for DataONE we maintain the DataONE R-Universe, which lists the packages we actively maintain as an organization. So, any R-user that wants to install these packages can do so by adding our universe to their list of repositories, and then installing packages as normal. For example, to install the codyn package, one could use:\n\n\ninstall.packages('codyn', repos = c('https://dataoneorg.r-universe.dev', 'https://cloud.r-project.org'))\n\n\n\n2.2.9 Exercise: Add More Functions\nAdd additional temperature conversion functions to the mytools package and:\n\nAdd full documentation for each function\nWrite tests to ensure the functions work properly\nRebuild the package using document(), check(), and install()\n\n\n\n\n\n\n\nDon’t forget to update the version number before you install!\n\n\n\nVersion information is located in the DESCRIPTION file and when you first create a package the version is 0.0.0.9000.\nThis version number follows the format major.minor.patch.dev. The different parts of the version represent different things:\n\nMajor: A significant change to the package that would be expected to break users code. This is updated very rarely when the package has been redesigned in some way.\nMinor: A minor version update means that new functionality has been added to the package. It might be new functions to improvements to existing functions that are compatible with most existing code.\nPatch: Patch updates are bug fixes. They solve existing issues but don’t do anything new.\nDev: Dev versions are used during development and this part is missing from release versions. For example you might use a dev version when you give someone a beta version to test. A package with a dev version can be expected to change rapidly or have undiscovered issues.\n\nAfter you’ve made some changes to a package, but before you install run the code:\n\nusethis::use_version()\n\nCurrent version is 0.0.0.9000.\nWhat should the new version be? (0 to exit) \n\n1: major --&gt; 1.0.0\n2: minor --&gt; 0.1.0\n3: patch --&gt; 0.0.1\n4:   dev --&gt; 0.0.0.9001\nSince we’re adding new functions, we can consider this a minor change and can select option 2.\nSelection: 2\n✔ Setting Version field in DESCRIPTION to '0.1.0'\nSource: COMBINE’s R package workshop, Ch 9: Versioning\n\n\n\n\n2.2.10 Additional Resources\n\nHadley Wickham and Jenny Bryan’s awesome book: R Packages\nROpenSci Blog Post: How to create your personal CRAN-like repository on R-universe\nKarl Broman’s: R package primer: a minimal tutorial on writing R packages\nThomas Westlake’s Short Tutorial: Writing an R package from scratch (his post is an updated version of Hilary Parker’s blog post)"
  },
  {
    "objectID": "session_04.html#steps-to-check-if-your-personal-access-token-is-valid",
    "href": "session_04.html#steps-to-check-if-your-personal-access-token-is-valid",
    "title": "4  Appendix",
    "section": "4.1 Steps to check if your Personal Access Token is valid",
    "text": "4.1 Steps to check if your Personal Access Token is valid\n\nLogin to included-crab\nOpen training_LASTNAME Rproj\nIn the console run: usethis::git_sitrep()\n\n\n\n\n\n\n\nIf your Personal Access Token is , you have to go ahead and reset it following the instructions on how to Set (or reset) your PAT.\n\n\n\n\n\n\n\nSet (or reset) your PAT\n\n\n\n\n\n\n\nSetting up your PAT\n\n\n\n\nRun usethis::create_github_token() in the Console.\nA new browser window should open up to GitHub, showing all the scopes options. You can review the scopes, but you don’t need to worry about which ones to select this time. Using create_github_token() automatically pre-selects some recommended scopes. Go ahead and scroll to the bottom and click “Generate Token”.\nCopy the generated token.\nBack in RStudio, run gitcreds::gitcreds_set() in the Console.\nPaste your PAT when the prompt asks for it.\nLast thing, run usethis::git_sitrep() in the Console to check your Git configuration and that you’ve successful stored your PAT.\n\n\n\n\nCheck your PAT is .\n\n\nIn the console run usethis::git_sitrep()\nExpect to see this result:"
  }
]